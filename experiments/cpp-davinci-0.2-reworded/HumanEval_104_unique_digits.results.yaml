language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while(x[i] > 0) {\n\
    \                if(x[i] % 2 == 0) {\n                    flag = 1;\n        \
    \            break;\n                }\n                x[i] /= 10;\n        \
    \    }\n            if(flag == 0) {\n                res.push_back(x[i]);\n  \
    \          }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkau97i0.cpp: In function 'int main()':\n/tmp/tmpvkau97i0.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvkau97i0.cpp:2:\n/tmp/tmpvkau97i0.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvkau97i0.cpp:34:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvkau97i0.cpp:34:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvkau97i0.cpp:34:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvkau97i0.cpp:34:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvkau97i0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        bool flag = true;\n        while(i) {\n            if(i %\
    \ 2 == 0) {\n                flag = false;\n                break;\n         \
    \   }\n            i /= 10;\n        }\n        if(flag) res.push_back(i);\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0q2lngi.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpi0q2lngi.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmpi0q2lngi.cpp:24:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmpi0q2lngi.cpp:24:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmpi0q2lngi.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmpi0q2lngi.cpp:25:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpi0q2lngi.cpp: In function 'int\
    \ main()':\n/tmp/tmpi0q2lngi.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi0q2lngi.cpp:2:\n/tmp/tmpi0q2lngi.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi0q2lngi.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi0q2lngi.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi0q2lngi.cpp:29:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93m366uz.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp93m366uz.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp93m366uz.cpp:25:5: error: expected ';' before\
    \ 'sort'\n     sort(res.begin(),res.end());\n     ^\n/tmp/tmp93m366uz.cpp:25:31:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     sort(res.begin(),res.end());\n           \
    \                    ^\n/tmp/tmp93m366uz.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp93m366uz.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp93m366uz.cpp: In function 'int main()':\n\
    /tmp/tmp93m366uz.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp93m366uz.cpp:2:\n/tmp/tmp93m366uz.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp93m366uz.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp93m366uz.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp93m366uz.cpp:30:82:\
    \ error: no matching function for "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            num = num / 10;\n        }\n        if(flag == 0) {\n       \
    \     res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp15dz9guz.cpp: In function 'int main()':\n/tmp/tmp15dz9guz.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp15dz9guz.cpp:2:\n/tmp/tmp15dz9guz.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp15dz9guz.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp15dz9guz.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp15dz9guz.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp15dz9guz.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp15dz9guz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi53uf13d.cpp: In function 'int main()':\n/tmp/tmpi53uf13d.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi53uf13d.cpp:2:\n/tmp/tmpi53uf13d.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi53uf13d.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi53uf13d.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi53uf13d.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi53uf13d.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi53uf13d.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3erd77su.cpp: In function 'int main()':\n/tmp/tmp3erd77su.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/tmp/tmp3erd77su.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3erd77su.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3erd77su.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3erd77su.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3erd77su.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool isUnique\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                isUnique = false;\n          \
    \      break;\n            }\n            num /= 10;\n        }\n        if (isUnique)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kqxjuji.cpp: In function 'int main()':\n/tmp/tmp_kqxjuji.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_kqxjuji.cpp:2:\n/tmp/tmp_kqxjuji.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp_kqxjuji.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp_kqxjuji.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_kqxjuji.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp_kqxjuji.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_kqxjuji.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            ans.push_back(i);\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznjxumzk.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpznjxumzk.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmpznjxumzk.cpp:25:5: error: expected ';' before\
    \ 'sort'\n     sort(ans.begin(),ans.end());\n     ^\n/tmp/tmpznjxumzk.cpp:25:31:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(ans.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), ans.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     sort(ans.begin(),ans.end());\n           \
    \                    ^\n/tmp/tmpznjxumzk.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return ans;\n     ^\n/tmp/tmpznjxumzk.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmpznjxumzk.cpp: In function 'int main()':\n\
    /tmp/tmpznjxumzk.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpznjxumzk.cpp:2:\n/tmp/tmpznjxumzk.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpznjxumzk.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpznjxumzk.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpznjxumzk.cpp:30:82:\
    \ error: no matching function for "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbeucftq.cpp: In function 'int main()':\n/tmp/tmpbbeucftq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/tmp/tmpbbeucftq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbbeucftq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbbeucftq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbbeucftq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbbeucftq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        std::string s = std::to_string(i);\n        bool flag\
    \ = true;\n        for (auto j : s) {\n            if ((j - '0') % 2 == 0) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4qmqi93.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpf4qmqi93.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpf4qmqi93.cpp:26:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpf4qmqi93.cpp:26:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpf4qmqi93.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpf4qmqi93.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpf4qmqi93.cpp: In function 'int\
    \ main()':\n/tmp/tmpf4qmqi93.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf4qmqi93.cpp:2:\n/tmp/tmpf4qmqi93.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpf4qmqi93.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpf4qmqi93.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf4q"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool is_unique\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          is_unique = false;\n                break;\n            }\n       \
    \     num /= 10;\n        }\n        if (is_unique) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe45n32jz.cpp: In function 'int main()':\n/tmp/tmpe45n32jz.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe45n32jz.cpp:2:\n/tmp/tmpe45n32jz.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpe45n32jz.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpe45n32jz.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpe45n32jz.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpe45n32jz.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpe45n32jz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_70m0ox.cpp: In function 'int main()':\n/tmp/tmph_70m0ox.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph_70m0ox.cpp:2:\n/tmp/tmph_70m0ox.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmph_70m0ox.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmph_70m0ox.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmph_70m0ox.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmph_70m0ox.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmph_70m0ox.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if ((i % 10) % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            i /= 10;\n        }\n        if (flag) {\n\
    \            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gqu85bm.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp5gqu85bm.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp5gqu85bm.cpp:26:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmp5gqu85bm.cpp:26:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmp5gqu85bm.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp5gqu85bm.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp5gqu85bm.cpp: In function 'int\
    \ main()':\n/tmp/tmp5gqu85bm.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5gqu85bm.cpp:2:\n/tmp/tmp5gqu85bm.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp5gqu85bm.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp5gqu85bm.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5gq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int rem = num % 10;\n            if(rem\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjx_sa34s.cpp: In function 'int main()':\n/tmp/tmpjx_sa34s.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjx_sa34s.cpp:2:\n/tmp/tmpjx_sa34s.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjx_sa34s.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjx_sa34s.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjx_sa34s.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjx_sa34s.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjx_sa34s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5d_iqi8a.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp5d_iqi8a.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp5d_iqi8a.cpp:30:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmp5d_iqi8a.cpp:30:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmp5d_iqi8a.cpp:31:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp5d_iqi8a.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp5d_iqi8a.cpp: In function 'int\
    \ main()':\n/tmp/tmp5d_iqi8a.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5d_iqi8a.cpp:2:\n/tmp/tmp5d_iqi8a.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp5d_iqi8a.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp5d_iqi8a.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5d_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num > 0) {\n            if(num % 10 % 2 == 0) {\n             \
    \   flag = 1;\n                break;\n            }\n            num /= 10;\n\
    \        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n      \
    \  }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjntkk4gm.cpp: In function 'int main()':\n/tmp/tmpjntkk4gm.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjntkk4gm.cpp:2:\n/tmp/tmpjntkk4gm.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjntkk4gm.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjntkk4gm.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjntkk4gm.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjntkk4gm.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjntkk4gm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_iu42q0j.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp_iu42q0j.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp_iu42q0j.cpp:25:5: error: expected ';' before\
    \ 'sort'\n     sort(res.begin(),res.end());\n     ^\n/tmp/tmp_iu42q0j.cpp:25:31:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     sort(res.begin(),res.end());\n           \
    \                    ^\n/tmp/tmp_iu42q0j.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp_iu42q0j.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp_iu42q0j.cpp: In function 'int main()':\n\
    /tmp/tmp_iu42q0j.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_iu42q0j.cpp:2:\n/tmp/tmp_iu42q0j.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp_iu42q0j.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp_iu42q0j.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_iu42q0j.cpp:30:82:\
    \ error: no matching function for "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        bool flag = true;\n        while(i) {\n            if(i %\
    \ 2 == 0) {\n                flag = false;\n                break;\n         \
    \   }\n            i /= 10;\n        }\n        if(flag) res.push_back(i);\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0q2lngi.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpi0q2lngi.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmpi0q2lngi.cpp:24:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmpi0q2lngi.cpp:24:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmpi0q2lngi.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmpi0q2lngi.cpp:25:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpi0q2lngi.cpp: In function 'int\
    \ main()':\n/tmp/tmpi0q2lngi.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi0q2lngi.cpp:2:\n/tmp/tmpi0q2lngi.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi0q2lngi.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi0q2lngi.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi0q2lngi.cpp:29:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7d55pr_q.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp7d55pr_q.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp7d55pr_q.cpp:26:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmp7d55pr_q.cpp:26:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmp7d55pr_q.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp7d55pr_q.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp7d55pr_q.cpp: In function 'int\
    \ main()':\n/tmp/tmp7d55pr_q.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7d55pr_q.cpp:2:\n/tmp/tmp7d55pr_q.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp7d55pr_q.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp7d55pr_q.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7d5"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num>0){\n            int digit = num%10;\n            if(digit%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag) ans.push_back(x[i]);\n    }\n\
    \    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqkavqxo.cpp: In function 'int main()':\n/tmp/tmpeqkavqxo.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeqkavqxo.cpp:2:\n/tmp/tmpeqkavqxo.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpeqkavqxo.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpeqkavqxo.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeqkavqxo.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeqkavqxo.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeqkavqxo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) res.push_back(x[i]);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_o93rq55.cpp: In function 'int main()':\n/tmp/tmp_o93rq55.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_o93rq55.cpp:2:\n/tmp/tmp_o93rq55.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp_o93rq55.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp_o93rq55.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_o93rq55.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp_o93rq55.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_o93rq55.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9lrpfxyf.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp9lrpfxyf.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp9lrpfxyf.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp9lrpfxyf.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp9lrpfxyf.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp9lrpfxyf.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp9lrpfxyf.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp9lrpfxyf.cpp: In function 'int main()':\n/tmp/tmp9lrpfxyf.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9lrpfxyf.cpp:2:\n/tmp/tmp9lrpfxyf.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp9lrpfxyf.cpp:22:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp9lrpfxyf.cpp:22:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9lrpfxyf.cpp:22:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp9lrpfxyf.cpp:22:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        bool flag = true;\n        while(i) {\n            if(i %\
    \ 2 == 0) {\n                flag = false;\n                break;\n         \
    \   }\n            i /= 10;\n        }\n        if(flag) res.push_back(i);\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0q2lngi.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpi0q2lngi.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmpi0q2lngi.cpp:24:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmpi0q2lngi.cpp:24:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmpi0q2lngi.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmpi0q2lngi.cpp:25:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpi0q2lngi.cpp: In function 'int\
    \ main()':\n/tmp/tmpi0q2lngi.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi0q2lngi.cpp:2:\n/tmp/tmpi0q2lngi.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi0q2lngi.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi0q2lngi.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi0q2lngi.cpp:29:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            bool flag=true;\n            while(i>0){\n              \
    \  if(i%2==0){\n                    flag=false;\n                    break;\n\
    \                }\n                i/=10;\n            }\n            if(flag){\n\
    \                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8toy2wp8.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp8toy2wp8.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp8toy2wp8.cpp:31:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp8toy2wp8.cpp:31:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp8toy2wp8.cpp:32:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp8toy2wp8.cpp:32:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp8toy2wp8.cpp: In function 'int main()':\n\
    /tmp/tmp8toy2wp8.cpp:35:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8toy2wp8.cpp:2:\n/tmp/tmp8toy2wp8.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp8toy2wp8.cpp:36:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp8toy2wp8.cpp:36:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8toy2wp8.cpp:36:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num) {\n            if(num % 10 % 2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n            num /= 10;\n      \
    \  }\n        if(flag == 0) {\n            res.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jvhiyo9.cpp: In function 'int main()':\n/tmp/tmp3jvhiyo9.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3jvhiyo9.cpp:2:\n/tmp/tmp3jvhiyo9.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3jvhiyo9.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3jvhiyo9.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3jvhiyo9.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3jvhiyo9.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3jvhiyo9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3erd77su.cpp: In function 'int main()':\n/tmp/tmp3erd77su.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/tmp/tmp3erd77su.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3erd77su.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3erd77su.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3erd77su.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3erd77su.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = 0;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2y2lgem3.cpp: In function 'int main()':\n/tmp/tmp2y2lgem3.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2y2lgem3.cpp:2:\n/tmp/tmp2y2lgem3.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp2y2lgem3.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp2y2lgem3.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2y2lgem3.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp2y2lgem3.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2y2lgem3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        bool flag = true;\n\
    \        while(temp > 0) {\n            if(temp % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpte1c_tnt.cpp: In function 'int main()':\n/tmp/tmpte1c_tnt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpte1c_tnt.cpp:2:\n/tmp/tmpte1c_tnt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpte1c_tnt.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpte1c_tnt.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpte1c_tnt.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpte1c_tnt.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpte1c_tnt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        int flag = 0;\n        while(i) {\n            int dig = i\
    \ % 10;\n            if(dig % 2 == 0) {\n                flag = 1;\n         \
    \       break;\n            }\n            i /= 10;\n        }\n        if(flag\
    \ == 0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0rpxxpbl.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp0rpxxpbl.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmp0rpxxpbl.cpp:26:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmp0rpxxpbl.cpp:26:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmp0rpxxpbl.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmp0rpxxpbl.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp0rpxxpbl.cpp: In function 'int\
    \ main()':\n/tmp/tmp0rpxxpbl.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0rpxxpbl.cpp:2:\n/tmp/tmp0rpxxpbl.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp0rpxxpbl.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp0rpxxpbl.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0rpxxpbl.cpp:31:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        int flag = 0;\n        while(i) {\n            if(i%2 == 0)\
    \ {\n                flag = 1;\n                break;\n            }\n      \
    \      i /= 10;\n        }\n        if(flag == 0)\n            res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprhia38cf.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmprhia38cf.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmprhia38cf.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmprhia38cf.cpp:25:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmprhia38cf.cpp:26:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmprhia38cf.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmprhia38cf.cpp: In function 'int\
    \ main()':\n/tmp/tmprhia38cf.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprhia38cf.cpp:2:\n/tmp/tmprhia38cf.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmprhia38cf.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmprhia38cf.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprhia38cf.cpp:30:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num>0){\n            int rem = num%10;\n            if(rem%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num = num/10;\n        }\n        if(flag){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeesey_r6.cpp: In function 'int main()':\n/tmp/tmpeesey_r6.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeesey_r6.cpp:2:\n/tmp/tmpeesey_r6.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpeesey_r6.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpeesey_r6.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpeesey_r6.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpeesey_r6.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpeesey_r6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 1;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = 0;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrpd7aey.cpp: In function 'int main()':\n/tmp/tmptrpd7aey.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptrpd7aey.cpp:2:\n/tmp/tmptrpd7aey.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmptrpd7aey.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmptrpd7aey.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptrpd7aey.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmptrpd7aey.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmptrpd7aey.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                int digit = i % 10;\n                if (digit % 2 == 0)\
    \ {\n                    is_unique = false;\n                    break;\n    \
    \            }\n                i /= 10;\n            }\n            if (is_unique)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5hcqjyr.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpm5hcqjyr.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpm5hcqjyr.cpp:31:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpm5hcqjyr.cpp:31:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpm5hcqjyr.cpp:32:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpm5hcqjyr.cpp:32:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpm5hcqjyr.cpp: In function 'int\
    \ main()':\n/tmp/tmpm5hcqjyr.cpp:35:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm5hcqjyr.cpp:2:\n/tmp/tmpm5hcqjyr.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpm5hcqjyr.cpp:36:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpm5hcqjyr.cpp:36:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm5h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwlhqng_2.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpwlhqng_2.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpwlhqng_2.cpp:30:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpwlhqng_2.cpp:30:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpwlhqng_2.cpp:31:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpwlhqng_2.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpwlhqng_2.cpp: In function 'int\
    \ main()':\n/tmp/tmpwlhqng_2.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwlhqng_2.cpp:2:\n/tmp/tmpwlhqng_2.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpwlhqng_2.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpwlhqng_2.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwlh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        bool flag\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgl6i083p.cpp: In function 'int main()':\n/tmp/tmpgl6i083p.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgl6i083p.cpp:2:\n/tmp/tmpgl6i083p.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpgl6i083p.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpgl6i083p.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgl6i083p.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgl6i083p.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgl6i083p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp668p2yb_.cpp: In function 'int main()':\n/tmp/tmp668p2yb_.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp668p2yb_.cpp:2:\n/tmp/tmp668p2yb_.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp668p2yb_.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp668p2yb_.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp668p2yb_.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp668p2yb_.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp668p2yb_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplihz153u.cpp: In function 'int main()':\n/tmp/tmplihz153u.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplihz153u.cpp:2:\n/tmp/tmplihz153u.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmplihz153u.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmplihz153u.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplihz153u.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplihz153u.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplihz153u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        while(x[i]>0){\n        \
    \    int temp=x[i]%10;\n            if(temp%2==0){\n                flag=1;\n\
    \                break;\n            }\n            x[i]/=10;\n        }\n   \
    \     if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp449jhul1.cpp: In function 'int main()':\n/tmp/tmp449jhul1.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp449jhul1.cpp:2:\n/tmp/tmp449jhul1.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp449jhul1.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp449jhul1.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp449jhul1.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp449jhul1.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp449jhul1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        bool flag = true;\n        while(i){\n            if(i%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      i/=10;\n        }\n        if(flag)\n            res.push_back(i);\n  \
    \  }\n    std::sort(res.begin(),res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m0drz_2.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp0m0drz_2.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp0m0drz_2.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp0m0drz_2.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp0m0drz_2.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp0m0drz_2.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp0m0drz_2.cpp: In function 'int main()':\n\
    /tmp/tmp0m0drz_2.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0m0drz_2.cpp:2:\n/tmp/tmp0m0drz_2.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp0m0drz_2.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp0m0drz_2.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0m0drz_2.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i > 0) {\n             \
    \   if(i % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujdg45bc.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpujdg45bc.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmpujdg45bc.cpp:30:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmpujdg45bc.cpp:30:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmpujdg45bc.cpp:31:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmpujdg45bc.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpujdg45bc.cpp: In function 'int\
    \ main()':\n/tmp/tmpujdg45bc.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujdg45bc.cpp:2:\n/tmp/tmpujdg45bc.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpujdg45bc.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpujdg45bc.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpujdg45bc.cpp:35:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(),\
    \ x.end());\n    for (auto i : x) {\n        bool flag = true;\n        while\
    \ (i > 0) {\n            if (i % 2 == 0) {\n                flag = false;\n  \
    \              break;\n            }\n            i /= 10;\n        }\n      \
    \  if (flag) {\n            res.push_back(i);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_nk2eha.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp2_nk2eha.cpp:14:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp2_nk2eha.cpp:27:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmp2_nk2eha.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp2_nk2eha.cpp:27:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp2_nk2eha.cpp:27:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp2_nk2eha.cpp:27:5: error: expected ')' before 'return'\n\
    /tmp/tmp2_nk2eha.cpp: In function 'int main()':\n/tmp/tmp2_nk2eha.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = unique_digits;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_nk2eha.cpp:2:\n/tmp/tmp2_nk2eha.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp2_nk2eha.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp2_nk2eha.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2_nk2eha.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp2_nk2eha.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /us"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num != 0) {\n            if (num % 2 == 0) {\n     \
    \           flag = false;\n                break;\n            }\n           \
    \ num /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpft108hqv.cpp: In function 'int main()':\n/tmp/tmpft108hqv.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpft108hqv.cpp:2:\n/tmp/tmpft108hqv.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpft108hqv.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpft108hqv.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpft108hqv.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpft108hqv.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpft108hqv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num = x[i];\n\
    \        while(num) {\n            if(num % 10 % 2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n            num /= 10;\n      \
    \  }\n        if(flag == 0) {\n            res.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jvhiyo9.cpp: In function 'int main()':\n/tmp/tmp3jvhiyo9.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3jvhiyo9.cpp:2:\n/tmp/tmp3jvhiyo9.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3jvhiyo9.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3jvhiyo9.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3jvhiyo9.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3jvhiyo9.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3jvhiyo9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp>0){\n            int rem=temp%10;\n            if(rem%2==0){\n  \
    \              flag=1;\n                break;\n            }\n            temp=temp/10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnfog4m3g.cpp: In function 'int main()':\n/tmp/tmpnfog4m3g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnfog4m3g.cpp:2:\n/tmp/tmpnfog4m3g.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpnfog4m3g.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpnfog4m3g.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnfog4m3g.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnfog4m3g.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnfog4m3g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i) {\n                if(i\
    \ % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprscitx3v.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmprscitx3v.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmprscitx3v.cpp:30:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmprscitx3v.cpp:30:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmprscitx3v.cpp:31:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmprscitx3v.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmprscitx3v.cpp: In function 'int\
    \ main()':\n/tmp/tmprscitx3v.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprscitx3v.cpp:2:\n/tmp/tmprscitx3v.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmprscitx3v.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmprscitx3v.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprscitx3v.cpp:35:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] % 2 != 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnp3bfuet.cpp: In function 'int main()':\n/tmp/tmpnp3bfuet.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnp3bfuet.cpp:2:\n/tmp/tmpnp3bfuet.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpnp3bfuet.cpp:22:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpnp3bfuet.cpp:22:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnp3bfuet.cpp:22:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnp3bfuet.cpp:22:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnp3bfuet.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long temp = x[i];\n        bool flag\
    \ = true;\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvvpabv3.cpp: In function 'int main()':\n/tmp/tmpjvvpabv3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjvvpabv3.cpp:2:\n/tmp/tmpjvvpabv3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjvvpabv3.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjvvpabv3.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjvvpabv3.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjvvpabv3.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjvvpabv3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp!=0){\n            if(temp%10%2==0){\n                flag=1;\n  \
    \              break;\n            }\n            temp/=10;\n        }\n     \
    \   if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo3n51ro9.cpp: In function 'int main()':\n/tmp/tmpo3n51ro9.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo3n51ro9.cpp:2:\n/tmp/tmpo3n51ro9.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpo3n51ro9.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpo3n51ro9.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpo3n51ro9.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpo3n51ro9.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpo3n51ro9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while(x[i] > 0) {\n\
    \                if(x[i] % 2 == 0) {\n                    flag = 1;\n        \
    \            break;\n                }\n                x[i] /= 10;\n        \
    \    }\n            if(flag == 0) {\n                res.push_back(x[i]);\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpochbttmo.cpp: In function 'int main()':\n/tmp/tmpochbttmo.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpochbttmo.cpp:2:\n/tmp/tmpochbttmo.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpochbttmo.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpochbttmo.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpochbttmo.cpp:35:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpochbttmo.cpp:35:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpochbttmo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        bool flag = true;\n        long temp\
    \ = x[i];\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  temp /= 10;\n        }\n        if (flag)\n            result.push_back(x[i]);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhl41cgc.cpp: In function 'int main()':\n/tmp/tmpfhl41cgc.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfhl41cgc.cpp:2:\n/tmp/tmpfhl41cgc.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpfhl41cgc.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpfhl41cgc.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfhl41cgc.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpfhl41cgc.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpfhl41cgc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        bool flag = true;\n\
    \        while(temp) {\n            if(temp % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdzsrbop.cpp: In function 'int main()':\n/tmp/tmphdzsrbop.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphdzsrbop.cpp:2:\n/tmp/tmphdzsrbop.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmphdzsrbop.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmphdzsrbop.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphdzsrbop.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmphdzsrbop.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphdzsrbop.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    // your code here\n    std::vector<long>\
    \ result;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        long\
    \ temp=x[i];\n        while(temp>0){\n            if(temp%10%2==0){\n        \
    \        flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            result.push_back(x[i]);\n      \
    \  }\n    }\n    std::sort(result.begin(),result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnedd7rq.cpp: In function 'int main()':\n/tmp/tmpmnedd7rq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmnedd7rq.cpp:2:\n/tmp/tmpmnedd7rq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpmnedd7rq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpmnedd7rq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmnedd7rq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpmnedd7rq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpmnedd7rq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 != 0) {\n           \
    \ result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1i7il2q_.cpp: In function 'int main()':\n/tmp/tmp1i7il2q_.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1i7il2q_.cpp:2:\n/tmp/tmp1i7il2q_.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp1i7il2q_.cpp:23:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp1i7il2q_.cpp:23:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1i7il2q_.cpp:23:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp1i7il2q_.cpp:23:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp1i7il2q_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbeucftq.cpp: In function 'int main()':\n/tmp/tmpbbeucftq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/tmp/tmpbbeucftq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbbeucftq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbbeucftq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbbeucftq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbbeucftq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        }\n        else {\n            int flag = 0;\n            while(x[i]\
    \ > 0) {\n                if(x[i] % 2 == 0) {\n                    flag = 1;\n\
    \                    break;\n                }\n                x[i] /= 10;\n\
    \            }\n            if(flag == 0) {\n                res.push_back(x[i]);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzzq0fhz.cpp: In function 'int main()':\n/tmp/tmpkzzq0fhz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkzzq0fhz.cpp:2:\n/tmp/tmpkzzq0fhz.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpkzzq0fhz.cpp:36:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpkzzq0fhz.cpp:36:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkzzq0fhz.cpp:36:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpkzzq0fhz.cpp:36:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpkzzq0fhz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            if (num % 2 == 0) {\n      \
    \          flag = false;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphkii90_u.cpp: In function 'int main()':\n/tmp/tmphkii90_u.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphkii90_u.cpp:2:\n/tmp/tmphkii90_u.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmphkii90_u.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmphkii90_u.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphkii90_u.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmphkii90_u.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphkii90_u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] > 0)\
    \ {\n            if((x[i] % 10) % 2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x[i] /= 10;\n        }\n      \
    \  if(flag == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdfhfklfz.cpp: In function 'int main()':\n/tmp/tmpdfhfklfz.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdfhfklfz.cpp:2:\n/tmp/tmpdfhfklfz.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpdfhfklfz.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpdfhfklfz.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpdfhfklfz.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpdfhfklfz.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpdfhfklfz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long n=x[i];\n        while(n>0){\n\
    \            int r=n%10;\n            if(r%2==0){\n                flag=1;\n \
    \               break;\n            }\n            n=n/10;\n        }\n      \
    \  if(flag==0){\n            v.push_back(x[i]);\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2z85tce.cpp: In function 'int main()':\n/tmp/tmpz2z85tce.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz2z85tce.cpp:2:\n/tmp/tmpz2z85tce.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpz2z85tce.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpz2z85tce.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz2z85tce.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpz2z85tce.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz2z85tce.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp>0){\n            if(temp%10%2==0){\n                flag=1;\n   \
    \             break;\n            }\n            temp/=10;\n        }\n      \
    \  if(flag==0){\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdm00uqou.cpp: In function 'int main()':\n/tmp/tmpdm00uqou.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdm00uqou.cpp:2:\n/tmp/tmpdm00uqou.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpdm00uqou.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpdm00uqou.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpdm00uqou.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpdm00uqou.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpdm00uqou.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        int flag = 0;\n        while(i) {\n            if(i%2 == 0)\
    \ {\n                flag = 1;\n                break;\n            }\n      \
    \      i /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vxta1z3.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp4vxta1z3.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmp4vxta1z3.cpp:26:5: error: expected ';' before\
    \ 'sort'\n     sort(res.begin(), res.end());\n     ^\n/tmp/tmp4vxta1z3.cpp:26:32:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     sort(res.begin(), res.end());\n          \
    \                      ^\n/tmp/tmp4vxta1z3.cpp:27:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp4vxta1z3.cpp:27:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp4vxta1z3.cpp: In function 'int main()':\n\
    /tmp/tmp4vxta1z3.cpp:30:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4vxta1z3.cpp:2:\n/tmp/tmp4vxta1z3.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp4vxta1z3.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp4vxta1z3.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4vxta1z3.cpp:31:82:\
    \ error: no matching functio"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long temp = x[i];\n\
    \        while(temp) {\n            if(temp % 2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n            temp /= 10;\n     \
    \   }\n        if(flag == 0)\n            res.push_back(x[i]);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8eg_rnlb.cpp: In function 'int main()':\n/tmp/tmp8eg_rnlb.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8eg_rnlb.cpp:2:\n/tmp/tmp8eg_rnlb.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp8eg_rnlb.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp8eg_rnlb.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8eg_rnlb.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8eg_rnlb.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8eg_rnlb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(auto\
    \ i : x) {\n        int flag = 0;\n        while(i) {\n            if(i % 2 ==\
    \ 0) {\n                flag = 1;\n                break;\n            }\n   \
    \         i /= 10;\n        }\n        if(flag == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsu5cuj9r.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpsu5cuj9r.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmpsu5cuj9r.cpp:26:5: error: expected ';' before\
    \ 'std'\n     std::sort(ans.begin(), ans.end());\n     ^\n/tmp/tmpsu5cuj9r.cpp:26:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(ans.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), ans.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(ans.begin(), ans.end());\n     \
    \                                ^\n/tmp/tmpsu5cuj9r.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n     return ans;\n     ^\n/tmp/tmpsu5cuj9r.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpsu5cuj9r.cpp: In function 'int\
    \ main()':\n/tmp/tmpsu5cuj9r.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsu5cuj9r.cpp:2:\n/tmp/tmpsu5cuj9r.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpsu5cuj9r.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpsu5cuj9r.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsu5cuj9r.cpp:31:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        if(i < 10) {\n            res.push_back(i);\n        } else\
    \ {\n            bool flag = true;\n            while(i) {\n                if(i\
    \ % 2 == 0) {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprscitx3v.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmprscitx3v.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmprscitx3v.cpp:30:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmprscitx3v.cpp:30:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmprscitx3v.cpp:31:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmprscitx3v.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmprscitx3v.cpp: In function 'int\
    \ main()':\n/tmp/tmprscitx3v.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprscitx3v.cpp:2:\n/tmp/tmprscitx3v.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmprscitx3v.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmprscitx3v.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprscitx3v.cpp:35:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1t2a7h1.cpp: In function 'int main()':\n/tmp/tmpv1t2a7h1.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1t2a7h1.cpp:2:\n/tmp/tmpv1t2a7h1.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpv1t2a7h1.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpv1t2a7h1.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv1t2a7h1.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv1t2a7h1.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv1t2a7h1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbeucftq.cpp: In function 'int main()':\n/tmp/tmpbbeucftq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/tmp/tmpbbeucftq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbbeucftq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbbeucftq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbbeucftq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbbeucftq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < x.size(); i++) {\n        if (x[i] < 10) {\n            result.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while (x[i] > 0) {\n\
    \                if (x[i] % 2 == 0) {\n                    flag = 1;\n       \
    \             break;\n                }\n                x[i] /= 10;\n       \
    \     }\n            if (flag == 0) {\n                result.push_back(x[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2wzmkh57.cpp: In function 'int main()':\n/tmp/tmp2wzmkh57.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2wzmkh57.cpp:2:\n/tmp/tmp2wzmkh57.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp2wzmkh57.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp2wzmkh57.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2wzmkh57.cpp:35:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp2wzmkh57.cpp:35:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2wzmkh57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        } else {\n            int flag = 0;\n            while(x[i] > 0) {\n\
    \                if(x[i] % 2 == 0) {\n                    flag = 1;\n        \
    \            break;\n                }\n                x[i] /= 10;\n        \
    \    }\n            if(flag == 0) {\n                res.push_back(x[i]);\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpochbttmo.cpp: In function 'int main()':\n/tmp/tmpochbttmo.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpochbttmo.cpp:2:\n/tmp/tmpochbttmo.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpochbttmo.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpochbttmo.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpochbttmo.cpp:35:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpochbttmo.cpp:35:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpochbttmo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi53uf13d.cpp: In function 'int main()':\n/tmp/tmpi53uf13d.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi53uf13d.cpp:2:\n/tmp/tmpi53uf13d.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi53uf13d.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi53uf13d.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi53uf13d.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi53uf13d.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi53uf13d.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        std::string s = std::to_string(i);\n        bool flag = true;\n\
    \        for(auto j : s) {\n            if((j - '0') % 2 == 0) {\n           \
    \     flag = false;\n                break;\n            }\n        }\n      \
    \  if(flag) res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnomcnvct.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpnomcnvct.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmpnomcnvct.cpp:24:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmpnomcnvct.cpp:24:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmpnomcnvct.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmpnomcnvct.cpp:25:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpnomcnvct.cpp: In function 'int\
    \ main()':\n/tmp/tmpnomcnvct.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnomcnvct.cpp:2:\n/tmp/tmpnomcnvct.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpnomcnvct.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpnomcnvct.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnomcnvct.cpp:29:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkvcw3jz6.cpp: In function 'int main()':\n/tmp/tmpkvcw3jz6.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkvcw3jz6.cpp:2:\n/tmp/tmpkvcw3jz6.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpkvcw3jz6.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpkvcw3jz6.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkvcw3jz6.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpkvcw3jz6.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpkvcw3jz6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        int flag = 1;\n    \
    \    while(num>0){\n            int digit = num%10;\n            if(digit%2==0){\n\
    \                flag = 0;\n                break;\n            }\n          \
    \  num = num/10;\n        }\n        if(flag==1){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k1ssflf.cpp: In function 'int main()':\n/tmp/tmp5k1ssflf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k1ssflf.cpp:2:\n/tmp/tmp5k1ssflf.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp5k1ssflf.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp5k1ssflf.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5k1ssflf.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp5k1ssflf.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5k1ssflf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (auto\
    \ i : x) {\n\t\tbool flag = true;\n\t\twhile (i) {\n\t\t\tif (i % 2 == 0) {\n\t\
    \t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti /= 10;\n\t\t}\n\t\tif (flag)\n\
    \t\t\tres.push_back(i);\n\t}\n\tstd::sort(res.begin(), res.end());\n\treturn res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdq42k3_v.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpdq42k3_v.cpp:13:12: error: 'i' does not name a type\n  for\
    \ (auto i : x) {\n            ^\n/tmp/tmpdq42k3_v.cpp:25:2: error: expected ';'\
    \ before 'std'\n  std::sort(res.begin(), res.end());\n  ^\n/tmp/tmpdq42k3_v.cpp:25:34:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n  std::sort(res.begin(), res.end());\n        \
    \                          ^\n/tmp/tmpdq42k3_v.cpp:26:2: error: expected primary-expression\
    \ before 'return'\n  return res;\n  ^\n/tmp/tmpdq42k3_v.cpp:26:2: error: expected\
    \ ')' before 'return'\n/tmp/tmpdq42k3_v.cpp: In function 'int main()':\n/tmp/tmpdq42k3_v.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdq42k3_v.cpp:2:\n/tmp/tmpdq42k3_v.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpdq42k3_v.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpdq42k3_v.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpdq42k3_v.cpp:30:82:\
    \ error: no matching function for ca"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5d_iqi8a.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp5d_iqi8a.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp5d_iqi8a.cpp:30:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmp5d_iqi8a.cpp:30:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmp5d_iqi8a.cpp:31:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp5d_iqi8a.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp5d_iqi8a.cpp: In function 'int\
    \ main()':\n/tmp/tmp5d_iqi8a.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5d_iqi8a.cpp:2:\n/tmp/tmp5d_iqi8a.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp5d_iqi8a.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp5d_iqi8a.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5d_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        if(i<10){\n            res.push_back(i);\n        }\n       \
    \ else{\n            int flag=0;\n            while(i){\n                if(i%10%2==0){\n\
    \                    flag=1;\n                    break;\n                }\n\
    \                i/=10;\n            }\n            if(flag==0){\n           \
    \     res.push_back(i);\n            }\n        }\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0kilsx3r.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp0kilsx3r.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp0kilsx3r.cpp:31:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp0kilsx3r.cpp:31:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp0kilsx3r.cpp:32:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp0kilsx3r.cpp:32:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp0kilsx3r.cpp: In function 'int main()':\n\
    /tmp/tmp0kilsx3r.cpp:35:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0kilsx3r.cpp:2:\n/tmp/tmp0kilsx3r.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp0kilsx3r.cpp:36:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp0kilsx3r.cpp:36:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0kilsx3r.cpp:36:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        int temp=x[i];\n        while(temp!=0){\n\
    \            int rem=temp%10;\n            if(rem%2==0){\n                flag=1;\n\
    \                break;\n            }\n            temp=temp/10;\n        }\n\
    \        if(flag==0){\n            v.push_back(x[i]);\n        }\n    }\n    std::sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi29kal1f.cpp: In function 'int main()':\n/tmp/tmpi29kal1f.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi29kal1f.cpp:2:\n/tmp/tmpi29kal1f.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi29kal1f.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi29kal1f.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi29kal1f.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi29kal1f.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi29kal1f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        if(x[i] < 10) {\n            res.push_back(x[i]);\n\
    \        }\n        else {\n            int flag = 0;\n            while(x[i]\
    \ > 0) {\n                int rem = x[i] % 10;\n                if(rem % 2 ==\
    \ 0) {\n                    flag = 1;\n                    break;\n          \
    \      }\n                x[i] /= 10;\n            }\n            if(flag == 0)\
    \ {\n                res.push_back(x[i]);\n            }\n        }\n    }\n \
    \   std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36g4aps4.cpp: In function 'int main()':\n/tmp/tmp36g4aps4.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp36g4aps4.cpp:2:\n/tmp/tmp36g4aps4.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp36g4aps4.cpp:37:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp36g4aps4.cpp:37:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp36g4aps4.cpp:37:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp36g4aps4.cpp:37:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp36g4aps4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbeucftq.cpp: In function 'int main()':\n/tmp/tmpbbeucftq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/tmp/tmpbbeucftq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbbeucftq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbbeucftq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbbeucftq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbbeucftq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool is_unique = true;\n            while (i > 0)\
    \ {\n                if (i % 2 == 0) {\n                    is_unique = false;\n\
    \                    break;\n                }\n                i /= 10;\n   \
    \         }\n            if (is_unique) {\n                result.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5d_iqi8a.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp5d_iqi8a.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp5d_iqi8a.cpp:30:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmp5d_iqi8a.cpp:30:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmp5d_iqi8a.cpp:31:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp5d_iqi8a.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp5d_iqi8a.cpp: In function 'int\
    \ main()':\n/tmp/tmp5d_iqi8a.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5d_iqi8a.cpp:2:\n/tmp/tmp5d_iqi8a.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp5d_iqi8a.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp5d_iqi8a.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5d_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i) {\n           \
    \ if (i % 2 == 0) {\n                flag = false;\n                break;\n \
    \           }\n            i /= 10;\n        }\n        if (flag) {\n        \
    \    result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkymqxvi.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpvkymqxvi.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpvkymqxvi.cpp:26:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpvkymqxvi.cpp:26:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpvkymqxvi.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpvkymqxvi.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpvkymqxvi.cpp: In function 'int\
    \ main()':\n/tmp/tmpvkymqxvi.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvkymqxvi.cpp:2:\n/tmp/tmpvkymqxvi.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpvkymqxvi.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpvkymqxvi.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvky"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi53uf13d.cpp: In function 'int main()':\n/tmp/tmpi53uf13d.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi53uf13d.cpp:2:\n/tmp/tmpi53uf13d.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpi53uf13d.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpi53uf13d.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpi53uf13d.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpi53uf13d.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi53uf13d.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj7mvwkq.cpp: In function 'int main()':\n/tmp/tmpjj7mvwkq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj7mvwkq.cpp:2:\n/tmp/tmpjj7mvwkq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpjj7mvwkq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpjj7mvwkq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjj7mvwkq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjj7mvwkq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjj7mvwkq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbeucftq.cpp: In function 'int main()':\n/tmp/tmpbbeucftq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/tmp/tmpbbeucftq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbbeucftq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbbeucftq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbbeucftq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbbeucftq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3erd77su.cpp: In function 'int main()':\n/tmp/tmp3erd77su.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/tmp/tmp3erd77su.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3erd77su.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3erd77su.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3erd77su.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3erd77su.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        int flag = 0;\n\
    \        while(temp) {\n            if(temp % 2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n            temp /= 10;\n     \
    \   }\n        if(flag == 0) {\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1s3atv6.cpp: In function 'int main()':\n/tmp/tmpt1s3atv6.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1s3atv6.cpp:2:\n/tmp/tmpt1s3atv6.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpt1s3atv6.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpt1s3atv6.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt1s3atv6.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt1s3atv6.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt1s3atv6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        std::string s = std::to_string(x[i]);\n\
    \        bool flag = true;\n        for (int j = 0; j < s.length(); j++) {\n \
    \           if (s[j] % 2 == 0) {\n                flag = false;\n            \
    \    break;\n            }\n        }\n        if (flag) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_p046iqp.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp_p046iqp.cpp:14:25: error: 'to_string' is not a member of 'std'\n\
    \         std::string s = std::to_string(x[i]);\n                         ^\n\
    /tmp/tmp_p046iqp.cpp: In function 'int main()':\n/tmp/tmp_p046iqp.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = unique_digits;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_p046iqp.cpp:2:\n/tmp/tmp_p046iqp.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp_p046iqp.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp_p046iqp.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_p046iqp.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp_p046iqp.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_p046iqp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            num /= 10;\n        }\n        if (flag)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8le79p0.cpp: In function 'int main()':\n/tmp/tmpj8le79p0.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj8le79p0.cpp:2:\n/tmp/tmpj8le79p0.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpj8le79p0.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpj8le79p0.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj8le79p0.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj8le79p0.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj8le79p0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                flag = false;\n              \
    \  break;\n            }\n            num /= 10;\n        }\n        if (flag)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8le79p0.cpp: In function 'int main()':\n/tmp/tmpj8le79p0.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj8le79p0.cpp:2:\n/tmp/tmpj8le79p0.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpj8le79p0.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpj8le79p0.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj8le79p0.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj8le79p0.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj8le79p0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (int i\
    \ = 0; i < x.size(); i++) {\n\t\tlong num = x[i];\n\t\tbool flag = true;\n\t\t\
    while (num) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (flag) res.push_back(x[i]);\n\t}\n\t\
    sort(res.begin(), res.end());\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp947byaou.cpp: In function 'int main()':\n/tmp/tmp947byaou.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp947byaou.cpp:2:\n/tmp/tmp947byaou.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp947byaou.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp947byaou.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp947byaou.cpp:30:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp947byaou.cpp:30:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp947byaou.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6by1kjq7.cpp: In function 'int main()':\n/tmp/tmp6by1kjq7.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6by1kjq7.cpp:2:\n/tmp/tmp6by1kjq7.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp6by1kjq7.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp6by1kjq7.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6by1kjq7.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6by1kjq7.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6by1kjq7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i){\n            if(i%2==0){\n   \
    \             flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0)\n            res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3no1xcah.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp3no1xcah.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmp3no1xcah.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmp3no1xcah.cpp:25:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmp3no1xcah.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmp3no1xcah.cpp:26:5: error:\
    \ expected ')' before 'return'\n/tmp/tmp3no1xcah.cpp: In function 'int main()':\n\
    /tmp/tmp3no1xcah.cpp:29:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3no1xcah.cpp:2:\n/tmp/tmp3no1xcah.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3no1xcah.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3no1xcah.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3no1xcah.cpp:30:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3erd77su.cpp: In function 'int main()':\n/tmp/tmp3erd77su.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/tmp/tmp3erd77su.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3erd77su.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3erd77su.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3erd77su.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3erd77su.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        bool flag = true;\n        int temp = x[i];\n\
    \        while(temp) {\n            if(temp % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt4rj2ify.cpp: In function 'int main()':\n/tmp/tmpt4rj2ify.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt4rj2ify.cpp:2:\n/tmp/tmpt4rj2ify.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpt4rj2ify.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpt4rj2ify.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt4rj2ify.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt4rj2ify.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt4rj2ify.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool is_unique = true;\n        while (i > 0) {\n  \
    \          if (i % 2 == 0) {\n                is_unique = false;\n           \
    \     break;\n            }\n            i /= 10;\n        }\n        if (is_unique)\
    \ {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuo0c2mrb.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpuo0c2mrb.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpuo0c2mrb.cpp:26:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpuo0c2mrb.cpp:26:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpuo0c2mrb.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpuo0c2mrb.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpuo0c2mrb.cpp: In function 'int\
    \ main()':\n/tmp/tmpuo0c2mrb.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuo0c2mrb.cpp:2:\n/tmp/tmpuo0c2mrb.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpuo0c2mrb.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpuo0c2mrb.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuo0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i : x) {\n        int flag = 1;\n        while(i) {\n            if(i%2 == 0)\
    \ {\n                flag = 0;\n                break;\n            }\n      \
    \      i /= 10;\n        }\n        if(flag)\n            res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_2ic8h8.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp7_2ic8h8.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i : x) {\n              ^\n/tmp/tmp7_2ic8h8.cpp:25:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(), res.end());\n     ^\n/tmp/tmp7_2ic8h8.cpp:25:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(), res.end());\n     \
    \                                ^\n/tmp/tmp7_2ic8h8.cpp:26:5: error: expected\
    \ primary-expression before 'return'\n     return res;\n     ^\n/tmp/tmp7_2ic8h8.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp7_2ic8h8.cpp: In function 'int\
    \ main()':\n/tmp/tmp7_2ic8h8.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7_2ic8h8.cpp:2:\n/tmp/tmp7_2ic8h8.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp7_2ic8h8.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp7_2ic8h8.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7_2ic8h8.cpp:30:82:\
    \ error: no ma"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        bool flag = true;\n        while (i > 0) {\n       \
    \     if (i % 2 == 0) {\n                flag = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if (flag) {\n       \
    \     result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7d55pr_q.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmp7d55pr_q.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmp7d55pr_q.cpp:26:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmp7d55pr_q.cpp:26:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmp7d55pr_q.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp7d55pr_q.cpp:27:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp7d55pr_q.cpp: In function 'int\
    \ main()':\n/tmp/tmp7d55pr_q.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7d55pr_q.cpp:2:\n/tmp/tmp7d55pr_q.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp7d55pr_q.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp7d55pr_q.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7d5"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num){\n            int digit = num%10;\n            if(digit%2==0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      num/=10;\n        }\n        if(flag)\n            ans.push_back(x[i]);\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy12r1o8t.cpp: In function 'int main()':\n/tmp/tmpy12r1o8t.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy12r1o8t.cpp:2:\n/tmp/tmpy12r1o8t.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpy12r1o8t.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpy12r1o8t.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy12r1o8t.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpy12r1o8t.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpy12r1o8t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        bool flag = true;\n        long num = x[i];\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgp23vyzt.cpp: In function 'int main()':\n/tmp/tmpgp23vyzt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgp23vyzt.cpp:2:\n/tmp/tmpgp23vyzt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpgp23vyzt.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpgp23vyzt.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgp23vyzt.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpgp23vyzt.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpgp23vyzt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplihz153u.cpp: In function 'int main()':\n/tmp/tmplihz153u.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplihz153u.cpp:2:\n/tmp/tmplihz153u.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmplihz153u.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmplihz153u.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplihz153u.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplihz153u.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplihz153u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        int flag = 0;\n        while (i) {\n            if (i\
    \ % 2 == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n            i /= 10;\n        }\n        if (flag == 0)\n            result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9_al_15.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpt9_al_15.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpt9_al_15.cpp:25:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpt9_al_15.cpp:25:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpt9_al_15.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpt9_al_15.cpp:26:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpt9_al_15.cpp: In function 'int\
    \ main()':\n/tmp/tmpt9_al_15.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt9_al_15.cpp:2:\n/tmp/tmpt9_al_15.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpt9_al_15.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpt9_al_15.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt9_"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3erd77su.cpp: In function 'int main()':\n/tmp/tmp3erd77su.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/tmp/tmp3erd77su.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp3erd77su.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp3erd77su.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3erd77su.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp3erd77su.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp3erd77su.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        long temp=x[i];\n       \
    \ while(temp>0){\n            int digit=temp%10;\n            if(digit%2==0){\n\
    \                flag=1;\n                break;\n            }\n            temp/=10;\n\
    \        }\n        if(flag==0){\n            ans.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ed0qd6l.cpp: In function 'int main()':\n/tmp/tmp6ed0qd6l.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ed0qd6l.cpp:2:\n/tmp/tmp6ed0qd6l.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp6ed0qd6l.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp6ed0qd6l.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6ed0qd6l.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6ed0qd6l.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6ed0qd6l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while (x[i]\
    \ > 0) {\n            if (x[i] % 2 == 0) {\n                flag = 1;\n      \
    \          break;\n            }\n            x[i] /= 10;\n        }\n       \
    \ if (flag == 0) {\n            result.push_back(x[i]);\n        }\n    }\n  \
    \  std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1s71rn4p.cpp: In function 'int main()':\n/tmp/tmp1s71rn4p.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1s71rn4p.cpp:2:\n/tmp/tmp1s71rn4p.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp1s71rn4p.cpp:31:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp1s71rn4p.cpp:31:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp1s71rn4p.cpp:31:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp1s71rn4p.cpp:31:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp1s71rn4p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(auto\
    \ i:x){\n        int flag=0;\n        while(i>0){\n            if(i%2==0){\n \
    \               flag=1;\n                break;\n            }\n            i/=10;\n\
    \        }\n        if(flag==0) res.push_back(i);\n    }\n    std::sort(res.begin(),res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3t5uq1p.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpd3t5uq1p.cpp:13:14: error: 'i' does not name a type\n     for(auto\
    \ i:x){\n              ^\n/tmp/tmpd3t5uq1p.cpp:24:5: error: expected ';' before\
    \ 'std'\n     std::sort(res.begin(),res.end());\n     ^\n/tmp/tmpd3t5uq1p.cpp:24:36:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n     std::sort(res.begin(),res.end());\n      \
    \                              ^\n/tmp/tmpd3t5uq1p.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n     return res;\n     ^\n/tmp/tmpd3t5uq1p.cpp:25:5: error:\
    \ expected ')' before 'return'\n/tmp/tmpd3t5uq1p.cpp: In function 'int main()':\n\
    /tmp/tmpd3t5uq1p.cpp:28:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd3t5uq1p.cpp:2:\n/tmp/tmpd3t5uq1p.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpd3t5uq1p.cpp:29:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpd3t5uq1p.cpp:29:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpd3t5uq1p.cpp:29:82:\
    \ error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool is_unique\
    \ = true;\n        while (num > 0) {\n            int digit = num % 10;\n    \
    \        if (digit % 2 == 0) {\n                is_unique = false;\n         \
    \       break;\n            }\n            num /= 10;\n        }\n        if (is_unique)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurlqcxen.cpp: In function 'int main()':\n/tmp/tmpurlqcxen.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpurlqcxen.cpp:2:\n/tmp/tmpurlqcxen.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpurlqcxen.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpurlqcxen.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpurlqcxen.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpurlqcxen.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpurlqcxen.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> v;\n    for(int\
    \ i=0;i<x.size();i++){\n        int flag=0;\n        while(x[i]>0){\n        \
    \    int temp=x[i]%10;\n            if(temp%2==0){\n                flag=1;\n\
    \                break;\n            }\n            x[i]=x[i]/10;\n        }\n\
    \        if(flag==0){\n            v.push_back(x[i]);\n        }\n    }\n    sort(v.begin(),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyoa9p0i.cpp: In function 'int main()':\n/tmp/tmpnyoa9p0i.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnyoa9p0i.cpp:2:\n/tmp/tmpnyoa9p0i.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpnyoa9p0i.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpnyoa9p0i.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnyoa9p0i.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpnyoa9p0i.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpnyoa9p0i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int temp = x[i];\n        int flag = 0;\n\
    \        while(temp) {\n            if(temp % 2 == 0) {\n                flag\
    \ = 1;\n                break;\n            }\n            temp /= 10;\n     \
    \   }\n        if(flag == 0) {\n            res.push_back(x[i]);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1s3atv6.cpp: In function 'int main()':\n/tmp/tmpt1s3atv6.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1s3atv6.cpp:2:\n/tmp/tmpt1s3atv6.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpt1s3atv6.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpt1s3atv6.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt1s3atv6.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpt1s3atv6.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpt1s3atv6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) res.push_back(x[i]);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpplj8qv2f.cpp: In function 'int main()':\n/tmp/tmpplj8qv2f.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpplj8qv2f.cpp:2:\n/tmp/tmpplj8qv2f.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpplj8qv2f.cpp:30:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpplj8qv2f.cpp:30:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpplj8qv2f.cpp:30:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpplj8qv2f.cpp:30:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpplj8qv2f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        int flag\
    \ = 0;\n        while (num > 0) {\n            int digit = num % 10;\n       \
    \     if (digit % 2 == 0) {\n                flag = 1;\n                break;\n\
    \            }\n            num = num / 10;\n        }\n        if (flag == 0)\
    \ {\n            result.push_back(x[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1dpygiu.cpp: In function 'int main()':\n/tmp/tmpx1dpygiu.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx1dpygiu.cpp:2:\n/tmp/tmpx1dpygiu.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpx1dpygiu.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpx1dpygiu.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpx1dpygiu.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpx1dpygiu.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpx1dpygiu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int rem = num % 10;\n            if(rem % 2\
    \ == 0) {\n                flag = false;\n                break;\n           \
    \ }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbeucftq.cpp: In function 'int main()':\n/tmp/tmpbbeucftq.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/tmp/tmpbbeucftq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpbbeucftq.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpbbeucftq.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbbeucftq.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpbbeucftq.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpbbeucftq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            if(num % 2 == 0) {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplihz153u.cpp: In function 'int main()':\n/tmp/tmplihz153u.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplihz153u.cpp:2:\n/tmp/tmplihz153u.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmplihz153u.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmplihz153u.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplihz153u.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmplihz153u.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmplihz153u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n\tstd::vector<long> res;\n\tfor (auto\
    \ i : x) {\n\t\tif (i < 10) {\n\t\t\tres.push_back(i);\n\t\t\tcontinue;\n\t\t\
    }\n\t\tbool flag = true;\n\t\twhile (i) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tflag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti /= 10;\n\t\t}\n\t\tif (flag)\n\t\t\
    \tres.push_back(i);\n\t}\n\tstd::sort(res.begin(), res.end());\n\treturn res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyt19nszj.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpyt19nszj.cpp:13:12: error: 'i' does not name a type\n  for\
    \ (auto i : x) {\n            ^\n/tmp/tmpyt19nszj.cpp:29:2: error: expected ';'\
    \ before 'std'\n  std::sort(res.begin(), res.end());\n  ^\n/tmp/tmpyt19nszj.cpp:29:34:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(res.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), res.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n  std::sort(res.begin(), res.end());\n        \
    \                          ^\n/tmp/tmpyt19nszj.cpp:30:2: error: expected primary-expression\
    \ before 'return'\n  return res;\n  ^\n/tmp/tmpyt19nszj.cpp:30:2: error: expected\
    \ ')' before 'return'\n/tmp/tmpyt19nszj.cpp: In function 'int main()':\n/tmp/tmpyt19nszj.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyt19nszj.cpp:2:\n/tmp/tmpyt19nszj.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpyt19nszj.cpp:34:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpyt19nszj.cpp:34:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyt19nszj.cpp:34:82:\
    \ error: no matching function for ca"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool flag = true;\n\
    \        while(num) {\n            int digit = num % 10;\n            if(digit\
    \ % 2 == 0) {\n                flag = false;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n        if(flag) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkvcw3jz6.cpp: In function 'int main()':\n/tmp/tmpkvcw3jz6.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkvcw3jz6.cpp:2:\n/tmp/tmpkvcw3jz6.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpkvcw3jz6.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpkvcw3jz6.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkvcw3jz6.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpkvcw3jz6.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpkvcw3jz6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool flag = true;\n\
    \        while(num > 0) {\n            if(num % 2 == 0) {\n                flag\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if(flag) {\n            res.push_back(x[i]);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_3hb4tl.cpp: In function 'int main()':\n/tmp/tmpb_3hb4tl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/tmp/tmpb_3hb4tl.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpb_3hb4tl.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpb_3hb4tl.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb_3hb4tl.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpb_3hb4tl.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpb_3hb4tl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < x.size(); i++) {\n        int flag = 0;\n        while(x[i] != 0)\
    \ {\n            int rem = x[i] % 10;\n            if(rem % 2 == 0) {\n      \
    \          flag = 1;\n                break;\n            }\n            x[i]\
    \ /= 10;\n        }\n        if(flag == 0) {\n            res.push_back(x[i]);\n\
    \        }\n    }\n    sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppkcgrd49.cpp: In function 'int main()':\n/tmp/tmppkcgrd49.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppkcgrd49.cpp:2:\n/tmp/tmppkcgrd49.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmppkcgrd49.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmppkcgrd49.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppkcgrd49.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmppkcgrd49.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppkcgrd49.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < x.size(); i++) {\n        int flag = 0;\n        long num =\
    \ x[i];\n        while (num != 0) {\n            if ((num % 10) % 2 == 0) {\n\
    \                flag = 1;\n                break;\n            }\n          \
    \  num /= 10;\n        }\n        if (flag == 0) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2l392xyt.cpp: In function 'int main()':\n/tmp/tmp2l392xyt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2l392xyt.cpp:2:\n/tmp/tmp2l392xyt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmp2l392xyt.cpp:32:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmp2l392xyt.cpp:32:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2l392xyt.cpp:32:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp2l392xyt.cpp:32:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp2l392xyt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for\
    \ (auto i : x) {\n        if (i < 10) {\n            result.push_back(i);\n  \
    \      } else {\n            bool flag = true;\n            while (i > 0) {\n\
    \                if (i % 2 == 0) {\n                    flag = false;\n      \
    \              break;\n                }\n                i /= 10;\n         \
    \   }\n            if (flag) {\n                result.push_back(i);\n       \
    \     }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwlhqng_2.cpp: In function 'std::vector<long int> unique_digits(std::vector<long\
    \ int>)':\n/tmp/tmpwlhqng_2.cpp:13:15: error: 'i' does not name a type\n     for\
    \ (auto i : x) {\n               ^\n/tmp/tmpwlhqng_2.cpp:30:5: error: expected\
    \ ';' before 'std'\n     std::sort(result.begin(), result.end());\n     ^\n/tmp/tmpwlhqng_2.cpp:30:43:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), result.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(result.begin(), result.end());\n\
    \                                           ^\n/tmp/tmpwlhqng_2.cpp:31:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpwlhqng_2.cpp:31:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpwlhqng_2.cpp: In function 'int\
    \ main()':\n/tmp/tmpwlhqng_2.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = unique_digits;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwlhqng_2.cpp:2:\n/tmp/tmpwlhqng_2.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpwlhqng_2.cpp:35:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpwlhqng_2.cpp:35:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwlh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive\
    \ integers x. return a sorted vector of all \n// elements that hasn't any even\
    \ digit.\n// Note: Returned vector should be sorted in increasing order.\n// For\
    \ example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long>\
    \ unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<x.size();i++){\n        long n = x[i];\n        bool flag = true;\n  \
    \      while(n){\n            int d = n%10;\n            if(d%2==0){\n       \
    \         flag = false;\n                break;\n            }\n            n/=10;\n\
    \        }\n        if(flag){\n            ans.push_back(x[i]);\n        }\n \
    \   }\n    sort(ans.begin(),ans.end());\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpey_h6u23.cpp: In function 'int main()':\n/tmp/tmpey_h6u23.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = unique_digits;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpey_h6u23.cpp:2:\n/tmp/tmpey_h6u23.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                  ^\n/tmp/tmpey_h6u23.cpp:33:82: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n      \
    \                                                                            ^\n\
    /tmp/tmpey_h6u23.cpp:33:82: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpey_h6u23.cpp:33:82:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpey_h6u23.cpp:33:82: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpey_h6u23.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64"
  stdout: ''
