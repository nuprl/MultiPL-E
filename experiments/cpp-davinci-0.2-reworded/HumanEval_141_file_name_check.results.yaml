language: cpp
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    std::string ext[] = {\"txt\",\
    \ \"exe\", \"dll\"};\n    int count = 0;\n    int dot_count = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string file_name_ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(file_name_ext == ext[0] || file_name_ext == ext[1] || file_name_ext\
    \ == ext[2]) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5x9bio3q.cpp: In function 'int main()':\n/tmp/tmp5x9bio3q.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5x9bio3q.cpp:2:\n/tmp/tmp5x9bio3q.cpp:41:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int count1\
    \ = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int\
    \ count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n\
    \    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12\
    \ = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n   \
    \ int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19\
    \ = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n   \
    \ int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26\
    \ = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n   \
    \ int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33\
    \ = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n   \
    \ int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40\
    \ = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n   \
    \ int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47\
    \ = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n   \
    \ int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54\
    \ = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n   \
    \ int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    int count61\
    \ = 0;\n    int count62 = 0;\n    int count63 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0ht37ih.cpp: In function 'int main()':\n/tmp/tmpg0ht37ih.cpp:85:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg0ht37ih.cpp:2:\n/tmp/tmpg0ht37ih.cpp:86:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n  int count=0;\n  int dot_count=0;\n\
    \  int flag=0;\n  int flag1=0;\n  int flag2=0;\n  int flag3=0;\n  int flag4=0;\n\
    \  int flag5=0;\n  int flag6=0;\n  int flag7=0;\n  int flag8=0;\n  int flag9=0;\n\
    \  int flag10=0;\n  int flag11=0;\n  int flag12=0;\n  int flag13=0;\n  int flag14=0;\n\
    \  int flag15=0;\n  int flag16=0;\n  int flag17=0;\n  int flag18=0;\n  int flag19=0;\n\
    \  int flag20=0;\n  int flag21=0;\n  int flag22=0;\n  int flag23=0;\n  int flag24=0;\n\
    \  int flag25=0;\n  int flag26=0;\n  int flag27=0;\n  int flag28=0;\n  int flag29=0;\n\
    \  int flag30=0;\n  int flag31=0;\n  int flag32=0;\n  int flag33=0;\n  int flag34=0;\n\
    \  int flag35=0;\n  int flag36=0;\n  int flag37=0;\n  int flag38=0;\n  int flag39=0;\n\
    \  int flag40=0;\n  int flag41=0;\n  int flag42=0;\n  int flag43=0;\n  int flag44=0;\n\
    \  int flag45=0;\n  int flag46=0;\n  int flag47=0;\n  int flag48=0;\n  int flag49=0;\n\
    \  int flag50=0;\n  int flag51=0;\n  int flag52=0;\n  int flag53=0;\n  int flag54=0;\n\
    \  int flag55=0;\n  int flag56=0;\n  int flag57=0;\n  int flag58=0;\n  int flag59=0;\n\
    \  int flag60=0;\n  int flag61=0;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdnc811ai.cpp: In function 'int main()':\n/tmp/tmpdnc811ai.cpp:85:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdnc811ai.cpp:2:\n/tmp/tmpdnc811ai.cpp:86:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int count_after_dot = 0;\n    int count_before_dot\
    \ = 0;\n    int count_after_dot_1 = 0;\n    int count_after_dot_2 = 0;\n    int\
    \ count_after_dot_3 = 0;\n    int count_before_dot_1 = 0;\n    int count_before_dot_2\
    \ = 0;\n    int count_before_dot_3 = 0;\n    int count_before_dot_4 = 0;\n   \
    \ int count_before_dot_5 = 0;\n    int count_before_dot_6 = 0;\n    int count_before_dot_7\
    \ = 0;\n    int count_before_dot_8 = 0;\n    int count_before_dot_9 = 0;\n   \
    \ int count_before_dot_10 = 0;\n    int count_before_dot_11 = 0;\n    int count_before_dot_12\
    \ = 0;\n    int count_before_dot_13 = 0;\n    int count_before_dot_14 = 0;\n \
    \   int count_before_dot_15 = 0;\n    int count_before_dot_16 = 0;\n    int count_before_dot_17\
    \ = 0;\n    int count_before_dot_18 = 0;\n    int count_before_dot_19 = 0;\n \
    \   int count_before_dot_20 = 0;\n    int count_before_dot_21 = 0;\n    int count_before_dot_22\
    \ = 0;\n    int count_before_dot_23 = 0;\n    int count_before_dot_24 = 0;\n \
    \   int count_before_dot_25 = 0;\n    int count_before_dot_26 = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            dot++;\n            dot_pos = i;\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfb088vhh.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpfb088vhh.cpp:62:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpfb088vhh.cpp:62:1: error: expected ')' before '}' token\n/tmp/tmpfb088vhh.cpp:62:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmpfb088vhh.cpp:62:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpfb088vhh.cpp: In function 'int\
    \ main()':\n/tmp/tmpfb088vhh.cpp:64:10: error: 'candidate' does not name a type\n\
    \     auto candidate = file_name_check;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfb088vhh.cpp:2:\n/tmp/tmpfb088vhh.cpp:65:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot++;\n        }\n\
    \    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ str = file_name.substr(0, file_name.find('.'));\n    if(str.length() == 0) {\n\
    \        return \"No\";\n    }\n    if(str[0] >= 'a' && str[0] <= 'z' || str[0]\
    \ >= 'A' && str[0] <= 'Z') {\n        std::string str1 = file_name.substr(file_name.find('.')\
    \ + 1, len);\n        if(str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\"\
    ) {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps24pfi0m.cpp: In function 'int main()':\n/tmp/tmps24pfi0m.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps24pfi0m.cpp:2:\n/tmp/tmps24pfi0m.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    for(int i = 0; i < file_name.length(); i++)\
    \ {\n        if(file_name[i] == '.') {\n            dot_count++;\n           \
    \ dot_index = i;\n        }\n        if(file_name[i] >= '0' && file_name[i] <=\
    \ '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n      \
    \  return \"No\";\n    }\n    if(dot_count != 1) {\n        return \"No\";\n \
    \   }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return \"No\"\
    ;\n    }\n    if(file_name.substr(dot_index + 1, file_name.length() - dot_index)\
    \ != \"txt\" && file_name.substr(dot_index + 1, file_name.length() - dot_index)\
    \ != \"exe\" && file_name.substr(dot_index + 1, file_name.length() - dot_index)\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2mcwxlb.cpp: In function 'int main()':\n/tmp/tmpz2mcwxlb.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz2mcwxlb.cpp:2:\n/tmp/tmpz2mcwxlb.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int count_after_dot = 0;\n    for(int i =\
    \ 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot_count++;\n            dot_index = i;\n        }\n    }\n\
    \    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    for(int\
    \ i = dot_index + 1; i < file_name.length(); i++) {\n        count_after_dot++;\n\
    \    }\n    if(count_after_dot != 3) {\n        return \"No\";\n    }\n    std::string\
    \ file_extension = file_name.substr(dot_index + 1, 3);\n    if(file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqtfrg0j0.cpp: In function 'int main()':\n/tmp/tmpqtfrg0j0.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqtfrg0j0.cpp:2:\n/tmp/tmpqtfrg0j0.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int flag = 0;\n    int flag2 = 0;\n    int flag3 = 0;\n    for(int i\
    \ = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            flag = 1;\n        }\n        if(file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            flag = 1;\n        }\n        if(file_name[i]\
    \ == '.') {\n            if(file_name[i+1] == 't' && file_name[i+2] == 'x' &&\
    \ file_name[i+3] == 't') {\n                flag2 = 1;\n            }\n      \
    \      if(file_name[i+1] == 'e' && file_name[i+2] == 'x' && file_name[i+3] ==\
    \ 'e') {\n                flag2 = 1;\n            }\n            if(file_name[i+1]\
    \ == 'd' && file_name[i+2] == 'l' && file_name[i+3] == 'l') {\n              \
    \  flag2 = 1;\n            }\n        }\n    }\n    if(count <= 3 && dot == 1\
    \ && flag == 1 && flag2 == 1) {\n        return \"Yes\";\n    }\n    else {\n\
    \        return \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzsqmjkzg.cpp: In function 'int main()':\n/tmp/tmpzsqmjkzg.cpp:56:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzsqmjkzg.cpp:2:\n/tmp/tmpzsqmjkzg.cpp:57:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int i = 0;\n    int len = file_name.length();\n    for(i = 0; i <\
    \ len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n    \
    \        count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    std::string str1 = file_name.substr(0, file_name.find(\".\"));\n\
    \    std::string str2 = file_name.substr(file_name.find(\".\") + 1);\n    if(str1.length()\
    \ == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm22azaq1.cpp: In function 'int main()':\n/tmp/tmpm22azaq1.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm22azaq1.cpp:2:\n/tmp/tmpm22azaq1.cpp:45:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int digit_count = 0;\n    int digit_index\
    \ = 0;\n    int alpha_count = 0;\n    int alpha_index = 0;\n    int alpha_index_end\
    \ = 0;\n    int alpha_index_start = 0;\n    int alpha_index_end_start = 0;\n \
    \   int alpha_index_end_end = 0;\n    int alpha_index_end_end_start = 0;\n   \
    \ int alpha_index_end_end_end = 0;\n    int alpha_index_end_end_end_start = 0;\n\
    \    int alpha_index_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_end = 0;\n    int\
    \ alpha_index_end_end_end_end_end_end_end_end_end_start = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_end_end_start = 0;\n\
    \    int alpha_index_end_end_end_end_end_end_end\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpev0wpiyu.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpev0wpiyu.cpp:47:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpev0wpiyu.cpp: In function 'int main()':\n/tmp/tmpev0wpiyu.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpev0wpiyu.cpp:2:\n/tmp/tmpev0wpiyu.cpp:50:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i =\
    \ 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n\
    \            count++;\n        }\n        if(file_name[i] == '.') {\n        \
    \    dot++;\n            dot_pos = i;\n        }\n    }\n    if(count > 3 || dot\
    \ != 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_pos);\n    std::string sub2 = file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zzdz2e8.cpp: In function 'int main()':\n/tmp/tmp9zzdz2e8.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zzdz2e8.cpp:2:\n/tmp/tmp9zzdz2e8.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i =\
    \ 0; i < len; i++) {\n        if(file_name[i] == '.') {\n            dot++;\n\
    \            dot_pos = i;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n   \
    \     return \"No\";\n    }\n    if(dot != 1) {\n        return \"No\";\n    }\n\
    \    if(dot_pos == 0) {\n        return \"No\";\n    }\n    if(file_name[dot_pos\
    \ + 1] == 't' && file_name[dot_pos + 2] == 'x' && file_name[dot_pos + 3] == 't')\
    \ {\n        return \"Yes\";\n    }\n    if(file_name[dot_pos + 1] == 'e' && file_name[dot_pos\
    \ + 2] == 'x' && file_name[dot_pos + 3] == 'e') {\n        return \"Yes\";\n \
    \   }\n    if(file_name[dot_pos + 1] == 'd' && file_name[dot_pos + 2] == 'l' &&\
    \ file_name[dot_pos + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pch1vg4.cpp: In function 'int main()':\n/tmp/tmp_pch1vg4.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_pch1vg4.cpp:2:\n/tmp/tmp_pch1vg4.cpp:53:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n\tint count = 0;\n\tint dot_count\
    \ = 0;\n\tint dot_pos = 0;\n\tint ext_pos = 0;\n\tstd::string ext;\n\tstd::string\
    \ ext_list[3] = {\"txt\", \"exe\", \"dll\"};\n\tfor (int i = 0; i < file_name.length();\
    \ i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_pos = i;\n\
    \t\t}\n\t}\n\tif (count > 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\t\
    ext_pos = dot_pos + 1;\n\text = file_name.substr(ext_pos, file_name.length() -\
    \ ext_pos);\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (ext == ext_list[i]) {\n\t\
    \t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvobd_ioe.cpp: In function 'int main()':\n/tmp/tmpvobd_ioe.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvobd_ioe.cpp:2:\n/tmp/tmpvobd_ioe.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string before_dot\
    \ = file_name.substr(0, dot_index);\n    std::string after_dot = file_name.substr(dot_index\
    \ + 1, len - dot_index);\n    if(before_dot.length() == 0 || (before_dot[0] <\
    \ 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwzriw70.cpp: In function 'int main()':\n/tmp/tmprwzriw70.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprwzriw70.cpp:2:\n/tmp/tmprwzriw70.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int digit_count = 0;\n    for(int i = 0; i\
    \ < file_name.length(); i++) {\n        if(file_name[i] == '.') {\n          \
    \  dot_count++;\n            dot_index = i;\n        }\n        if(isdigit(file_name[i]))\
    \ {\n            digit_count++;\n        }\n    }\n    if(dot_count != 1) {\n\
    \        return \"No\";\n    }\n    if(digit_count > 3) {\n        return \"No\"\
    ;\n    }\n    std::string sub_string_1 = file_name.substr(0, dot_index);\n   \
    \ std::string sub_string_2 = file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1);\n    if(sub_string_1.length() == 0) {\n        return \"No\"\
    ;\n    }\n    if(!isalpha(sub_string_1[0])) {\n        return \"No\";\n    }\n\
    \    if(sub_string_2 != \"txt\" && sub_string_2 != \"exe\" && sub_string_2 !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp992bwouy.cpp: In function 'int main()':\n/tmp/tmp992bwouy.cpp:51:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp992bwouy.cpp:2:\n/tmp/tmp992bwouy.cpp:52:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot++;\n        }\n\
    \    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ s1 = file_name.substr(0, file_name.find('.'));\n    std::string s2 = file_name.substr(file_name.find('.')\
    \ + 1);\n    if(s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A'\
    \ || s1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(s2 != \"txt\" && s2\
    \ != \"exe\" && s2 != \"dll\") {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkync6lu.cpp: In function 'int main()':\n/tmp/tmpmkync6lu.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkync6lu.cpp:2:\n/tmp/tmpmkync6lu.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n    if(sub.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(!(sub[0] >= 'a' && sub[0] <=\
    \ 'z') && !(sub[0] >= 'A' && sub[0] <= 'Z')) {\n        return \"No\";\n    }\n\
    \    sub = file_name.substr(file_name.find('.') + 1);\n    if(sub != \"txt\" &&\
    \ sub != \"exe\" && sub != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2nnuwqof.cpp: In function 'int main()':\n/tmp/tmp2nnuwqof.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2nnuwqof.cpp:2:\n/tmp/tmp2nnuwqof.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i\
    \ = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string sub1\
    \ = file_name.substr(0, dot_pos);\n    std::string sub2 = file_name.substr(dot_pos\
    \ + 1, len - dot_pos - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0]\
    \ > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhlhoiqh.cpp: In function 'int main()':\n/tmp/tmpbhlhoiqh.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbhlhoiqh.cpp:2:\n/tmp/tmpbhlhoiqh.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Write your code here\n    //\
    \ To print results to the standard output you can use std::cout\n    // Example:\
    \ std::cout << \"Hello world!\";\n    int count = 0;\n    int dot_count = 0;\n\
    \    int dot_index = -1;\n    for(int i = 0; i < file_name.length(); i++){\n \
    \       if(file_name[i] == '.'){\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n \
    \           count++;\n        }\n    }\n    if(count > 3 || dot_count != 1 ||\
    \ dot_index == 0){\n        return \"No\";\n    }\n    std::string str = file_name.substr(dot_index+1);\n\
    \    if(str == \"txt\" || str == \"exe\" || str == \"dll\"){\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7nli8pez.cpp: In function 'int main()':\n/tmp/tmp7nli8pez.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7nli8pez.cpp:2:\n/tmp/tmp7nli8pez.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_index = 0;\n    int count_after_dot = 0;\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot != 1) {\n        return \"No\";\n    }\n    if(file_name[0] < 'a'\
    \ || file_name[0] > 'z') {\n        return \"No\";\n    }\n    for(int i = dot_index\
    \ + 1; i < file_name.length(); i++) {\n        count_after_dot++;\n    }\n   \
    \ if(count_after_dot != 3) {\n        return \"No\";\n    }\n    if(file_name[dot_index\
    \ + 1] != 't' || file_name[dot_index + 2] != 'x' || file_name[dot_index + 3] !=\
    \ 't') {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrft9utk.cpp: In function 'int main()':\n/tmp/tmpgrft9utk.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgrft9utk.cpp:2:\n/tmp/tmpgrft9utk.cpp:50:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int dot_index = -1;\n    int count\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot_index = i;\n        }\n        if (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if\
    \ (count > 3) {\n        return \"No\";\n    }\n    if (dot_index == -1) {\n \
    \       return \"No\";\n    }\n    if (dot_index == 0) {\n        return \"No\"\
    ;\n    }\n    if (file_name[dot_index - 1] < 'a' || file_name[dot_index - 1] >\
    \ 'z') {\n        if (file_name[dot_index - 1] < 'A' || file_name[dot_index -\
    \ 1] > 'Z') {\n            return \"No\";\n        }\n    }\n    std::string extension\
    \ = file_name.substr(dot_index + 1);\n    if (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1o59ga0p.cpp: In function 'int main()':\n/tmp/tmp1o59ga0p.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1o59ga0p.cpp:2:\n/tmp/tmp1o59ga0p.cpp:50:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int i = 0;\n    while(file_name[i] != '\\\
    0') {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n        i++;\n    }\n    if(count > 3 || dot_count\
    \ != 1) {\n        return \"No\";\n    }\n    std::string str1 = file_name.substr(0,\
    \ dot_index);\n    std::string str2 = file_name.substr(dot_index + 1, file_name.length()\
    \ - dot_index - 1);\n    if(str1.length() == 0 || (str1[0] < 'a' || str1[0] >\
    \ 'z') && (str1[0] < 'A' || str1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(str2 != \"txt\" && str2 != \"exe\" && str2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph3pyjibt.cpp: In function 'int main()':\n/tmp/tmph3pyjibt.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph3pyjibt.cpp:2:\n/tmp/tmph3pyjibt.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    int count\
    \ = 0;\n    int dot = 0;\n    int flag = 0;\n    int flag1 = 0;\n    int flag2\
    \ = 0;\n    int flag3 = 0;\n    int flag4 = 0;\n    int flag5 = 0;\n    int flag6\
    \ = 0;\n    int flag7 = 0;\n    int flag8 = 0;\n    int flag9 = 0;\n    int flag10\
    \ = 0;\n    int flag11 = 0;\n    int flag12 = 0;\n    int flag13 = 0;\n    int\
    \ flag14 = 0;\n    int flag15 = 0;\n    int flag16 = 0;\n    int flag17 = 0;\n\
    \    int flag18 = 0;\n    int flag19 = 0;\n    int flag20 = 0;\n    int flag21\
    \ = 0;\n    int flag22 = 0;\n    int flag23 = 0;\n    int flag24 = 0;\n    int\
    \ flag25 = 0;\n    int flag26 = 0;\n    int flag27 = 0;\n    int flag28 = 0;\n\
    \    int flag29 = 0;\n    int flag30 = 0;\n    int flag31 = 0;\n    int flag32\
    \ = 0;\n    int flag33 = 0;\n    int flag34 = 0;\n    int flag35 = 0;\n    int\
    \ flag36 = 0;\n    int flag37 = 0;\n    int flag38 = 0;\n    int flag39 = 0;\n\
    \    int flag40 = 0;\n    int flag41 = 0;\n    int flag42 = 0;\n    int flag43\
    \ = 0;\n    int flag44 = 0;\n    int flag45 = 0;\n    int flag46 = 0;\n    int\
    \ flag47 = 0;\n    int flag48 = 0;\n    int flag49 = 0;\n    int flag50 = 0;\n\
    \    int flag51 = 0;\n    int flag52 = 0;\n    int flag53 = 0;\n    int flag54\
    \ = 0;\n    int flag55 = 0;\n    int flag56 = 0;\n    int flag57 = 0;\n    int\
    \ flag58 = 0;\n    int flag59 = 0;\n    int flag60 = 0;\n    int flag61\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdhrcfzs.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpzdhrcfzs.cpp:83:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpzdhrcfzs.cpp: In function 'int main()':\n/tmp/tmpzdhrcfzs.cpp:85:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzdhrcfzs.cpp:2:\n/tmp/tmpzdhrcfzs.cpp:86:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    int count\
    \ = 0;\n    int count1 = 0;\n    int count2 = 0;\n    int count3 = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++){\n        if(file_name[i] == '.'){\n   \
    \         count++;\n        }\n        if(file_name[i] == '.' && i == 0){\n  \
    \          return \"No\";\n        }\n        if(file_name[i] == '.' && i == file_name.length()\
    \ - 1){\n            return \"No\";\n        }\n        if(file_name[i] == '.'\
    \ && file_name[i+1] == '.'){\n            return \"No\";\n        }\n        if(file_name[i]\
    \ == '.' && file_name[i+1] == '.' && file_name[i+2] == '.'){\n            return\
    \ \"No\";\n        }\n        if(file_name[i] == '.' && file_name[i+1] == '.'\
    \ && file_name[i+2] == '.' && file_name[i+3] == '.'){\n            return \"No\"\
    ;\n        }\n        if(file_name[i] == '.' && file_name[i+1] == '.' && file_name[i+2]\
    \ == '.' && file_name[i+3] == '.' && file_name[i+4] == '.'){\n            return\
    \ \"No\";\n        }\n        if(file_name[i] == '.' && file_name[i+1] == '.'\
    \ && file_name[i+2] == '.' && file_name[i+3] == '.' && file_name[i+4] == '.' &&\
    \ file_name[i+5] == '.'){\n            return \"No\";\n        }\n        if(file_name[i]\
    \ == '.' && file_name[i+1] == '.' && file_name[i+2] == '.' && file_name[i+3] ==\
    \ '.' && file_name[i+4] == '.' && file_name[i+5] == '.' && file_name[\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiracqjhw.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpiracqjhw.cpp:49:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpiracqjhw.cpp:49:1: error: expected ']' before '}' token\n/tmp/tmpiracqjhw.cpp:49:1:\
    \ error: expected ')' before '}' token\n/tmp/tmpiracqjhw.cpp:49:1: error: expected\
    \ primary-expression before '}' token\n/tmp/tmpiracqjhw.cpp:49:1: error: expected\
    \ ';' before '}' token\n/tmp/tmpiracqjhw.cpp:50:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpiracqjhw.cpp:78:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjavs89o.cpp: In function 'int main()':\n/tmp/tmpjjavs89o.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjavs89o.cpp:2:\n/tmp/tmpjjavs89o.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n  int count = 0;\n  int dot_count\
    \ = 0;\n  int dot_pos = 0;\n  for (int i = 0; i < file_name.length(); i++) {\n\
    \    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      count++;\n    }\n\
    \    if (file_name[i] == '.') {\n      dot_count++;\n      dot_pos = i;\n    }\n\
    \  }\n  if (count > 3) {\n    return \"No\";\n  }\n  if (dot_count != 1) {\n \
    \   return \"No\";\n  }\n  if (file_name[0] < 'a' || file_name[0] > 'z') {\n \
    \   return \"No\";\n  }\n  if (file_name.substr(dot_pos + 1, file_name.length()\
    \ - dot_pos - 1) != \"txt\" &&\n      file_name.substr(dot_pos + 1, file_name.length()\
    \ - dot_pos - 1) != \"exe\" &&\n      file_name.substr(dot_pos + 1, file_name.length()\
    \ - dot_pos - 1) != \"dll\") {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2bvg6za.cpp: In function 'int main()':\n/tmp/tmpu2bvg6za.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu2bvg6za.cpp:2:\n/tmp/tmpu2bvg6za.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    int count\
    \ = 0;\n    int dot = 0;\n    int len = file_name.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n\
    \        {\n            count++;\n        }\n        if(file_name[i] == '.')\n\
    \        {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1)\n\
    \    {\n        return \"No\";\n    }\n    else\n    {\n        std::string s\
    \ = file_name.substr(0, file_name.find(\".\"));\n        if(s.length() == 0)\n\
    \        {\n            return \"No\";\n        }\n        else\n        {\n \
    \           if(s[0] >= 'a' && s[0] <= 'z' || s[0] >= 'A' && s[0] <= 'Z')\n   \
    \         {\n                std::string s1 = file_name.substr(file_name.find(\"\
    .\") + 1, len);\n                if(s1 == \"txt\" || s1 == \"exe\" || s1 == \"\
    dll\")\n                {\n                    return \"Yes\";\n             \
    \   }\n                else\n                {\n                    return \"\
    No\";\n                }\n            }\n            else\n            {\n   \
    \             return \"No\";\n            }\n        }\n    }\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxprwjw9.cpp: In function 'int main()':\n/tmp/tmpaxprwjw9.cpp:66:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxprwjw9.cpp:2:\n/tmp/tmpaxprwjw9.cpp:67:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int count_dot\
    \ = 0;\n    int count_digit = 0;\n    int count_alpha = 0;\n    int count_alpha_upper\
    \ = 0;\n    int count_alpha_lower = 0;\n    int count_alpha_before_dot = 0;\n\
    \    int count_alpha_after_dot = 0;\n    int count_alpha_after_dot_upper = 0;\n\
    \    int count_alpha_after_dot_lower = 0;\n    int count_alpha_before_dot_upper\
    \ = 0;\n    int count_alpha_before_dot_lower = 0;\n    int count_txt = 0;\n  \
    \  int count_exe = 0;\n    int count_dll = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            count_dot++;\n      \
    \  }\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count_digit++;\n\
    \        }\n        if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n       \
    \     count_alpha_lower++;\n        }\n        if(file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z') {\n            count_alpha_upper++;\n        }\n        if(file_name[i]\
    \ >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            count_alpha++;\n        }\n        if(file_name[i] >= 'a' &&\
    \ file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z' && file_name[i]\
    \ != '.') {\n            count_alpha_before_dot++;\n        }\n        if(file_name[i]\
    \ >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z'\
    \ && file_name[i] == '.') {\n           \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1k_nmedz.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmp1k_nmedz.cpp:55:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmp1k_nmedz.cpp:83:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmp1k_nmedz.cpp:83:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int dot_pos_prev = 0;\n    int dot_pos_next =\
    \ 0;\n    int dot_pos_next_next = 0;\n    int dot_pos_next_next_next = 0;\n  \
    \  int dot_pos_next_next_next_next = 0;\n    int dot_pos_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next = 0;\n    int dot_pos_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next = 0;\n    int\
    \ dot_pos_next_next_next_next_next_next_next_next_next = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0;\n    int dot_pos_next_next_next_next_next_next_\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwveh7vdv.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpwveh7vdv.cpp:40:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpwveh7vdv.cpp: In function 'int main()':\n/tmp/tmpwveh7vdv.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwveh7vdv.cpp:2:\n/tmp/tmpwveh7vdv.cpp:43:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjavs89o.cpp: In function 'int main()':\n/tmp/tmpjjavs89o.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjavs89o.cpp:2:\n/tmp/tmpjjavs89o.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i =\
    \ 0; i < len; i++) {\n        if(file_name[i] == '.') {\n            dot++;\n\
    \            dot_pos = i;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n   \
    \     return \"No\";\n    }\n    if(dot != 1) {\n        return \"No\";\n    }\n\
    \    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return \"No\";\n\
    \    }\n    if(file_name[dot_pos + 1] != 't' || file_name[dot_pos + 2] != 'x'\
    \ || file_name[dot_pos + 3] != 't') {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6446_05b.cpp: In function 'int main()':\n/tmp/tmp6446_05b.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6446_05b.cpp:2:\n/tmp/tmp6446_05b.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n        return\
    \ \"No\";\n    }\n    if(dot_index == 0 || dot_index == len - 1) {\n        return\
    \ \"No\";\n    }\n    std::string sub_str = file_name.substr(dot_index + 1, len\
    \ - dot_index - 1);\n    if(sub_str != \"txt\" && sub_str != \"exe\" && sub_str\
    \ != \"dll\") {\n        return \"No\";\n    }\n    if(file_name[0] >= '0' &&\
    \ file_name[0] <= '9') {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu3xqmngv.cpp: In function 'int main()':\n/tmp/tmpu3xqmngv.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu3xqmngv.cpp:2:\n/tmp/tmpu3xqmngv.cpp:51:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot++;\n        }\n\
    \    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ s1 = file_name.substr(0, file_name.find(\".\"));\n    std::string s2 = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(s1.length() == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0]\
    \ < 'A' || s1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(s2 != \"txt\"\
    \ && s2 != \"exe\" && s2 != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayll9d6p.cpp: In function 'int main()':\n/tmp/tmpayll9d6p.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpayll9d6p.cpp:2:\n/tmp/tmpayll9d6p.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub_str = file_name.substr(0, file_name.find('.'));\n\
    \    if(sub_str.length() == 0) {\n        return \"No\";\n    }\n    if(!(sub_str[0]\
    \ >= 'a' && sub_str[0] <= 'z') && !(sub_str[0] >= 'A' && sub_str[0] <= 'Z')) {\n\
    \        return \"No\";\n    }\n    sub_str = file_name.substr(file_name.find('.')\
    \ + 1, len);\n    if(sub_str != \"txt\" && sub_str != \"exe\" && sub_str != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmngvv27o.cpp: In function 'int main()':\n/tmp/tmpmngvv27o.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmngvv27o.cpp:2:\n/tmp/tmpmngvv27o.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    std::string\
    \ result = \"No\";\n    std::string ext = \"\";\n    int count = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++){\n        if(file_name[i] == '.'){\n   \
    \         ext = file_name.substr(i+1, file_name.length()-i-1);\n            break;\n\
    \        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n        \
    \    count++;\n        }\n    }\n    if(count <= 3 && ext == \"txt\" || ext ==\
    \ \"exe\" || ext == \"dll\"){\n        result = \"Yes\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm06maz3m.cpp: In function 'int main()':\n/tmp/tmpm06maz3m.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm06maz3m.cpp:2:\n/tmp/tmpm06maz3m.cpp:38:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    int len = file_name.length();\n    for (int i = 0; i < len; i++) {\n\
    \        if (file_name[i] == '.') {\n            dot_count++;\n        }\n   \
    \     if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n\
    \        }\n    }\n    if (dot_count != 1 || digit_count > 3) {\n        return\
    \ \"No\";\n    }\n    int dot_index = file_name.find('.');\n    std::string before_dot\
    \ = file_name.substr(0, dot_index);\n    std::string after_dot = file_name.substr(dot_index\
    \ + 1);\n    if (before_dot.length() == 0 || (before_dot[0] < 'a' || before_dot[0]\
    \ > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z')) {\n        return \"\
    No\";\n    }\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptr75ssjs.cpp: In function 'int main()':\n/tmp/tmptr75ssjs.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptr75ssjs.cpp:2:\n/tmp/tmptr75ssjs.cpp:45:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    int count\
    \ = 0;\n    int dot = 0;\n    int dot_index = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] == '.') {\n     \
    \       dot++;\n            dot_index = i;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if(count > 3) {\n        return \"No\";\n    }\n    if(dot != 1) {\n     \
    \   return \"No\";\n    }\n    if(dot_index == 0) {\n        return \"No\";\n\
    \    }\n    if(file_name[dot_index + 1] == 't' && file_name[dot_index + 2] ==\
    \ 'x' && file_name[dot_index + 3] == 't') {\n        return \"Yes\";\n    }\n\
    \    if(file_name[dot_index + 1] == 'e' && file_name[dot_index + 2] == 'x' &&\
    \ file_name[dot_index + 3] == 'e') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index\
    \ + 1] == 'd' && file_name[dot_index + 2] == 'l' && file_name[dot_index + 3] ==\
    \ 'l') {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln56u1nj.cpp: In function 'int main()':\n/tmp/tmpln56u1nj.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpln56u1nj.cpp:2:\n/tmp/tmpln56u1nj.cpp:54:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    int i = 0;\n    while(i < len)\
    \ {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n        i++;\n    }\n    if(count > 3 || dot_count != 1) {\n        return\
    \ \"No\";\n    }\n    std::string str = file_name.substr(0, file_name.find('.'));\n\
    \    if(str.length() == 0) {\n        return \"No\";\n    }\n    if(str[0] >=\
    \ 'a' && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z') {\n        std::string\
    \ str1 = file_name.substr(file_name.find('.') + 1, file_name.length());\n    \
    \    if(str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\") {\n           \
    \ return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb5wejwb8.cpp: In function 'int main()':\n/tmp/tmpb5wejwb8.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb5wejwb8.cpp:2:\n/tmp/tmpb5wejwb8.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int digit_count = 0;\n    int digit_index\
    \ = 0;\n    int alpha_count = 0;\n    int alpha_index = 0;\n    int alpha_index_2\
    \ = 0;\n    int alpha_index_3 = 0;\n    int alpha_index_4 = 0;\n    int alpha_index_5\
    \ = 0;\n    int alpha_index_6 = 0;\n    int alpha_index_7 = 0;\n    int alpha_index_8\
    \ = 0;\n    int alpha_index_9 = 0;\n    int alpha_index_10 = 0;\n    int alpha_index_11\
    \ = 0;\n    int alpha_index_12 = 0;\n    int alpha_index_13 = 0;\n    int alpha_index_14\
    \ = 0;\n    int alpha_index_15 = 0;\n    int alpha_index_16 = 0;\n    int alpha_index_17\
    \ = 0;\n    int alpha_index_18 = 0;\n    int alpha_index_19 = 0;\n    int alpha_index_20\
    \ = 0;\n    int alpha_index_21 = 0;\n    int alpha_index_22 = 0;\n    int alpha_index_23\
    \ = 0;\n    int alpha_index_24 = 0;\n    int alpha_index_25 = 0;\n    int alpha_index_26\
    \ = 0;\n    int alpha_index_27 = 0;\n    int alpha_index_28 = 0;\n    int alpha_index_29\
    \ = 0;\n    int alpha_index_30 = 0;\n    int alpha_index_31 = 0;\n    int alpha_index_32\
    \ = 0;\n    int alpha_index_33 = 0;\n    int alpha_index_34 = 0;\n    int alpha_index_35\
    \ = 0;\n    int alpha_index_36 = 0;\n    int alpha_index_37 = 0;\n    int alpha_index_38\
    \ = 0;\n    int alpha_index_39 = 0;\n    int alpha_index_40 = 0;\n    int alpha_index_41\
    \ = 0;\n    int alpha_index_42 = 0;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvteov39n.cpp: In function 'int main()':\n/tmp/tmpvteov39n.cpp:68:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvteov39n.cpp:2:\n/tmp/tmpvteov39n.cpp:69:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n    int dot_index_before\
    \ = 0;\n    int dot_index_before_end = 0;\n    int dot_index_after_end = 0;\n\
    \    int dot_index_before_start = 0;\n    int dot_index_after_start = 0;\n   \
    \ for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] ==\
    \ '.') {\n            dot_count++;\n            dot_index = i;\n        }\n  \
    \      if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    if\
    \ (dot_count != 1) {\n        return \"No\";\n    }\n    dot_index_before = dot_index;\n\
    \    dot_index_after = dot_index;\n    dot_index_before_end = dot_index_before\
    \ - 1;\n    dot_index_after_end = dot_index_after + 1;\n    dot_index_before_start\
    \ = dot_index_before - 1;\n    dot_index_after_start = dot_index_after + 1;\n\
    \    while (file_name[dot_index_before_start] >= 'a' && file_name[dot_index_before_start]\
    \ <= 'z' || file_name[dot_index_before_start] >= 'A' && file_name[dot_index_before_start]\
    \ <= 'Z') {\n        dot_index_before_start--;\n    }\n    while (file_name[dot_index_after_end]\
    \ >= 'a' && file_name[dot_index_after_end] <= 'z' || file_name[dot_index_after_end]\
    \ >= 'A' && file_name[dot_index_after_end] <= 'Z') {\n        dot_index_after_end++;\n\
    \    }\n    if (dot_index_before_start != dot_index_before_end)\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplm4o3lg5.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmplm4o3lg5.cpp:55:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmplm4o3lg5.cpp:55:1: error: expected ';' before '}' token\n/tmp/tmplm4o3lg5.cpp:\
    \ In function 'int main()':\n/tmp/tmplm4o3lg5.cpp:57:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = file_name_check;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplm4o3lg5.cpp:2:\n/tmp/tmplm4o3lg5.cpp:58:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_index = 0;\n    int length = file_name.length();\n    for(int\
    \ i = 0; i < length; i++) {\n        if(file_name[i] >= '0' && file_name[i] <=\
    \ '9') {\n            count++;\n        }\n        if(file_name[i] == '.') {\n\
    \            dot++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3) {\n        return \"No\";\n    }\n    if(dot != 1) {\n        return \"\
    No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return\
    \ \"No\";\n    }\n    if(file_name[dot_index + 1] != 't' || file_name[dot_index\
    \ + 2] != 'x' || file_name[dot_index + 3] != 't') {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1j1xil9s.cpp: In function 'int main()':\n/tmp/tmp1j1xil9s.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1j1xil9s.cpp:2:\n/tmp/tmp1j1xil9s.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i\
    \ = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string str1\
    \ = file_name.substr(0, dot_pos);\n    std::string str2 = file_name.substr(dot_pos\
    \ + 1, len - dot_pos - 1);\n    if(str1.length() == 0 || (str1[0] < 'a' || str1[0]\
    \ > 'z') && (str1[0] < 'A' || str1[0] > 'Z')) {\n        return \"No\";\n    }\n\
    \    if(str2 != \"txt\" && str2 != \"exe\" && str2 != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0gu_yhji.cpp: In function 'int main()':\n/tmp/tmp0gu_yhji.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0gu_yhji.cpp:2:\n/tmp/tmp0gu_yhji.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    for(int i = 0; i < file_name.length(); i++)\
    \ {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3) {\n        return\
    \ \"No\";\n    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n  \
    \  if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return \"No\";\n  \
    \  }\n    if(file_name.substr(dot_index + 1, file_name.length() - 1) != \"txt\"\
    \ && file_name.substr(dot_index + 1, file_name.length() - 1) != \"exe\" && file_name.substr(dot_index\
    \ + 1, file_name.length() - 1) != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3qv6ar9.cpp: In function 'int main()':\n/tmp/tmpq3qv6ar9.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq3qv6ar9.cpp:2:\n/tmp/tmpq3qv6ar9.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n    if(sub.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(sub[0] >= 'a' && sub[0] <= 'z'\
    \ || sub[0] >= 'A' && sub[0] <= 'Z') {\n        std::string ext = file_name.substr(file_name.find('.')\
    \ + 1);\n        if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n  \
    \          return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshfombw_.cpp: In function 'int main()':\n/tmp/tmpshfombw_.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpshfombw_.cpp:2:\n/tmp/tmpshfombw_.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int count_dot\
    \ = 0;\n    int count_digit = 0;\n    int count_alpha = 0;\n    int count_alpha_upper\
    \ = 0;\n    int count_alpha_lower = 0;\n    int count_txt = 0;\n    int count_exe\
    \ = 0;\n    int count_dll = 0;\n    int count_substring_before_dot = 0;\n    int\
    \ count_substring_after_dot = 0;\n    int count_substring_before_dot_alpha = 0;\n\
    \    int count_substring_before_dot_digit = 0;\n    int count_substring_after_dot_alpha\
    \ = 0;\n    int count_substring_after_dot_digit = 0;\n    int count_substring_after_dot_alpha_lower\
    \ = 0;\n    int count_substring_after_dot_alpha_upper = 0;\n    int count_substring_after_dot_txt\
    \ = 0;\n    int count_substring_after_dot_exe = 0;\n    int count_substring_after_dot_dll\
    \ = 0;\n    int count_substring_after_dot_txt_alpha = 0;\n    int count_substring_after_dot_exe_alpha\
    \ = 0;\n    int count_substring_after_dot_dll_alpha = 0;\n    int count_substring_after_dot_txt_digit\
    \ = 0;\n    int count_substring_after_dot_exe_digit = 0;\n    int count_substring_after_dot_dll_digit\
    \ = 0;\n    int count_substring_after_dot_txt_alpha_lower = 0;\n    int count_substring_after_dot_exe_alpha_lower\
    \ = 0;\n    int count_substring_after_dot_dll_alpha_lower = 0;\n    int count_substring_after_dot_txt_alpha_upper\
    \ = 0;\n    int count_substring_after_dot_exe_alpha_upper = 0;\n    int count_substring_after_dot_dll_alpha_upper\
    \ = 0;\n    int count_substring_after_dot_txt_alpha_lower_digit = 0;\n    int\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tdsz271.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmp8tdsz271.cpp:52:1: error: expected unqualified-id before '}' token\n }\n\
    \ ^\n/tmp/tmp8tdsz271.cpp: In function 'int main()':\n/tmp/tmp8tdsz271.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tdsz271.cpp:2:\n/tmp/tmp8tdsz271.cpp:55:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_index = 0;\n    int len = file_name.length();\n    for(int i\
    \ = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot++;\n            dot_index = i;\n        }\n    }\n    if(count >\
    \ 3) {\n        return \"No\";\n    }\n    if(dot != 1) {\n        return \"No\"\
    ;\n    }\n    if(dot_index == 0) {\n        return \"No\";\n    }\n    if(file_name[dot_index\
    \ + 1] == 't' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] ==\
    \ 't') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index + 1] == 'e'\
    \ && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] == 'e') {\n \
    \       return \"Yes\";\n    }\n    if(file_name[dot_index + 1] == 'd' && file_name[dot_index\
    \ + 2] == 'l' && file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n\
    \    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg74i8wg9.cpp: In function 'int main()':\n/tmp/tmpg74i8wg9.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg74i8wg9.cpp:2:\n/tmp/tmpg74i8wg9.cpp:53:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i =\
    \ 0; i < len; i++) {\n        if(file_name[i] == '.') {\n            dot++;\n\
    \            dot_pos = i;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n   \
    \     return \"No\";\n    }\n    if(dot != 1) {\n        return \"No\";\n    }\n\
    \    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return \"No\";\n\
    \    }\n    if(file_name[dot_pos + 1] != 't' || file_name[dot_pos + 2] != 'x'\
    \ || file_name[dot_pos + 3] != 't') {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6446_05b.cpp: In function 'int main()':\n/tmp/tmp6446_05b.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6446_05b.cpp:2:\n/tmp/tmp6446_05b.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] == '.') {\n            dot_count++;\n        }\n    \
    \    if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\"\
    ;\n    }\n    std::string str = file_name.substr(0, file_name.find('.'));\n  \
    \  if(str.length() == 0) {\n        return \"No\";\n    }\n    if(str[0] >= 'a'\
    \ && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z') {\n        std::string str2\
    \ = file_name.substr(file_name.find('.') + 1, len);\n        if(str2 == \"txt\"\
    \ || str2 == \"exe\" || str2 == \"dll\") {\n            return \"Yes\";\n    \
    \    }\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiykb7d51.cpp: In function 'int main()':\n/tmp/tmpiykb7d51.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiykb7d51.cpp:2:\n/tmp/tmpiykb7d51.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int digit_count = 0;\n    int digit_index\
    \ = 0;\n    int letter_count = 0;\n    int letter_index = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n\
    \    int D = 0;\n    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n\
    \    int I = 0;\n    int J = 0;\n    int K = 0;\n    int L = 0;\n    int M = 0;\n\
    \    int N = 0;\n    int O = 0;\n    int P = 0;\n    int Q = 0;\n    int R = 0;\n\
    \    int S = 0;\n    int T = 0;\n    int U = 0;\n    int V = 0;\n    int W = 0;\n\
    \    int X = 0;\n    int Y = 0;\n    int Z = 0;\n    std::string txt = \"txt\"\
    ;\n    std::string exe = \"exe\";\n    std::string dll = \"dll\";\n    std::string\
    \ substring1;\n    std::string substring2;\n    std::string substring3;\n    std::string\
    \ substring4;\n    std::string substring5;\n    std::string substring6;\n    std::string\
    \ substring7;\n    std::string substring8;\n    std::string substring9;\n    std::string\
    \ substring10;\n    std::string substring11;\n    std::string substring12;\n \
    \  \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8di5k9wg.cpp: In function 'int main()':\n/tmp/tmp8di5k9wg.cpp:87:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8di5k9wg.cpp:2:\n/tmp/tmp8di5k9wg.cpp:88:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    for(int i = 0; i < file_name.length(); i++)\
    \ {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \        dot_index = i;\n        }\n    }\n    if(count > 3) {\n        return\
    \ \"No\";\n    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n  \
    \  if(dot_index == 0) {\n        return \"No\";\n    }\n    if(file_name[dot_index\
    \ + 1] == 't' && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] ==\
    \ 't') {\n        return \"Yes\";\n    }\n    if(file_name[dot_index + 1] == 'e'\
    \ && file_name[dot_index + 2] == 'x' && file_name[dot_index + 3] == 'e') {\n \
    \       return \"Yes\";\n    }\n    if(file_name[dot_index + 1] == 'd' && file_name[dot_index\
    \ + 2] == 'l' && file_name[dot_index + 3] == 'l') {\n        return \"Yes\";\n\
    \    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg55n0efr.cpp: In function 'int main()':\n/tmp/tmpg55n0efr.cpp:51:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg55n0efr.cpp:2:\n/tmp/tmpg55n0efr.cpp:52:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    for(int i\
    \ = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n   \
    \     return \"No\";\n    }\n    int dot_count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            dot_count++;\n      \
    \  }\n    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n    int\
    \ dot_index = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_index = i;\n        }\n    }\n    std::string sub_string_before_dot\
    \ = file_name.substr(0, dot_index);\n    if(sub_string_before_dot.length() ==\
    \ 0) {\n        return \"No\";\n    }\n    if(sub_string_before_dot[0] >= 'a'\
    \ && sub_string_before_dot[0] <= 'z') {\n        return \"Yes\";\n    }\n    if(sub_string_before_dot[0]\
    \ >= 'A' && sub_string_before_dot[0] <= 'Z') {\n        return \"Yes\";\n    }\n\
    \    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnts89lhn.cpp: In function 'int main()':\n/tmp/tmpnts89lhn.cpp:55:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnts89lhn.cpp:2:\n/tmp/tmpnts89lhn.cpp:56:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // your code here\n    int dot_count\
    \ = 0;\n    int num_count = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \        }\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n       \
    \     num_count++;\n        }\n    }\n    if(dot_count != 1 || num_count > 3)\
    \ {\n        return \"No\";\n    }\n    std::string ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n   \
    \     return \"Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmfwefso.cpp: In function 'int main()':\n/tmp/tmpvmfwefso.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmfwefso.cpp:2:\n/tmp/tmpvmfwefso.cpp:41:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find('.') + 1);\n   \
    \ if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyedce1pw.cpp: In function 'int main()':\n/tmp/tmpyedce1pw.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyedce1pw.cpp:2:\n/tmp/tmpyedce1pw.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int dot_index = 0;\n    int count_after_dot = 0;\n    int count_before_dot\
    \ = 0;\n    int count_after_dot_txt = 0;\n    int count_after_dot_exe = 0;\n \
    \   int count_after_dot_dll = 0;\n    int count_before_dot_letter = 0;\n    int\
    \ count_before_dot_number = 0;\n    int count_before_dot_letter_upper = 0;\n \
    \   int count_before_dot_letter_lower = 0;\n    int count_before_dot_letter_upper_first\
    \ = 0;\n    int count_before_dot_letter_lower_first = 0;\n    int count_before_dot_letter_upper_second\
    \ = 0;\n    int count_before_dot_letter_lower_second = 0;\n    int count_before_dot_letter_upper_third\
    \ = 0;\n    int count_before_dot_letter_lower_third = 0;\n    int count_before_dot_letter_upper_fourth\
    \ = 0;\n    int count_before_dot_letter_lower_fourth = 0;\n    int count_before_dot_letter_upper_fifth\
    \ = 0;\n    int count_before_dot_letter_lower_fifth = 0;\n    int count_before_dot_letter_upper_sixth\
    \ = 0;\n    int count_before_dot_letter_lower_sixth = 0;\n    int count_before_dot_letter_upper_seventh\
    \ = 0;\n    int count_before_dot_letter_lower_seventh = 0;\n    int count_before_dot_letter_upper_eighth\
    \ = 0;\n    int count_before_dot_letter_lower_eighth = 0;\n    int count_before_dot_letter_upper_ninth\
    \ = 0;\n    int count_before_dot_letter_lower_ninth = 0;\n    int count_before_dot_letter_upper_tenth\
    \ = 0;\n    int count_before_dot_letter_lower_tenth = 0;\n    int count_before_dot_letter_upper_eleventh\
    \ = 0;\n    int count\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84s7gvgy.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmp84s7gvgy.cpp:52:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmp84s7gvgy.cpp: In function 'int main()':\n/tmp/tmp84s7gvgy.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp84s7gvgy.cpp:2:\n/tmp/tmp84s7gvgy.cpp:55:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n    if(len\
    \ < 5)\n        return \"No\";\n    for(int i = 0; i < len; i++)\n    {\n    \
    \    if(file_name[i] == '.')\n        {\n            dot_count++;\n          \
    \  if(dot_count > 1)\n                return \"No\";\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n            count++;\n        if(count > 3)\n\
    \            return \"No\";\n    }\n    if(count == 0)\n        return \"No\"\
    ;\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n    if(ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n  \
    \  return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6p2hf814.cpp: In function 'int main()':\n/tmp/tmp6p2hf814.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6p2hf814.cpp:2:\n/tmp/tmp6p2hf814.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3) {\n        return \"No\";\n    }\n    if(dot_count != 1) {\n        return\
    \ \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n       \
    \ return \"No\";\n    }\n    if(file_name[dot_index + 1] != 't' || file_name[dot_index\
    \ + 2] != 'x' || file_name[dot_index + 3] != 't') {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpysrhm_eo.cpp: In function 'int main()':\n/tmp/tmpysrhm_eo.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpysrhm_eo.cpp:2:\n/tmp/tmpysrhm_eo.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n    if(sub.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(sub[0] >= 'a' && sub[0] <= 'z'\
    \ || sub[0] >= 'A' && sub[0] <= 'Z') {\n        std::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1, file_name.length());\n        if(sub2 == \"txt\" || sub2 == \"exe\" ||\
    \ sub2 == \"dll\") {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jr4s59v.cpp: In function 'int main()':\n/tmp/tmp8jr4s59v.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jr4s59v.cpp:2:\n/tmp/tmp8jr4s59v.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    int letter_count = 0;\n    int dot_index = -1;\n    int letter_index\
    \ = -1;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n\
    \        }\n        if ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z')) {\n            letter_count++;\n           \
    \ letter_index = i;\n        }\n    }\n    if (dot_count != 1 || digit_count >\
    \ 3 || letter_count == 0 || letter_index > dot_index) {\n        return \"No\"\
    ;\n    }\n    std::string extension = file_name.substr(dot_index + 1);\n    if\
    \ (extension != \"txt\" && extension != \"exe\" && extension != \"dll\") {\n \
    \       return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnj6y15r.cpp: In function 'int main()':\n/tmp/tmpxnj6y15r.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxnj6y15r.cpp:2:\n/tmp/tmpxnj6y15r.cpp:47:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjavs89o.cpp: In function 'int main()':\n/tmp/tmpjjavs89o.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjavs89o.cpp:2:\n/tmp/tmpjjavs89o.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    std::string file_name_copy = file_name;\n\
    \    std::string file_name_copy_2 = file_name;\n    std::string file_name_copy_3\
    \ = file_name;\n    std::string file_name_copy_4 = file_name;\n    std::string\
    \ file_name_copy_5 = file_name;\n    std::string file_name_copy_6 = file_name;\n\
    \    std::string file_name_copy_7 = file_name;\n    std::string file_name_copy_8\
    \ = file_name;\n    std::string file_name_copy_9 = file_name;\n    std::string\
    \ file_name_copy_10 = file_name;\n    std::string file_name_copy_11 = file_name;\n\
    \    std::string file_name_copy_12 = file_name;\n    std::string file_name_copy_13\
    \ = file_name;\n    std::string file_name_copy_14 = file_name;\n    std::string\
    \ file_name_copy_15 = file_name;\n    std::string file_name_copy_16 = file_name;\n\
    \    std::string file_name_copy_17 = file_name;\n    std::string file_name_copy_18\
    \ = file_name;\n    std::string file_name_copy_19 = file_name;\n    std::string\
    \ file_name_copy_20 = file_name;\n    std::string file_name_copy_21 = file_name;\n\
    \    std::string file_name_copy_22 = file_name;\n    std::string file_name_copy_23\
    \ = file_name;\n    std::string file_name_copy_24 = file_name;\n    std::string\
    \ file_name_copy_25 = file_name;\n    std::string file_name_copy_26 = file_name;\n\
    \    std::string file_name_copy_27 = file_name;\n    std::string file_name_copy_28\
    \ = file_name;\n    std::string file_name_copy_29 = file_name;\n    std::string\
    \ file_name_copy_30 = file_name;\n    std::\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ov4dc2n.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmp8ov4dc2n.cpp:49:1: error: expected unqualified-id before '}' token\n }\n\
    \ ^\n/tmp/tmp8ov4dc2n.cpp:49:1: error: expected ';' before '}' token\n/tmp/tmp8ov4dc2n.cpp:\
    \ In function 'int main()':\n/tmp/tmp8ov4dc2n.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = file_name_check;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ov4dc2n.cpp:2:\n/tmp/tmp8ov4dc2n.cpp:52:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // TODO: implement this function\n\
    \    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_2\
    \ = 0;\n    int dot_index_3 = 0;\n    int dot_index_4 = 0;\n    int dot_index_5\
    \ = 0;\n    int dot_index_6 = 0;\n    int dot_index_7 = 0;\n    int dot_index_8\
    \ = 0;\n    int dot_index_9 = 0;\n    int dot_index_10 = 0;\n    int dot_index_11\
    \ = 0;\n    int dot_index_12 = 0;\n    int dot_index_13 = 0;\n    int dot_index_14\
    \ = 0;\n    int dot_index_15 = 0;\n    int dot_index_16 = 0;\n    int dot_index_17\
    \ = 0;\n    int dot_index_18 = 0;\n    int dot_index_19 = 0;\n    int dot_index_20\
    \ = 0;\n    int dot_index_21 = 0;\n    int dot_index_22 = 0;\n    int dot_index_23\
    \ = 0;\n    int dot_index_24 = 0;\n    int dot_index_25 = 0;\n    int dot_index_26\
    \ = 0;\n    int dot_index_27 = 0;\n    int dot_index_28 = 0;\n    int dot_index_29\
    \ = 0;\n    int dot_index_30 = 0;\n    int dot_index_31 = 0;\n    int dot_index_32\
    \ = 0;\n    int dot_index_33 = 0;\n    int dot_index_34 = 0;\n    int dot_index_35\
    \ = 0;\n    int dot_index_36 = 0;\n    int dot_index_37 = 0;\n    int dot_index_38\
    \ = 0;\n    int dot_index_39 = 0;\n    int dot_index_40 = 0;\n    int dot_index_41\
    \ = 0;\n    int dot_index_42 = 0;\n    int dot_index_43 = 0;\n    int dot_index_44\
    \ = 0;\n    int dot_\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtp_uh4q.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpgtp_uh4q.cpp:66:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpgtp_uh4q.cpp: In function 'int main()':\n/tmp/tmpgtp_uh4q.cpp:68:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgtp_uh4q.cpp:2:\n/tmp/tmpgtp_uh4q.cpp:69:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n    int dot_index_before\
    \ = 0;\n    int dot_index_before_end = 0;\n    int dot_index_after_end = 0;\n\
    \    int dot_index_before_start = 0;\n    int dot_index_after_start = 0;\n   \
    \ int dot_index_before_start_end = 0;\n    int dot_index_after_start_end = 0;\n\
    \    int dot_index_before_start_end_end = 0;\n    int dot_index_after_start_end_end\
    \ = 0;\n    int dot_index_before_start_end_end_end = 0;\n    int dot_index_after_start_end_end_end\
    \ = 0;\n    int dot_index_before_start_end_end_end_end = 0;\n    int dot_index_after_start_end_end_end_end\
    \ = 0;\n    int dot_index_before_start_end_end_end_end_end = 0;\n    int dot_index_after_start_end_end_end_end_end\
    \ = 0;\n    int dot_index_before_start_end_end_end_end_end_end = 0;\n    int dot_index_after_start_end_end_end_end_end_end\
    \ = 0;\n    int dot_index_before_start_end_end_end_end_end_end_end = 0;\n    int\
    \ dot_index_after_start_end_end_end_end_end_end_end = 0;\n    int dot_index_before_start_end_end_end_end_end_end_end_end\
    \ = 0;\n    int dot_index_after_start_end_end_end_end_end_end_end_end = 0;\n \
    \   int dot_index_before_start_end_end_end_end_end_end_end_end_end = 0;\n    int\
    \ dot_index_after_start_end_end_end_end_end_end_end_end_end = 0\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1im6tqyb.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmp1im6tqyb.cpp:45:1: error: expected ',' or ';' before '}' token\n }\n ^\n\
    /tmp/tmp1im6tqyb.cpp: In function 'int main()':\n/tmp/tmp1im6tqyb.cpp:47:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = file_name_check;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1im6tqyb.cpp:2:\n/tmp/tmp1im6tqyb.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Your code here\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    std::string\
    \ str = file_name.substr(0, file_name.find(\".\"));\n    std::string str1 = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(str.length() == 0 || (str[0] < 'a' || str[0] > 'z') && (str[0]\
    \ < 'A' || str[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(str1 !=\
    \ \"txt\" && str1 != \"exe\" && str1 != \"dll\")\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbprw3_63.cpp: In function 'int main()':\n/tmp/tmpbprw3_63.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbprw3_63.cpp:2:\n/tmp/tmpbprw3_63.cpp:51:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    int i = 0;\n    while(i < len)\
    \ {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n        i++;\n    }\n    if(count > 3 || dot_count != 1) {\n        return\
    \ \"No\";\n    }\n    std::string sub_str = file_name.substr(0, file_name.find(\"\
    .\"));\n    if(sub_str.length() == 0) {\n        return \"No\";\n    }\n    if(sub_str[0]\
    \ >= 'a' && sub_str[0] <= 'z') {\n        return \"Yes\";\n    }\n    if(sub_str[0]\
    \ >= 'A' && sub_str[0] <= 'Z') {\n        return \"Yes\";\n    }\n    return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwmumoal.cpp: In function 'int main()':\n/tmp/tmphwmumoal.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphwmumoal.cpp:2:\n/tmp/tmphwmumoal.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // Write your code here\n    int\
    \ count = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n        }\n    }\n    if(count > 3 || dot_count != 1) {\n\
    \        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string sub2 = file_name.substr(file_name.find('.') + 1);\n    if(sub1.length()\
    \ == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(sub2 != \"txt\" && sub2 != \"exe\"\
    \ && sub2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr2gte9le.cpp: In function 'int main()':\n/tmp/tmpr2gte9le.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr2gte9le.cpp:2:\n/tmp/tmpr2gte9le.cpp:45:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n    if(sub.length()\
    \ == 0) {\n        return \"No\";\n    }\n    if(sub[0] >= 'a' && sub[0] <= 'z'\
    \ || sub[0] >= 'A' && sub[0] <= 'Z') {\n        std::string sub2 = file_name.substr(file_name.find('.')\
    \ + 1);\n        if(sub2 == \"txt\" || sub2 == \"exe\" || sub2 == \"dll\") {\n\
    \            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzn_sv77w.cpp: In function 'int main()':\n/tmp/tmpzn_sv77w.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzn_sv77w.cpp:2:\n/tmp/tmpzn_sv77w.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    int len = file_name.length();\n    for (int i = 0; i < len; i++) {\n\
    \        if (file_name[i] == '.') {\n            dot_count++;\n        }\n   \
    \     if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digit_count++;\n\
    \        }\n    }\n    if (dot_count != 1 || digit_count > 3) {\n        return\
    \ \"No\";\n    }\n    std::string extension = file_name.substr(file_name.find('.')\
    \ + 1);\n    if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17nvzh2c.cpp: In function 'int main()':\n/tmp/tmp17nvzh2c.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp17nvzh2c.cpp:2:\n/tmp/tmp17nvzh2c.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot =\
    \ 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot++;\n        }\n\
    \    }\n    if(count > 3 || dot != 1) {\n        return \"No\";\n    }\n    std::string\
    \ str = file_name.substr(0, file_name.find(\".\"));\n    if(str.length() == 0)\
    \ {\n        return \"No\";\n    }\n    if(str[0] >= 'a' && str[0] <= 'z' || str[0]\
    \ >= 'A' && str[0] <= 'Z') {\n        std::string str1 = file_name.substr(file_name.find(\"\
    .\") + 1);\n        if(str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\")\
    \ {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79hgzw9l.cpp: In function 'int main()':\n/tmp/tmp79hgzw9l.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp79hgzw9l.cpp:2:\n/tmp/tmp79hgzw9l.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int i\
    \ = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_pos = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    if(file_name[0]\
    \ < 'a' || file_name[0] > 'z') {\n        return \"No\";\n    }\n    if(file_name.substr(dot_pos\
    \ + 1, len - dot_pos - 1) != \"txt\" && file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1) != \"exe\" && file_name.substr(dot_pos + 1, len - dot_pos - 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxeul671.cpp: In function 'int main()':\n/tmp/tmpaxeul671.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxeul671.cpp:2:\n/tmp/tmpaxeul671.cpp:44:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjavs89o.cpp: In function 'int main()':\n/tmp/tmpjjavs89o.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjavs89o.cpp:2:\n/tmp/tmpjjavs89o.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // your code here\n    int count\
    \ = 0;\n    int dot = 0;\n    int len = file_name.length();\n    for(int i = 0;\
    \ i < len; i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n  \
    \          count++;\n        }\n        if(file_name[i] == '.'){\n           \
    \ dot++;\n        }\n    }\n    if(count > 3 || dot != 1){\n        return \"\
    No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find(\".\"));\n\
    \    if(sub.length() == 0){\n        return \"No\";\n    }\n    if(!((sub[0] >=\
    \ 'a' && sub[0] <= 'z') || (sub[0] >= 'A' && sub[0] <= 'Z'))){\n        return\
    \ \"No\";\n    }\n    std::string sub2 = file_name.substr(file_name.find(\".\"\
    ) + 1, len);\n    if(sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\"){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6d3or2mb.cpp: In function 'int main()':\n/tmp/tmp6d3or2mb.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6d3or2mb.cpp:2:\n/tmp/tmp6d3or2mb.cpp:48:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int count_dot\
    \ = 0;\n    int count_letter = 0;\n    int count_digit = 0;\n    int count_substring\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            count_dot++;\n        }\n        if (file_name[i] >=\
    \ 'a' && file_name[i] <= 'z') {\n            count_letter++;\n        }\n    \
    \    if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count_digit++;\n\
    \        }\n        if (file_name[i] == '.') {\n            count_substring++;\n\
    \        }\n    }\n    if (count_dot == 1 && count_letter > 0 && count_digit <=\
    \ 3 && count_substring == 1) {\n        return \"Yes\";\n    }\n    else {\n \
    \       return \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0hmm_8ey.cpp: In function 'int main()':\n/tmp/tmp0hmm_8ey.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0hmm_8ey.cpp:2:\n/tmp/tmp0hmm_8ey.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = -1;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1) {\n        return \"No\";\n    }\n    std::string before_dot\
    \ = file_name.substr(0, dot_index);\n    std::string after_dot = file_name.substr(dot_index\
    \ + 1, len - dot_index - 1);\n    if(before_dot.length() == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxjujr_wd.cpp: In function 'int main()':\n/tmp/tmpxjujr_wd.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxjujr_wd.cpp:2:\n/tmp/tmpxjujr_wd.cpp:46:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string ext = file_name.substr(file_name.find(\".\") + 1);\n \
    \   if(ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjavs89o.cpp: In function 'int main()':\n/tmp/tmpjjavs89o.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjavs89o.cpp:2:\n/tmp/tmpjjavs89o.cpp:40:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    // check if there are more than\
    \ 3 digits\n    int count = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    //\
    \ check if there is exactly one dot\n    int dot_count = 0;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n    \
    \        dot_count++;\n        }\n    }\n    if (dot_count != 1) {\n        return\
    \ \"No\";\n    }\n    // check if the substring before the dot is not empty and\
    \ starts with a letter\n    int dot_index = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            dot_index = i;\n   \
    \     }\n    }\n    if (dot_index == 0) {\n        return \"No\";\n    }\n   \
    \ if (!((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A' &&\
    \ file_name[0] <= 'Z'))) {\n        return \"No\";\n    }\n    // check if the\
    \ substring after the dot is one of the following: ['txt', 'exe', 'dll']\n   \
    \ std::string extension = file_name.substr(dot_index + 1, file_name.length() -\
    \ dot_index - 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nen969o.cpp: In function 'int main()':\n/tmp/tmp8nen969o.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8nen969o.cpp:2:\n/tmp/tmp8nen969o.cpp:60:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"\
    ))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string\
    \ file_name_check(std::string file_name) {\n    int count = 0;\n    int count_dot\
    \ = 0;\n    int count_digit = 0;\n    int count_letter = 0;\n    int count_letter_after_dot\
    \ = 0;\n    int count_letter_before_dot = 0;\n    int count_letter_after_dot_txt\
    \ = 0;\n    int count_letter_after_dot_exe = 0;\n    int count_letter_after_dot_dll\
    \ = 0;\n    int count_letter_before_dot_txt = 0;\n    int count_letter_before_dot_exe\
    \ = 0;\n    int count_letter_before_dot_dll = 0;\n    int count_letter_before_dot_txt_exe_dll\
    \ = 0;\n    int count_letter_after_dot_txt_exe_dll = 0;\n    int count_letter_before_dot_txt_exe_dll_upper\
    \ = 0;\n    int count_letter_after_dot_txt_exe_dll_upper = 0;\n    int count_letter_before_dot_txt_exe_dll_lower\
    \ = 0;\n    int count_letter_after_dot_txt_exe_dll_lower = 0;\n    int count_letter_before_dot_txt_exe_dll_upper_lower\
    \ = 0;\n    int count_letter_after_dot_txt_exe_dll_upper_lower = 0;\n    int count_letter_before_dot_txt_exe_dll_upper_lower_digit\
    \ = 0;\n    int count_letter_after_dot_txt_exe_dll_upper_lower_digit = 0;\n  \
    \  int count_letter_before_dot_txt_exe_dll_upper_lower_digit_dot = 0;\n    int\
    \ count_letter_after_dot_txt_exe_dll_upper_lower_digit_dot = 0;\n    int count_letter_before_dot_txt_exe_dll_upper_lower_digit_dot_txt\
    \ = 0;\n    int count_letter_after_dot_txt_exe_dll_upper_lower_digit_dot_txt =\
    \ 0;\n    int count_letter_before_dot_txt_exe_dll_upper_lower_digit_dot_exe =\
    \ 0;\n    int\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz6zfbamh.cpp: In function 'std::string file_name_check(std::string)':\n\
    /tmp/tmpz6zfbamh.cpp:46:1: error: expected unqualified-id before '}' token\n }\n\
    \ ^\n/tmp/tmpz6zfbamh.cpp: In function 'int main()':\n/tmp/tmpz6zfbamh.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = file_name_check;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz6zfbamh.cpp:2:\n/tmp/tmpz6zfbamh.cpp:49:37: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n                                     ^\n"
  stdout: ''
