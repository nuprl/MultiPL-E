name: HumanEval_159_eat
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and\
  \ you already have eaten a certain number of carrots,\n// but now you need to eat\
  \ more carrots to complete the day's meals.\n// you should return a vector of [\
  \ total number of eaten carrots after your meals,\n// the number of carrots left\
  \ after your meals ]\n// if there are not enough remaining carrots, you will eat\
  \ all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5),\
  \ (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8),\
  \ (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n\
  // (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7,\
  \ (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that\
  \ you have eaten.\n// @need : integer\n// the number of carrots that you need to\
  \ eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in\
  \ stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0\
  \ <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long\
  \ need, long remaining) {\n"
tests: "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6),\
  \ (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4),\
  \ (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1),\
  \ (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2),\
  \ (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4),\
  \ (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4),\
  \ (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"
completions: ["    std::vector<long> result;\n    if (remaining >= need) {\n     \
    \   result.push_back(number + need);\n        result.push_back(remaining - need);\n\
    \    } else {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    // your code here\n\
    \    std::vector<long> result;\n    if(remaining < need){\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    else{\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if (need > remaining) {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    } else {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if (remaining < need) {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    } else {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if(remaining >= need)\n\
    \    {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else\n    {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if(remaining < need)\n    {\n        result.push_back(number +\
    \ remaining);\n        result.push_back(0);\n    }\n    else\n    {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    if(number + need <= remaining)\n        return {number + need, remaining -\
    \ (number + need)};\n    else\n        return {remaining + number, 0};", "   \
    \ std::vector<long> result;\n    if(remaining >= need){\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    else{\n  \
    \      result.push_back(number + remaining);\n        result.push_back(0);\n \
    \   }\n    return result;", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    long total = number\
    \ + need;\n    long left = remaining - need;\n    if (left < 0) {\n        total\
    \ += left;\n        left = 0;\n    }\n    return {total, left};", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \ std::vector<long> result;\n  if (remaining >= need) {\n    result.push_back(number\
    \ + need);\n    result.push_back(remaining - need);\n  } else {\n    result.push_back(number\
    \ + remaining);\n    result.push_back(0);\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    if(remaining >= need)\n    {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - need);\n    }\n    else\n    {\n\
    \        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if(remaining\
    \ >= need){\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else{\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    if (remaining\
    \ < need) {\n        return {number + remaining, 0};\n    }\n    return {number\
    \ + need, remaining - need};", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (number + need <= remaining) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - (number + need));\n    } else\
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining < need) {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    } else {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if(remaining >= need){\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }else{\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    if(remaining < need)\n    {\n        return {number\
    \ + remaining, 0};\n    }\n    else\n    {\n        return {number + need, remaining\
    \ - need};\n    }", "    std::vector<long> result;\n    if (remaining >= need)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if(remaining >= need){\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    }\n    else{\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (remaining < need)\
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    } else {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    return result;", "    std::vector<long> result;\n    if\
    \ (remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining < need) {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    } else {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (remaining >= need)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining > need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (remaining < need)\
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    } else {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    return result;", "    std::vector<long> result;\n    if\
    \ (remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    // your code here\n\
    \    std::vector<long> result;\n    if(remaining < need){\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    else{\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if(remaining >= need)\n    {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    else\n   \
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    // your code here\n    std::vector<long> result;\n\
    \    if(remaining >= need){\n        result.push_back(number + need);\n      \
    \  result.push_back(remaining - need);\n    }\n    else{\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \ if (remaining < need) {\n    return { number + remaining, 0 };\n  }\n  return\
    \ { number + need, remaining - need };", "    std::vector<long> result;\n    if(remaining\
    \ >= need){\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else{\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining < need) {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    } else {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (remaining >= need)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (number + need <=\
    \ remaining) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - (number + need));\n    } else {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \ std::vector<long> result;\n  if (remaining >= need) {\n    result.push_back(number\
    \ + need);\n    result.push_back(remaining - need);\n  } else {\n    result.push_back(number\
    \ + remaining);\n    result.push_back(0);\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    if (number + need > remaining) {\n        result.push_back(remaining);\n\
    \        result.push_back(0);\n    } else {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - (number + need));\n    }\n    return\
    \ result;", "    // your code here\n    std::vector<long> result;\n    if(remaining\
    \ >= need){\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else{\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   if(remaining >= need)\n        return {number + need, remaining - need};\n\
    \    else\n        return {number + remaining, 0};", "  if (number + need <= remaining)\
    \ {\n    return {number + need, remaining - (number + need)};\n  } else {\n  \
    \  return {remaining + number, 0};\n  }", "    std::vector<long> result;\n   \
    \ if (remaining >= need) {\n        result.push_back(number + need);\n       \
    \ result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> res;\n    if(remaining >= need) {\n\
    \        res.push_back(number + need);\n        res.push_back(remaining - need);\n\
    \    } else {\n        res.push_back(number + remaining);\n        res.push_back(0);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    if(remaining >=\
    \ need)\n    {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else\n    {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    if(number+need<=remaining)\n\
    \        return {number+need,remaining-number-need};\n    else\n        return\
    \ {number+remaining,0};", "    std::vector<long> result;\n    if (remaining <\
    \ need) {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    } else {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    return result;", "    // your code here\n    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if(number + need <= remaining)\n    {\n   \
    \     result.push_back(number + need);\n        result.push_back(remaining - (number\
    \ + need));\n    }\n    else\n    {\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    // your code here\n\
    \    std::vector<long> result;\n    if(number + need <= remaining){\n      result.push_back(number\
    \ + need);\n      result.push_back(remaining - (number + need));\n    }\n    else{\n\
    \      result.push_back(remaining);\n      result.push_back(0);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    if (remaining >= need) {\n   \
    \     result.push_back(number + need);\n        result.push_back(remaining - need);\n\
    \    } else {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if(remaining < need)\n\
    \    {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    else\n    {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    return result;", "    std::vector<long> result;\n    if\
    \ (remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    if (remaining >= need)\n\
    \        return std::vector<long>({number + need, remaining - need});\n    else\n\
    \        return std::vector<long>({number + remaining, 0});", "    if (remaining\
    \ < need)\n        return {number + remaining, 0};\n    else\n        return {number\
    \ + need, remaining - need};", "    long total = number + need;\n    if (total\
    \ > remaining) {\n        return {remaining, 0};\n    }\n    return {total, remaining\
    \ - total};", "    std::vector<long> result;\n    if (remaining >= need) {\n \
    \       result.push_back(number + need);\n        result.push_back(remaining -\
    \ need);\n    } else {\n        result.push_back(number + remaining);\n      \
    \  result.push_back(0);\n    }\n    return result;", "    std::vector<long> result;\n\
    \    if (remaining >= need) {\n        result.push_back(number + need);\n    \
    \    result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if(remaining >= need)\n    {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    else\n   \
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(number\
    \ + std::min(need, remaining));\n    result.push_back(std::max(0L, remaining -\
    \ need));\n    return result;", "    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if(remaining >= need)\n    {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    else\n   \
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if (need <= remaining)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if(remaining < need){\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    else{\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    }\n    return result;",
  "    std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    if (need > remaining)\
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    } else {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    return result;", "    if (remaining >= need)\n        return\
    \ {number + need, remaining - need};\n    else\n        return {number + remaining,\
    \ 0};", "    std::vector<long> res;\n    if(remaining >= need) {\n        res.push_back(number\
    \ + need);\n        res.push_back(remaining - need);\n    } else {\n        res.push_back(number\
    \ + remaining);\n        res.push_back(0);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    if(remaining >= need)\n    {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - need);\n    }\n    else\n    {\n\
    \        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    if(remaining < need){\n\
    \        res.push_back(number + remaining);\n        res.push_back(0);\n    }\n\
    \    else{\n        res.push_back(number + need);\n        res.push_back(remaining\
    \ - need);\n    }\n    return res;", "    if(number + need > remaining)\n    \
    \    return {remaining, 0};\n    return {number + need, remaining - (number +\
    \ need)};", "    // your code here\n    std::vector<long> result;\n    if (remaining\
    \ >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if(number + need <= remaining)\n    {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - (number + need));\n    }\n    else\n\
    \    {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> result;\n    if (remaining >=\
    \ need) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    if(number + need <=\
    \ remaining)\n        return {number + need, remaining - (number + need)};\n \
    \   else\n        return {remaining + number, 0};", "    std::vector<long> result;\n\
    \    if(remaining >= need){\n        result.push_back(number + need);\n      \
    \  result.push_back(remaining - need);\n    }\n    else{\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    // your code here\n    if(remaining >= need)\n    \
    \    return {number + need, remaining - need};\n    else\n        return {number\
    \ + remaining, 0};", "    std::vector<long> result;\n    if (remaining >= need)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (number + need <= remaining) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - (number + need));\n    } else\
    \ {\n        result.push_back(number + remaining);\n        result.push_back(0);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    if(remaining\
    \ >= need){\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else{\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   long total = number + std::min(need, remaining);\n    long left = std::max(0L,\
    \ remaining - need);\n    return {total, left};", "    std::vector<long> result;\n\
    \    if (remaining >= need) {\n        result.push_back(number + need);\n    \
    \    result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   // your code here\n    std::vector<long> result;\n    if(remaining >= need){\n\
    \        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    }\n    else{\n        result.push_back(number + remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;"]
stop_tokens:
- "\n}"
