language: cpp
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += abs(i);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2o5c7dy.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpp2o5c7dy.cpp: In function 'int main()':\n/tmp/tmpp2o5c7dy.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpp2o5c7dy.cpp:2:\n/tmp/tmpp2o5c7dy.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpp2o5c7dy.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpp2o5c7dy.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp2o5c7dy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        if (i == 0) continue;\n        if (i > 0) prod *= 1;\n \
    \       else prod *= -1;\n        sum += abs(i);\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpna9c3ks2.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpna9c3ks2.cpp: In function 'int main()':\n/tmp/tmpna9c3ks2.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpna9c3ks2.cpp:2:\n/tmp/tmpna9c3ks2.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpna9c3ks2.cpp:28:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpna9c3ks2.cpp:28:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpna9c3ks2.cpp:28:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpna9c3ks2.cpp:28:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpna9c3ks2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        sum +=\
    \ std::abs(*i);\n        if (*i != 0) {\n            prod *= (*i / std::abs(*i));\n\
    \        }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxvng_he.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpkxvng_he.cpp: In function 'int main()':\n/tmp/tmpkxvng_he.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpkxvng_he.cpp:2:\n/tmp/tmpkxvng_he.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpkxvng_he.cpp:30:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpkxvng_he.cpp:30:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpkxvng_he.cpp:30:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkxvng_he.cpp:30:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkxvng_he.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) prod *= -1;\n       \
    \ else if (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum += abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8uoz7du.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpx8uoz7du.cpp: In function 'int main()':\n/tmp/tmpx8uoz7du.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpx8uoz7du.cpp:2:\n/tmp/tmpx8uoz7du.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpx8uoz7du.cpp:28:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpx8uoz7du.cpp:28:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpx8uoz7du.cpp:28:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpx8uoz7du.cpp:28:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpx8uoz7du.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *=\
    \ 1;\n        } else if (i < 0) {\n            sum += -i;\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2w75zk4r.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp2w75zk4r.cpp: In function 'int main()':\n/tmp/tmp2w75zk4r.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp2w75zk4r.cpp:2:\n/tmp/tmp2w75zk4r.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp2w75zk4r.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp2w75zk4r.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp2w75zk4r.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2w75zk4r.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2w75zk4r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2p_m5j7i.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp2p_m5j7i.cpp: In function 'int main()':\n/tmp/tmp2p_m5j7i.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp2p_m5j7i.cpp:2:\n/tmp/tmp2p_m5j7i.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp2p_m5j7i.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp2p_m5j7i.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp2p_m5j7i.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2p_m5j7i.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2p_m5j7i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i == 0) continue;\n    sum += abs(i);\n    prod *= i > 0 ? 1 : -1;\n \
    \ }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwe9d9rm.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmprwe9d9rm.cpp: In function 'int main()':\n/tmp/tmprwe9d9rm.cpp:26:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmprwe9d9rm.cpp:2:\n/tmp/tmprwe9d9rm.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmprwe9d9rm.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmprwe9d9rm.cpp:27:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmprwe9d9rm.cpp:27:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprwe9d9rm.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprwe9d9rm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += abs(i);\n        prod *= (i > 0) ? 1 : -1;\n    }\n\
    \    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppf7qwkwa.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmppf7qwkwa.cpp: In function 'int main()':\n/tmp/tmppf7qwkwa.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmppf7qwkwa.cpp:2:\n/tmp/tmppf7qwkwa.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmppf7qwkwa.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmppf7qwkwa.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmppf7qwkwa.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppf7qwkwa.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppf7qwkwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmekbn2_c.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpmekbn2_c.cpp: In function 'int main()':\n/tmp/tmpmekbn2_c.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmekbn2_c.cpp:2:\n/tmp/tmpmekbn2_c.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpmekbn2_c.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpmekbn2_c.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmekbn2_c.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmekbn2_c.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmekbn2_c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n        } else {\n    \
    \        prod *= 0;\n        }\n        sum += abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ti8cx0m.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp6ti8cx0m.cpp: In function 'int main()':\n/tmp/tmp6ti8cx0m.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp6ti8cx0m.cpp:2:\n/tmp/tmp6ti8cx0m.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp6ti8cx0m.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp6ti8cx0m.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6ti8cx0m.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ti8cx0m.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ti8cx0m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        if (i == 0) continue;\n        if (i > 0) prod *= 1;\n \
    \       else prod *= -1;\n        sum += std::abs(i);\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6sdes1s.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpn6sdes1s.cpp: In function 'int main()':\n/tmp/tmpn6sdes1s.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpn6sdes1s.cpp:2:\n/tmp/tmpn6sdes1s.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpn6sdes1s.cpp:28:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpn6sdes1s.cpp:28:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpn6sdes1s.cpp:28:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn6sdes1s.cpp:28:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpn6sdes1s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10a5e11s.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp10a5e11s.cpp: In function 'int main()':\n/tmp/tmp10a5e11s.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp10a5e11s.cpp:2:\n/tmp/tmp10a5e11s.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp10a5e11s.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp10a5e11s.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp10a5e11s.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp10a5e11s.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp10a5e11s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7tzs3xtu.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp7tzs3xtu.cpp: In function 'int main()':\n/tmp/tmp7tzs3xtu.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp7tzs3xtu.cpp:2:\n/tmp/tmp7tzs3xtu.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp7tzs3xtu.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp7tzs3xtu.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7tzs3xtu.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7tzs3xtu.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7tzs3xtu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcojig_3p.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpcojig_3p.cpp: In function 'int main()':\n/tmp/tmpcojig_3p.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpcojig_3p.cpp:2:\n/tmp/tmpcojig_3p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpcojig_3p.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpcojig_3p.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcojig_3p.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcojig_3p.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcojig_3p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += std::abs(i);\n        prod *= i < 0 ? -1 : 1;\n   \
    \ }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp563k886v.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp563k886v.cpp: In function 'int main()':\n/tmp/tmp563k886v.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp563k886v.cpp:2:\n/tmp/tmp563k886v.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp563k886v.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp563k886v.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp563k886v.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp563k886v.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp563k886v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb48rnllc.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpb48rnllc.cpp: In function 'int main()':\n/tmp/tmpb48rnllc.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpb48rnllc.cpp:2:\n/tmp/tmpb48rnllc.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpb48rnllc.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb48rnllc.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb48rnllc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i < 0 ? -1 : 1;\n  }\n  return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8759i6_.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpq8759i6_.cpp: In function 'int main()':\n/tmp/tmpq8759i6_.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpq8759i6_.cpp:2:\n/tmp/tmpq8759i6_.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpq8759i6_.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpq8759i6_.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpq8759i6_.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpq8759i6_.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq8759i6_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i == 0) continue;\n    sum += std::abs(i);\n    prod *= i < 0 ? -1 : 1;\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifm5m5ck.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpifm5m5ck.cpp: In function 'int main()':\n/tmp/tmpifm5m5ck.cpp:26:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpifm5m5ck.cpp:2:\n/tmp/tmpifm5m5ck.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpifm5m5ck.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpifm5m5ck.cpp:27:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpifm5m5ck.cpp:27:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpifm5m5ck.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpifm5m5ck.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_muzyoj.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp5_muzyoj.cpp: In function 'int main()':\n/tmp/tmp5_muzyoj.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp5_muzyoj.cpp:2:\n/tmp/tmp5_muzyoj.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp5_muzyoj.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp5_muzyoj.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp5_muzyoj.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5_muzyoj.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5_muzyoj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1hhifs97.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp1hhifs97.cpp: In function 'int main()':\n/tmp/tmp1hhifs97.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp1hhifs97.cpp:2:\n/tmp/tmp1hhifs97.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp1hhifs97.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp1hhifs97.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp1hhifs97.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1hhifs97.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1hhifs97.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n        sum += abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwna70fv.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpuwna70fv.cpp: In function 'int main()':\n/tmp/tmpuwna70fv.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpuwna70fv.cpp:2:\n/tmp/tmpuwna70fv.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpuwna70fv.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpuwna70fv.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpuwna70fv.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpuwna70fv.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuwna70fv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        }\n        else {\n            prod *= 0;\n        }\n\
    \        sum += abs(arr[i]);\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tf_4c_3.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp4tf_4c_3.cpp: In function 'int main()':\n/tmp/tmp4tf_4c_3.cpp:35:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4tf_4c_3.cpp:2:\n/tmp/tmp4tf_4c_3.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp4tf_4c_3.cpp:36:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp4tf_4c_3.cpp:36:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp4tf_4c_3.cpp:36:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4tf_4c_3.cpp:36:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4tf_4c_3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += -i;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9eevik8k.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp9eevik8k.cpp: In function 'int main()':\n/tmp/tmp9eevik8k.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9eevik8k.cpp:2:\n/tmp/tmp9eevik8k.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp9eevik8k.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp9eevik8k.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9eevik8k.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9eevik8k.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9eevik8k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ &i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxky5f68.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpdxky5f68.cpp: In function 'int main()':\n/tmp/tmpdxky5f68.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdxky5f68.cpp:2:\n/tmp/tmpdxky5f68.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpdxky5f68.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpdxky5f68.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpdxky5f68.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdxky5f68.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxky5f68.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += abs(i);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2o5c7dy.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpp2o5c7dy.cpp: In function 'int main()':\n/tmp/tmpp2o5c7dy.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpp2o5c7dy.cpp:2:\n/tmp/tmpp2o5c7dy.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpp2o5c7dy.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpp2o5c7dy.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp2o5c7dy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb48rnllc.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpb48rnllc.cpp: In function 'int main()':\n/tmp/tmpb48rnllc.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpb48rnllc.cpp:2:\n/tmp/tmpb48rnllc.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpb48rnllc.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb48rnllc.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb48rnllc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        if (arr[i] != 0) {\n            sum\
    \ += std::abs(arr[i]);\n        }\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfi4hgqr3.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpfi4hgqr3.cpp: In function 'int main()':\n/tmp/tmpfi4hgqr3.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpfi4hgqr3.cpp:2:\n/tmp/tmpfi4hgqr3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpfi4hgqr3.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpfi4hgqr3.cpp:32:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpfi4hgqr3.cpp:32:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfi4hgqr3.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfi4hgqr3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsbg94sx.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpdsbg94sx.cpp: In function 'int main()':\n/tmp/tmpdsbg94sx.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdsbg94sx.cpp:2:\n/tmp/tmpdsbg94sx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpdsbg94sx.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpdsbg94sx.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdsbg94sx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsbg94sx.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpdsbg94sx.cpp: In function 'int main()':\n/tmp/tmpdsbg94sx.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdsbg94sx.cpp:2:\n/tmp/tmpdsbg94sx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpdsbg94sx.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpdsbg94sx.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdsbg94sx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += abs(i);\n        prod *= i > 0 ? 1 : -1;\n    }\n \
    \   return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_l0uii2w.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp_l0uii2w.cpp: In function 'int main()':\n/tmp/tmp_l0uii2w.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp_l0uii2w.cpp:2:\n/tmp/tmp_l0uii2w.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp_l0uii2w.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp_l0uii2w.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp_l0uii2w.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_l0uii2w.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_l0uii2w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsbg94sx.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpdsbg94sx.cpp: In function 'int main()':\n/tmp/tmpdsbg94sx.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdsbg94sx.cpp:2:\n/tmp/tmpdsbg94sx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpdsbg94sx.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpdsbg94sx.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdsbg94sx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcojig_3p.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpcojig_3p.cpp: In function 'int main()':\n/tmp/tmpcojig_3p.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpcojig_3p.cpp:2:\n/tmp/tmpcojig_3p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpcojig_3p.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpcojig_3p.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcojig_3p.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcojig_3p.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcojig_3p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            sum += arr[i] * -1;\n            prod *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwzu0xmo.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmptwzu0xmo.cpp: In function 'int main()':\n/tmp/tmptwzu0xmo.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmptwzu0xmo.cpp:2:\n/tmp/tmptwzu0xmo.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmptwzu0xmo.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmptwzu0xmo.cpp:32:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmptwzu0xmo.cpp:32:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptwzu0xmo.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptwzu0xmo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcojig_3p.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpcojig_3p.cpp: In function 'int main()':\n/tmp/tmpcojig_3p.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpcojig_3p.cpp:2:\n/tmp/tmpcojig_3p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpcojig_3p.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpcojig_3p.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcojig_3p.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcojig_3p.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcojig_3p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += std::abs(i);\n    } else {\n      prod *= 0;\n\
    \    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxhu1kk0.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpfxhu1kk0.cpp: In function 'int main()':\n/tmp/tmpfxhu1kk0.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpfxhu1kk0.cpp:2:\n/tmp/tmpfxhu1kk0.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpfxhu1kk0.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpfxhu1kk0.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpfxhu1kk0.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfxhu1kk0.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfxhu1kk0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfe5gdci.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpgfe5gdci.cpp: In function 'int main()':\n/tmp/tmpgfe5gdci.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpgfe5gdci.cpp:2:\n/tmp/tmpgfe5gdci.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpgfe5gdci.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpgfe5gdci.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpgfe5gdci.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgfe5gdci.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgfe5gdci.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        }\n        else {\n            prod *= 0;\n        }\n\
    \        sum += std::abs(arr[i]);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwlk38mdi.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpwlk38mdi.cpp: In function 'int main()':\n/tmp/tmpwlk38mdi.cpp:35:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpwlk38mdi.cpp:2:\n/tmp/tmpwlk38mdi.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpwlk38mdi.cpp:36:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpwlk38mdi.cpp:36:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpwlk38mdi.cpp:36:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwlk38mdi.cpp:36:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwlk38mdi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmekbn2_c.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpmekbn2_c.cpp: In function 'int main()':\n/tmp/tmpmekbn2_c.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmekbn2_c.cpp:2:\n/tmp/tmpmekbn2_c.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpmekbn2_c.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpmekbn2_c.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmekbn2_c.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmekbn2_c.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmekbn2_c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            product *= -1;\n        }\n        if (arr[i] != 0) {\n         \
    \   sum += std::abs(arr[i]);\n        }\n    }\n    return sum * product;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9gsvza9.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpo9gsvza9.cpp: In function 'int main()':\n/tmp/tmpo9gsvza9.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpo9gsvza9.cpp:2:\n/tmp/tmpo9gsvza9.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpo9gsvza9.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpo9gsvza9.cpp:32:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpo9gsvza9.cpp:32:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo9gsvza9.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpo9gsvza9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n\
    \        }\n        if (i != 0) {\n            sum += std::abs(i);\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0_oto596.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp0_oto596.cpp: In function 'int main()':\n/tmp/tmp0_oto596.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp0_oto596.cpp:2:\n/tmp/tmp0_oto596.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp0_oto596.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp0_oto596.cpp:32:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp0_oto596.cpp:32:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0_oto596.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0_oto596.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i != 0) {\n            sum += std::abs(i);\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpua54f7bu.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpua54f7bu.cpp: In function 'int main()':\n/tmp/tmpua54f7bu.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpua54f7bu.cpp:2:\n/tmp/tmpua54f7bu.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpua54f7bu.cpp:30:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpua54f7bu.cpp:30:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpua54f7bu.cpp:30:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpua54f7bu.cpp:30:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpua54f7bu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long product = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            product *=\
    \ -1;\n        } else if (i > 0) {\n            sum += i;\n        }\n    }\n\
    \    return product * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmbychp3m.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpmbychp3m.cpp: In function 'int main()':\n/tmp/tmpmbychp3m.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmbychp3m.cpp:2:\n/tmp/tmpmbychp3m.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpmbychp3m.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpmbychp3m.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmbychp3m.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmbychp3m.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmbychp3m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n \
    \     sum += i;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2jnxjl_.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpy2jnxjl_.cpp: In function 'int main()':\n/tmp/tmpy2jnxjl_.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpy2jnxjl_.cpp:2:\n/tmp/tmpy2jnxjl_.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpy2jnxjl_.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpy2jnxjl_.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpy2jnxjl_.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy2jnxjl_.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy2jnxjl_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb687a5hq.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpb687a5hq.cpp: In function 'int main()':\n/tmp/tmpb687a5hq.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpb687a5hq.cpp:2:\n/tmp/tmpb687a5hq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpb687a5hq.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpb687a5hq.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb687a5hq.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb687a5hq.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb687a5hq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += abs(i);\n      prod *= -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7fv5ozg.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpz7fv5ozg.cpp: In function 'int main()':\n/tmp/tmpz7fv5ozg.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpz7fv5ozg.cpp:2:\n/tmp/tmpz7fv5ozg.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpz7fv5ozg.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpz7fv5ozg.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpz7fv5ozg.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpz7fv5ozg.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpz7fv5ozg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += abs(i);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2o5c7dy.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpp2o5c7dy.cpp: In function 'int main()':\n/tmp/tmpp2o5c7dy.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpp2o5c7dy.cpp:2:\n/tmp/tmpp2o5c7dy.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpp2o5c7dy.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpp2o5c7dy.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp2o5c7dy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmekbn2_c.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpmekbn2_c.cpp: In function 'int main()':\n/tmp/tmpmekbn2_c.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmekbn2_c.cpp:2:\n/tmp/tmpmekbn2_c.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpmekbn2_c.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpmekbn2_c.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmekbn2_c.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmekbn2_c.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmekbn2_c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (long i : arr) {\n        if (i > 0) {\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n        } else {\n    \
    \        prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy6vrhsr3.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpy6vrhsr3.cpp: In function 'int main()':\n/tmp/tmpy6vrhsr3.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpy6vrhsr3.cpp:2:\n/tmp/tmpy6vrhsr3.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpy6vrhsr3.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpy6vrhsr3.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpy6vrhsr3.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy6vrhsr3.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy6vrhsr3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n        } else {\n    \
    \        prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hm1fauh.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp7hm1fauh.cpp: In function 'int main()':\n/tmp/tmp7hm1fauh.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp7hm1fauh.cpp:2:\n/tmp/tmp7hm1fauh.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp7hm1fauh.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp7hm1fauh.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7hm1fauh.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7hm1fauh.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7hm1fauh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2p_m5j7i.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp2p_m5j7i.cpp: In function 'int main()':\n/tmp/tmp2p_m5j7i.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp2p_m5j7i.cpp:2:\n/tmp/tmp2p_m5j7i.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp2p_m5j7i.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp2p_m5j7i.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp2p_m5j7i.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2p_m5j7i.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2p_m5j7i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto &i : arr) {\n\
    \    if (i < 0) prod *= -1;\n    sum += std::abs(i);\n  }\n  return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzc7ni5k.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmplzc7ni5k.cpp: In function 'int main()':\n/tmp/tmplzc7ni5k.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmplzc7ni5k.cpp:2:\n/tmp/tmplzc7ni5k.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmplzc7ni5k.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmplzc7ni5k.cpp:26:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplzc7ni5k.cpp:26:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplzc7ni5k.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplzc7ni5k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += abs(i);\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpst432_ay.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpst432_ay.cpp: In function 'int main()':\n/tmp/tmpst432_ay.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpst432_ay.cpp:2:\n/tmp/tmpst432_ay.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpst432_ay.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpst432_ay.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpst432_ay.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpst432_ay.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpst432_ay.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        if (i == 0) continue;\n        sum += abs(i);\n        prod\
    \ *= i > 0 ? 1 : -1;\n    }\n    return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9_5khfe.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpv9_5khfe.cpp: In function 'int main()':\n/tmp/tmpv9_5khfe.cpp:26:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpv9_5khfe.cpp:2:\n/tmp/tmpv9_5khfe.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpv9_5khfe.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpv9_5khfe.cpp:27:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpv9_5khfe.cpp:27:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpv9_5khfe.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv9_5khfe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        if (i > 0) sum += i;\n        else if (i < 0) {\n      \
    \      sum += -i;\n            prod *= -1;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk89dpc54.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpk89dpc54.cpp: In function 'int main()':\n/tmp/tmpk89dpc54.cpp:28:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpk89dpc54.cpp:2:\n/tmp/tmpk89dpc54.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpk89dpc54.cpp:29:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpk89dpc54.cpp:29:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpk89dpc54.cpp:29:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk89dpc54.cpp:29:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk89dpc54.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfe5gdci.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpgfe5gdci.cpp: In function 'int main()':\n/tmp/tmpgfe5gdci.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpgfe5gdci.cpp:2:\n/tmp/tmpgfe5gdci.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpgfe5gdci.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpgfe5gdci.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpgfe5gdci.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgfe5gdci.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgfe5gdci.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        if (i < 0) prod *= -1;\n        sum += abs(i);\n    }\n\
    \    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zppakjg.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp2zppakjg.cpp: In function 'int main()':\n/tmp/tmp2zppakjg.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp2zppakjg.cpp:2:\n/tmp/tmp2zppakjg.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp2zppakjg.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp2zppakjg.cpp:26:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp2zppakjg.cpp:26:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2zppakjg.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2zppakjg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        sum += std::abs(i);\n        prod *= (i == 0 ? 1 : i / std::abs(i));\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7dbm2c1.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpw7dbm2c1.cpp: In function 'int main()':\n/tmp/tmpw7dbm2c1.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpw7dbm2c1.cpp:2:\n/tmp/tmpw7dbm2c1.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpw7dbm2c1.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpw7dbm2c1.cpp:26:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpw7dbm2c1.cpp:26:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpw7dbm2c1.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw7dbm2c1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i >\
    \ 0) {\n            prod *= 1;\n        } else if (i < 0) {\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyi_4fide.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpyi_4fide.cpp: In function 'int main()':\n/tmp/tmpyi_4fide.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpyi_4fide.cpp:2:\n/tmp/tmpyi_4fide.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpyi_4fide.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpyi_4fide.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyi_4fide.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyi_4fide.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyi_4fide.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n        sum += std::abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9v5vdye5.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp9v5vdye5.cpp: In function 'int main()':\n/tmp/tmp9v5vdye5.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9v5vdye5.cpp:2:\n/tmp/tmp9v5vdye5.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp9v5vdye5.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp9v5vdye5.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9v5vdye5.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9v5vdye5.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9v5vdye5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsbg94sx.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpdsbg94sx.cpp: In function 'int main()':\n/tmp/tmpdsbg94sx.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdsbg94sx.cpp:2:\n/tmp/tmpdsbg94sx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpdsbg94sx.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpdsbg94sx.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdsbg94sx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += std::abs(i);\n        prod *= i > 0 ? 1 : -1;\n   \
    \ }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc386cx4j.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpc386cx4j.cpp: In function 'int main()':\n/tmp/tmpc386cx4j.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpc386cx4j.cpp:2:\n/tmp/tmpc386cx4j.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpc386cx4j.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpc386cx4j.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpc386cx4j.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpc386cx4j.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpc386cx4j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsbg94sx.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpdsbg94sx.cpp: In function 'int main()':\n/tmp/tmpdsbg94sx.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdsbg94sx.cpp:2:\n/tmp/tmpdsbg94sx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpdsbg94sx.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpdsbg94sx.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdsbg94sx.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdsbg94sx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += abs(i);\n        prod *= (i > 0) ? 1 : -1;\n    }\n\
    \    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppf7qwkwa.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmppf7qwkwa.cpp: In function 'int main()':\n/tmp/tmppf7qwkwa.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmppf7qwkwa.cpp:2:\n/tmp/tmppf7qwkwa.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmppf7qwkwa.cpp:31:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmppf7qwkwa.cpp:31:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmppf7qwkwa.cpp:31:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppf7qwkwa.cpp:31:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppf7qwkwa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7tzs3xtu.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp7tzs3xtu.cpp: In function 'int main()':\n/tmp/tmp7tzs3xtu.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp7tzs3xtu.cpp:2:\n/tmp/tmp7tzs3xtu.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp7tzs3xtu.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp7tzs3xtu.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7tzs3xtu.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7tzs3xtu.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7tzs3xtu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += -i;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9eevik8k.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp9eevik8k.cpp: In function 'int main()':\n/tmp/tmp9eevik8k.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9eevik8k.cpp:2:\n/tmp/tmp9eevik8k.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp9eevik8k.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp9eevik8k.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9eevik8k.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9eevik8k.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9eevik8k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long product = 1;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      product *= -1;\n    } else if (i > 0) {\n\
    \      product *= 1;\n    } else {\n      product *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * product;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x5oqyya.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp9x5oqyya.cpp: In function 'int main()':\n/tmp/tmp9x5oqyya.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9x5oqyya.cpp:2:\n/tmp/tmp9x5oqyya.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp9x5oqyya.cpp:34:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp9x5oqyya.cpp:34:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9x5oqyya.cpp:34:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9x5oqyya.cpp:34:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9x5oqyya.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i == 0) continue;\n    sum += std::abs(i);\n    prod *= (i > 0) ? 1 :\
    \ -1;\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8e4os00.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpa8e4os00.cpp: In function 'int main()':\n/tmp/tmpa8e4os00.cpp:26:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpa8e4os00.cpp:2:\n/tmp/tmpa8e4os00.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpa8e4os00.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpa8e4os00.cpp:27:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpa8e4os00.cpp:27:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpa8e4os00.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa8e4os00.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        if (i < 0) {\n            prod *= -1;\n        } else if\
    \ (i == 0) {\n            prod = 0;\n            sum = 0;\n            break;\n\
    \        }\n        sum += std::abs(i);\n    }\n    return sum * prod;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1v1a2ioc.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp1v1a2ioc.cpp: In function 'int main()':\n/tmp/tmp1v1a2ioc.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp1v1a2ioc.cpp:2:\n/tmp/tmp1v1a2ioc.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp1v1a2ioc.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp1v1a2ioc.cpp:32:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp1v1a2ioc.cpp:32:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1v1a2ioc.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1v1a2ioc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb687a5hq.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpb687a5hq.cpp: In function 'int main()':\n/tmp/tmpb687a5hq.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpb687a5hq.cpp:2:\n/tmp/tmpb687a5hq.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpb687a5hq.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpb687a5hq.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb687a5hq.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb687a5hq.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb687a5hq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb48rnllc.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpb48rnllc.cpp: In function 'int main()':\n/tmp/tmpb48rnllc.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpb48rnllc.cpp:2:\n/tmp/tmpb48rnllc.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpb48rnllc.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb48rnllc.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb48rnllc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        }\n        else {\n            prod *= 0;\n        }\n\
    \        sum += abs(arr[i]);\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tf_4c_3.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp4tf_4c_3.cpp: In function 'int main()':\n/tmp/tmp4tf_4c_3.cpp:35:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4tf_4c_3.cpp:2:\n/tmp/tmp4tf_4c_3.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp4tf_4c_3.cpp:36:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp4tf_4c_3.cpp:36:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp4tf_4c_3.cpp:36:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4tf_4c_3.cpp:36:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4tf_4c_3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb48rnllc.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpb48rnllc.cpp: In function 'int main()':\n/tmp/tmpb48rnllc.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpb48rnllc.cpp:2:\n/tmp/tmpb48rnllc.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpb48rnllc.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb48rnllc.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb48rnllc.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb48rnllc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        if (arr[i] != 0) {\n            sum\
    \ += std::abs(arr[i]);\n        }\n    }\n    return prod * sum;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsguwe5bw.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpsguwe5bw.cpp: In function 'int main()':\n/tmp/tmpsguwe5bw.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpsguwe5bw.cpp:2:\n/tmp/tmpsguwe5bw.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpsguwe5bw.cpp:32:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpsguwe5bw.cpp:32:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpsguwe5bw.cpp:32:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsguwe5bw.cpp:32:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsguwe5bw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum +=\
    \ i;\n        } else if (i < 0) {\n            prod *= -1;\n            sum +=\
    \ -i;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptm5cwert.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmptm5cwert.cpp: In function 'int main()':\n/tmp/tmptm5cwert.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmptm5cwert.cpp:2:\n/tmp/tmptm5cwert.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmptm5cwert.cpp:33:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmptm5cwert.cpp:33:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmptm5cwert.cpp:33:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptm5cwert.cpp:33:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptm5cwert.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp225e32qy.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmp225e32qy.cpp: In function 'int main()':\n/tmp/tmp225e32qy.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp225e32qy.cpp:2:\n/tmp/tmp225e32qy.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmp225e32qy.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmp225e32qy.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp225e32qy.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp225e32qy.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp225e32qy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += abs(i);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2o5c7dy.cpp:14:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<long> prod_signs(std::vector<long> arr) {\n ^\n\
    /tmp/tmpp2o5c7dy.cpp: In function 'int main()':\n/tmp/tmpp2o5c7dy.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = prod_signs;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpp2o5c7dy.cpp:2:\n/tmp/tmpp2o5c7dy.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n                                        ^\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n                                            \
    \                                  ^\n/tmp/tmpp2o5c7dy.cpp:35:78: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpp2o5c7dy.cpp:35:78: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp2o5c7dy.cpp:35:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp2o5c7dy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 "
  stdout: ''
