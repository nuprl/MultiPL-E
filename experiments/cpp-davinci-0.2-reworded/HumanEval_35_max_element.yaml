name: HumanEval_35_max_element
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in\
  \ the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
  // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
  \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
  long max_element(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,\
  \ (long)-10}))) == (124));\n}\n"
completions: ["    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "  assert(!l.empty());\n  long max = l[0];\n  for (long i = 1; i < l.size();\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;",
  "    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (auto i : l) {\n        if (i > max) {\n         \
    \   max = i;\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    assert(!l.empty());\n    long\
    \ max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    assert(l.size()\
    \ > 0);\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "  long max = l[0];\n  for (int i = 1; i <\
    \ l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;", "  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if\
    \ (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", "  long max =\
    \ l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n     \
    \ max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    assert(l.size() > 0);\n    long max =\
    \ l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max_elem\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_elem)\
    \ {\n            max_elem = l[i];\n        }\n    }\n    return max_elem;", " \
    \   long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    assert(l.size() > 0);\n  \
    \  long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n  for (long\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "  long max = l[0];\n  for (long i = 1; i < l.size(); i++)\
    \ {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", " \
    \   assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    assert(l.size() > 0);\n    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n\
    \  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", "  long max = l[0];\n  for (long i = 1; i < l.size();\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;",
  "    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    assert(l.size() > 0);\n  \
    \  long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n  for (int\
    \ i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    assert(l.size() > 0);\n    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n\
    \  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", "    long max = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", "    long\
    \ max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max_elem\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_elem)\
    \ {\n            max_elem = l[i];\n        }\n    }\n    return max_elem;", " \
    \   long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  assert(l.size()\
    \ > 0);\n  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n\
    \  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;", "  long max = l[0];\n  for (int i = 1; i < l.size();\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;",
  "    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "  long max = l[0];\n  for (long\
    \ i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;", '    return *std::max_element(l.begin(), l.end());', " \
    \   long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  long\
    \ max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;", "    long max = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;", "    assert(l.size() > 0);\n  \
    \  long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ assert(!l.empty());\n    long max = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "  long max = l[0];\n  for (long i = 1; i\
    \ < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n \
    \ return max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "  long max = l[0];\n  for (long i = 1; i\
    \ < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n \
    \ return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "  assert(l.size() > 0);\n  long max = l[0];\n  for (long i =\
    \ 0; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n \
    \ }\n  return max;", "    long max = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "  long max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", "    long\
    \ max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    assert(l.size()\
    \ > 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;", "    assert(l.size() > 0);\n    long max =\
    \ l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;", "    assert(l.size()\
    \ > 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if\
    \ (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", "    long max\
    \ = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "  long max\
    \ = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n  \
    \    max = l[i];\n    }\n  }\n  return max;", "  long max = l[0];\n  for (int\
    \ i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", "    long\
    \ max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;"]
stop_tokens:
- "\n}"
