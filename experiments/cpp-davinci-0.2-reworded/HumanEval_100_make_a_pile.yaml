name: HumanEval_100_make_a_pile
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n\
  // The number of stones in the next level is:\n// - the next odd number if n is\
  \ odd.\n// - the next even number if n is even.\n// Return the number of stones\
  \ in each level in a vector, where element at index\n// i represents the number\
  \ of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3,\
  \ (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\n"
tests: "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3))\
  \ == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4))\
  \ == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5))\
  \ == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n  \
  \  assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12,\
  \ (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8,\
  \ (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n"
completions: ["    std::vector<long> result;\n    long i = n;\n    while (i > 0) {\n\
    \        result.push_back(i);\n        if (i % 2 == 0) {\n            i = i /\
    \ 2;\n        } else {\n            i = (i + 1) / 2;\n        }\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  for (long i = n; i > 0; i--) {\n \
    \   result.push_back(i);\n    if (i % 2 == 0) {\n      i--;\n    }\n  }\n  return\
    \ result;", "    std::vector<long> v;\n    for(long i = 0; i < n; i++) {\n   \
    \     if(i == 0) {\n            v.push_back(n);\n        } else {\n          \
    \  if(v[i-1] % 2 == 0) {\n                v.push_back(v[i-1] + 2);\n         \
    \   } else {\n                v.push_back(v[i-1] + 1);\n            }\n      \
    \  }\n    }\n    return v;", "  std::vector<long> result;\n  for (long i = 0;\
    \ i < n; i++) {\n    result.push_back(n + 2 * i);\n  }\n  return result;", " \
    \   std::vector<long> result;\n    while (n > 0) {\n        result.push_back(n);\n\
    \        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n       \
    \     n = (n + 1) / 2;\n        }\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n    if\
    \ (i % 2 == 0) {\n      i--;\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    for (long i = n; i > 0; i--) {\n        if (i % 2 == 0) {\n   \
    \         result.push_back(i + 1);\n        } else {\n            result.push_back(i\
    \ + 2);\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        if (i % 2 == 0) {\n            result.push_back(i\
    \ + 1);\n        } else {\n            result.push_back(i + 2);\n        }\n \
    \   }\n    return result;", "  std::vector<long> result;\n  for (long i = n; i\
    \ > 0; i--) {\n    result.push_back(i);\n    if (i % 2 == 0) {\n      i--;\n \
    \   }\n  }\n  return result;", "    std::vector<long> result;\n    for (long i\
    \ = 0; i < n; i++) {\n        if (i == 0) {\n            result.push_back(n);\n\
    \        } else {\n            if (result[i - 1] % 2 == 0) {\n               \
    \ result.push_back(result[i - 1] + 2);\n            } else {\n               \
    \ result.push_back(result[i - 1] + 1);\n            }\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for (long i = n; i > 0; i--) {\n\
    \        if (i % 2 == 0) {\n            result.push_back(i + 1);\n        } else\
    \ {\n            result.push_back(i + 2);\n        }\n    }\n    return result;",
  "  std::vector<long> result;\n  while (n > 0) {\n    result.push_back(n);\n    if\
    \ (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = (n + 1) / 2;\n   \
    \ }\n  }\n  return result;", "    std::vector<long> result;\n    for (long i =\
    \ n; i > 0; i -= 2) {\n        result.push_back(i);\n    }\n    return result;",
  "  std::vector<long> result;\n  for (long i = n; i > 0; i--) {\n    result.push_back(i);\n\
    \    if (i % 2 == 0) {\n      i--;\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n\
    \        if (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;",
  "  std::vector<long> result;\n  while (n > 0) {\n    result.push_back(n);\n    if\
    \ (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = (n + 1) / 2;\n   \
    \ }\n  }\n  return result;", "    std::vector<long> v;\n    v.push_back(n);\n\
    \    while(n>1){\n        if(n%2==0){\n            n=n/2;\n            v.push_back(n);\n\
    \        }\n        else{\n            n=(n+1)/2;\n            v.push_back(n);\n\
    \        }\n    }\n    return v;", "  std::vector<long> result;\n  for (int i\
    \ = 0; i < n; i++) {\n    result.push_back(n + i * 2);\n  }\n  return result;",
  "    std::vector<long> v;\n    while(n > 0) {\n        v.push_back(n);\n       \
    \ if(n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n =\
    \ (n + 1) / 2;\n        }\n    }\n    return v;", "    std::vector<long> result;\n\
    \    for (long i = n; i > 0; i--) {\n        result.push_back(i);\n        if\
    \ (i % 2 == 0) {\n            i--;\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
