name: HumanEval_143_words_in_sentence
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing\
  \ a sentence,\n// the sentence contains some words separated by a space,\n// and\
  \ you have to return a string that contains the words from the original sentence,\n\
  // whose lengths are prime numbers,\n// the order of the words in the new string\
  \ should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"\
  This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets\
  \ go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence)\
  \ <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string\
  \ sentence) {\n"
tests: "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
  This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
  )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
  )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
  \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
  ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
  \ is\")) == (\"is\"));\n}\n"
completions: ["    std::string result;\n    std::vector<std::string> words;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length()\
    \ == 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word.length() ==\
    \ 1 || word.length() == 2) {\n            result += word + \" \";\n        } else\
    \ {\n            bool isPrime = true;\n            for (int i = 2; i < word.length();\
    \ i++) {\n                if (word.length() % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += word + \" \";\n          \
    \  }\n        }\n    }\n    return result;", "    std::string result = \"\";\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;", "    std::stringstream ss(sentence);\n    std::string\
    \ word;\n    std::string result;\n    while (ss >> word) {\n        if (is_prime(word.length()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);", "    std::stringstream ss(sentence);\n    std::string\
    \ word;\n    std::string result;\n    while (ss >> word) {\n        if (is_prime(word.length()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);", "    std::vector<std::string> words;\n    std::string\
    \ word = \"\";\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] == ' ') {\n            words.push_back(word);\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    words.push_back(word);\n    std::string result = \"\";\n    for (int\
    \ i = 0; i < words.size(); i++) {\n        bool isPrime = true;\n        for (int\
    \ j = 2; j < words[i].length(); j++) {\n            if (words[i].length() % j\
    \ == 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if (isPrime) {\n            result += words[i] + \"\
    \ \";\n        }\n    }\n    return result;", "    std::string result = \"\";\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ temp = \"\";\n    for (int i = 0; i < sentence.length(); i++) {\n        if\
    \ (sentence[i] == ' ') {\n            if (temp.length() == 2 || temp.length()\
    \ == 3 || temp.length() == 5 || temp.length() == 7) {\n                result\
    \ += temp + \" \";\n            }\n            temp = \"\";\n        } else {\n\
    \            temp += sentence[i];\n        }\n    }\n    if (temp.length() ==\
    \ 2 || temp.length() == 3 || temp.length() == 5 || temp.length() == 7) {\n   \
    \     result += temp;\n    }\n    return result;", "    std::string words[100];\n\
    \    int count = 0;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words[count++] = word;\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words[count++] = word;\n    std::string result = \"\";\n\
    \    for (int i = 0; i < count; i++) {\n        int flag = 0;\n        for (int\
    \ j = 2; j < words[i].length(); j++) {\n            if (words[i].length() % j\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \        }\n        if (flag == 0) {\n            result += words[i] + \" \";\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);", "    std::string result;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        int len = word.length();\n\
    \        bool isPrime = true;\n        for (int i = 2; i <= len / 2; i++) {\n\
    \            if (len % i == 0) {\n                isPrime = false;\n         \
    \       break;\n            }\n        }\n        if (isPrime) {\n           \
    \ result += word + \" \";\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;", "    std::string result = \"\";\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);", "    std::string result = \"\";\n    std::string word\
    \ = \"\";\n    for (int i = 0; i < sentence.length(); i++) {\n        if (sentence[i]\
    \ == ' ') {\n            if (is_prime(word.length())) {\n                result\
    \ += word + \" \";\n            }\n            word = \"\";\n        } else {\n\
    \            word += sentence[i];\n        }\n    }\n    if (is_prime(word.length()))\
    \ {\n        result += word;\n    }\n    return result;", "    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    std::string result;\n    while (ss\
    \ >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;", "    std::string result;\n    std::stringstream\
    \ ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (word.length()\
    \ == 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n\
    \            result += word + \" \";\n        }\n    }\n    return result;", "\t\
    std::string result = \"\";\n\tstd::string word = \"\";\n\tfor (int i = 0; i <\
    \ sentence.length(); i++) {\n\t\tif (sentence[i] == ' ') {\n\t\t\tif (is_prime(word.length()))\
    \ {\n\t\t\t\tresult += word + \" \";\n\t\t\t}\n\t\t\tword = \"\";\n\t\t}\n\t\t\
    else {\n\t\t\tword += sentence[i];\n\t\t}\n\t}\n\tif (is_prime(word.length()))\
    \ {\n\t\tresult += word;\n\t}\n\treturn result;", "    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (isPrime(word.length())) {\n            result += word + \" \";\n  \
    \      }\n    }\n    return result.substr(0, result.length() - 1);", "    std::string\
    \ result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length()))\
    \ {\n            result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);"]
stop_tokens:
- "\n}"
