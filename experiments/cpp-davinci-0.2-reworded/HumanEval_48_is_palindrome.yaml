name: HumanEval_48_is_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is\
  \ a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"\
  aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"\
  zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
  \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
  aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
  xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
  xywzx\")) == (false));\n}\n"
completions: ["    int len = text.length();\n    for (int i = 0; i < len / 2; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int len = text.length();\n    for (int\
    \ i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n  \
    \          return false;\n        }\n    }\n    return true;", "    int n = text.length();\n\
    \    for (int i = 0; i < n/2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;", "    int i =\
    \ 0;\n    int j = text.length() - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int i = 0;\n    int j = text.length() - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int len\
    \ = text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int len = text.length();\n    for (int i = 0; i < len/2; i++) {\n\
    \        if (text[i] != text[len-i-1]) {\n            return false;\n        }\n\
    \    }\n    return true;", "    int i = 0;\n    int j = text.length() - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int length\
    \ = text.length();\n    for (int i = 0; i < length / 2; i++) {\n        if (text[i]\
    \ != text[length - i - 1]) {\n            return false;\n        }\n    }\n  \
    \  return true;", "    int i = 0;\n    int j = text.length() - 1;\n    while (i\
    \ < j) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;", " \
    \   int n = text.length();\n    for (int i = 0; i < n/2; i++) {\n        if (text[i]\
    \ != text[n-i-1]) {\n            return false;\n        }\n    }\n    return true;",
  "    int i = 0;\n    int j = text.length() - 1;\n    while (i < j) {\n        if\
    \ (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    return true;", "    int length = text.length();\n  \
    \  for (int i = 0; i < length / 2; i++) {\n        if (text[i] != text[length\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;",
  "    int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int length = text.length();\n    for (int i = 0; i < length/2;\
    \ i++) {\n        if (text[i] != text[length-i-1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int len = text.length();\n    for (int\
    \ i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n  \
    \          return false;\n        }\n    }\n    return true;", "    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ l = text.length();\n    for (int i = 0; i < l / 2; i++) {\n        if (text[i]\
    \ != text[l - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "\tint n = text.length();\n\tfor (int i = 0; i < n / 2; i++) {\n\t\t\
    if (text[i] != text[n - i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;"]
stop_tokens:
- "\n}"
