name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
  \ if all keys are strings in lower \n// case or all keys are strings in upper case,\
  \ else return false.\n// The function should return false is the given map is empty.\n\
  // Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\"\
  , \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    std::map<std::string,std::string>::iterator it;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            upper = false;\n        else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            lower = false;\n        else\n \
    \           return false;\n    }\n    return upper || lower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_upper = false;\n        } else if(isupper(it->first[0])) {\n\
    \            is_lower = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        std::string key = it->first;\n\
    \        if(key.size() == 0) return false;\n        if(isupper(key[0])) is_upper\
    \ = true;\n        else is_lower = true;\n    }\n    return (is_lower && !is_upper)\
    \ || (!is_lower && is_upper);", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower) {\n            is_lower = is_lower\
    \ && (it->first == tolower(it->first));\n        }\n        if(is_upper) {\n \
    \           is_upper = is_upper && (it->first == toupper(it->first));\n      \
    \  }\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool upper = false;\n    bool lower = false;\n    for(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') upper = true;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\
    \ lower = true;\n    }\n    return (upper && !lower) || (!upper && lower);", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(isupper(it->first[0]))\n            is_lower = false;\n      \
    \  else\n            is_upper = false;\n    }\n    return is_lower || is_upper;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower=true;\n    bool is_upper=true;\n   \
    \ for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(islower(it->first[0]))\n\
    \            is_upper=false;\n        else\n            is_lower=false;\n    }\n\
    \    return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0) return false;\n\
    \    bool is_upper = true;\n    bool is_lower = true;\n    for(auto it=dict.begin();\
    \ it!=dict.end(); it++) {\n        if(!isupper(it->first[0])) is_upper = false;\n\
    \        if(!islower(it->first[0])) is_lower = false;\n    }\n    return is_upper\
    \ || is_lower;", "    if(dict.size() == 0) return false;\n    bool is_upper =\
    \ false;\n    bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n    }\n    return is_upper ^ is_lower;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower))\n            is_lower = false;\n        if(is_upper\
    \ && !std::all_of(it->first.begin(), it->first.end(), ::isupper))\n          \
    \  is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n  \
    \  bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(!isupper(it->first[0]))\n            is_upper = false;\n     \
    \   if(!islower(it->first[0]))\n            is_lower = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size() == 0)\n        return false;\n \
    \   bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else if(isupper(it->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return (lower || upper);",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='a' &&\
    \ it->first[0]<='z')\n        {\n            for(int i=1;i<it->first.length();i++)\n\
    \            {\n                if(it->first[i]<'a' || it->first[i]>'z')\n   \
    \             {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n        {\n            for(int i=1;i<it->first.length();i++)\n\
    \            {\n                if(it->first[i]<'A' || it->first[i]>'Z')\n   \
    \             {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;"]
stop_tokens:
- "\n}"
