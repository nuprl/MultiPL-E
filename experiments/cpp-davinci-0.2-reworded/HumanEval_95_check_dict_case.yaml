name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
  \ if all keys are strings in lower \n// case or all keys are strings in upper case,\
  \ else return false.\n// The function should return false is the given map is empty.\n\
  // Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\"\
  , \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    std::map<std::string,std::string>::iterator it;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            upper = false;\n        else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            lower = false;\n        else\n \
    \           return false;\n    }\n    return upper || lower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_upper = false;\n        } else if(isupper(it->first[0])) {\n\
    \            is_lower = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        std::string key = it->first;\n\
    \        if(key.size() == 0) return false;\n        if(isupper(key[0])) is_upper\
    \ = true;\n        else is_lower = true;\n    }\n    return (is_lower && !is_upper)\
    \ || (!is_lower && is_upper);", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower) {\n            is_lower = is_lower\
    \ && (it->first == tolower(it->first));\n        }\n        if(is_upper) {\n \
    \           is_upper = is_upper && (it->first == toupper(it->first));\n      \
    \  }\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool upper = false;\n    bool lower = false;\n    for(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') upper = true;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\
    \ lower = true;\n    }\n    return (upper && !lower) || (!upper && lower);", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(isupper(it->first[0]))\n            is_lower = false;\n      \
    \  else\n            is_upper = false;\n    }\n    return is_lower || is_upper;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    if(dict.size()==0)\n\
    \        return false;\n    bool is_lower=true;\n    bool is_upper=true;\n   \
    \ for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(islower(it->first[0]))\n\
    \            is_upper=false;\n        else\n            is_lower=false;\n    }\n\
    \    return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0) return false;\n\
    \    bool is_upper = true;\n    bool is_lower = true;\n    for(auto it=dict.begin();\
    \ it!=dict.end(); it++) {\n        if(!isupper(it->first[0])) is_upper = false;\n\
    \        if(!islower(it->first[0])) is_lower = false;\n    }\n    return is_upper\
    \ || is_lower;", "    if(dict.size() == 0) return false;\n    bool is_upper =\
    \ false;\n    bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        if(islower(it->first[0]))\
    \ is_lower = true;\n    }\n    return is_upper ^ is_lower;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower))\n            is_lower = false;\n        if(is_upper\
    \ && !std::all_of(it->first.begin(), it->first.end(), ::isupper))\n          \
    \  is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n  \
    \  bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(!isupper(it->first[0]))\n            is_upper = false;\n     \
    \   if(!islower(it->first[0]))\n            is_lower = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size() == 0)\n        return false;\n \
    \   bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            upper\
    \ = false;\n        else if(isupper(it->first[0]))\n            lower = false;\n\
    \        else\n            return false;\n    }\n    return (lower || upper);",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='a' &&\
    \ it->first[0]<='z')\n        {\n            for(int i=1;i<it->first.length();i++)\n\
    \            {\n                if(it->first[i]<'a' || it->first[i]>'z')\n   \
    \             {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n        {\n            for(int i=1;i<it->first.length();i++)\n\
    \            {\n                if(it->first[i]<'A' || it->first[i]>'Z')\n   \
    \             {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0) return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            is_upper = true;\n\
    \        }\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n       \
    \     is_lower = true;\n        }\n    }\n    return is_upper ^ is_lower;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool lower = false;\n   \
    \ bool upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0]))\n            lower = true;\n        else\
    \ if(isupper(it->first[0]))\n            upper = true;\n        else\n       \
    \     return false;\n    }\n    return lower ^ upper;", "    if(dict.size() ==\
    \ 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size()==0) return false;\n    bool flag=true;\n\
    \    for(auto i:dict){\n        if(i.first[0]>=65 && i.first[0]<=90){\n      \
    \      flag=false;\n            break;\n        }\n    }\n    if(flag) return\
    \ true;\n    flag=true;\n    for(auto i:dict){\n        if(i.first[0]>=97 && i.first[0]<=122){\n\
    \            flag=false;\n            break;\n        }\n    }\n    return flag;",
  "    if(dict.size()==0)\n        return false;\n    bool all_lower=true;\n    bool\
    \ all_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n      \
    \  if(it->first[0]>='a' && it->first[0]<='z')\n            all_upper=false;\n\
    \        else\n            all_lower=false;\n    }\n    return all_lower || all_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) {\n            is_lower = true;\n        } else if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n        else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            is_upper = true;\n        else\n\
    \            return false;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower = true;\n\
    \        }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n  \
    \          is_upper = true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    if(is_lower && is_upper)\n        return false;\n    return\
    \ true;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool is_lower=false;\n    bool is_upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            is_lower=true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper=true;\n        else\n            return false;\n    }\n\
    \    if(is_lower && is_upper)\n        return false;\n    return true;", "   \
    \ if(dict.size() == 0) return false;\n    bool upper = true;\n    bool lower =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ upper = false;\n        if(!islower(it->first[0])) lower = false;\n    }\n \
    \   return upper || lower;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    bool lower = true;\n    bool upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  upper = false;\n        } else if (isupper(it->first[0])) {\n            lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool upper = false;\n    bool lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            upper\
    \ = true;\n        else\n            lower = true;\n    }\n    return upper !=\
    \ lower;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) {\n            is_upper = true;\n\
    \        } else {\n            is_lower = true;\n        }\n    }\n    return\
    \ is_lower ^ is_upper;", "    // Your code goes here\n    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string,std::string>::iterator it;\n\
    \    bool flag = true;\n    for(it=dict.begin();it!=dict.end();it++)\n    {\n\
    \        std::string key = it->first;\n        for(int i=0;i<key.length();i++)\n\
    \        {\n            if(key[i]>=65 && key[i]<=90)\n            {\n        \
    \        flag = false;\n                break;\n            }\n        }\n   \
    \     if(flag==false)\n            break;\n    }\n    if(flag==false)\n    {\n\
    \        flag = true;\n        for(it=dict.begin();it!=dict.end();it++)\n    \
    \    {\n            std::string key = it->first;\n            for(int i=0;i<key.length();i++)\n\
    \            {\n                if(key[i]>=97 && key[i]<=122)\n              \
    \  {\n                    flag = false;\n                    break;\n        \
    \        }\n            }\n            if(flag==false)\n                break;\n\
    \        }\n    }\n    return flag;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    // Your code here\n    if(dict.size() == 0)\n  \
    \      return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_lower = false;\n        if(islower(it->first[0])) is_upper = false;\n   \
    \ }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_upper = false;\n \
    \   bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_upper ^ is_lower;",
  "    if(dict.size() == 0) return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0])) all_upper = false;\n        if(!islower(it->first[0]))\
    \ all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    bool flag1=true;\n    bool flag2=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='a'\
    \ && it->first[0]<='z')\n            flag1=true;\n        else\n        {\n  \
    \          flag1=false;\n            break;\n        }\n    }\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>='A' && it->first[0]<='Z')\n            flag2=true;\n\
    \        else\n        {\n            flag2=false;\n            break;\n     \
    \   }\n    }\n    if(flag1==true || flag2==true)\n        flag=true;\n    else\n\
    \        flag=false;\n    return flag;", "    if(dict.size() == 0) return false;\n\
    \    bool upper = true;\n    bool lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!isupper(it->first[0])) upper = false;\n\
    \        if(!islower(it->first[0])) lower = false;\n    }\n    return upper ||\
    \ lower;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) {\n            is_upper = true;\n\
    \        } else {\n            is_lower = true;\n        }\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size()==0)\n        return false;\n    bool lower=true;\n    bool upper=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\n\
    \            upper=false;\n        else if(isupper(it->first[0]))\n          \
    \  lower=false;\n        else\n            return false;\n    }\n    if(lower||upper)\n\
    \        return true;\n    return false;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    for(auto i:dict){\n        if(i.first[0]>='a'\
    \ && i.first[0]<='z'){\n            flag=true;\n            break;\n        }\n\
    \        else if(i.first[0]>='A' && i.first[0]<='Z'){\n            flag=false;\n\
    \            break;\n        }\n    }\n    for(auto i:dict){\n        if(flag){\n\
    \            if(i.first[0]>='A' && i.first[0]<='Z')\n                return false;\n\
    \        }\n        else{\n            if(i.first[0]>='a' && i.first[0]<='z')\n\
    \                return false;\n        }\n    }\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    // Your\
    \ code here\n    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto i:dict)\n    {\n        if(islower(i.first[0]))\n        {\n   \
    \         for(auto j:i.first)\n            {\n                if(!islower(j))\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else if(isupper(i.first[0]))\n\
    \        {\n            for(auto j:i.first)\n            {\n                if(!isupper(j))\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return lower || upper;", "  if (dict.size()\
    \ == 0) {\n    return false;\n  }\n  bool lower = true;\n  bool upper = true;\n\
    \  for (auto it = dict.begin(); it != dict.end(); it++) {\n    if (it->first[0]\
    \ < 'a' || it->first[0] > 'z') {\n      lower = false;\n    }\n    if (it->first[0]\
    \ < 'A' || it->first[0] > 'Z') {\n      upper = false;\n    }\n  }\n  return lower\
    \ || upper;", "\tif(dict.size() == 0) return false;\n\tbool is_lower = false;\n\
    \tbool is_upper = false;\n\tfor(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n\t\tif(isupper(it->first[0])) is_upper = true;\n\t\telse is_lower = true;\n\
    \t}\n\treturn is_lower ^ is_upper;", "    if(dict.size()==0) return false;\n \
    \   bool is_lower=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0])){\n            is_lower=true;\n            break;\n\
    \        }\n        else if(isupper(it->first[0])){\n            is_lower=false;\n\
    \            break;\n        }\n    }\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(is_lower){\n            if(!islower(it->first[0])) return false;\n\
    \        }\n        else{\n            if(!isupper(it->first[0])) return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "   \
    \ if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n  \
    \  bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else if(isupper(it->first[0]))\n            is_upper = true;\n        else\n\
    \            return false;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return (is_lower && !is_upper)\
    \ || (!is_lower && is_upper);", "    if(dict.size()==0)\n        return false;\n\
    \    bool is_lower=false;\n    bool is_upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(isupper(it->first[0]))\n            is_upper=true;\n        else\n\
    \            is_lower=true;\n    }\n    if(is_lower && is_upper)\n        return\
    \ false;\n    return true;", "    if(dict.size()==0) return false;\n    bool all_lower=true;\n\
    \    bool all_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        std::string key=it->first;\n        for(int i=0;i<key.size();i++){\n\
    \            if(isupper(key[i])){\n                all_lower=false;\n        \
    \    }\n            else if(islower(key[i])){\n                all_upper=false;\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n    }\n    return all_lower || all_upper;", "    // Your code\
    \ here\n    if(dict.size()==0)\n        return false;\n    bool upper = true;\n\
    \    bool lower = true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(!isupper(it->first[0]))\n            upper = false;\n        if(!islower(it->first[0]))\n\
    \            lower = false;\n    }\n    if(upper || lower)\n        return true;\n\
    \    return false;", "    if(dict.size()==0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto it=dict.begin(); it!=dict.end();\
    \ it++) {\n        if(it->first.size()==0) return false;\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool flag = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) {\n            for(int\
    \ i = 0; i < it->first.size(); i++) {\n                if(!islower(it->first[i]))\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n        }\n        else if(isupper(it->first[0])) {\n\
    \            for(int i = 0; i < it->first.size(); i++) {\n                if(!isupper(it->first[i]))\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n        }\n        else {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool upper = false;\n    bool lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'A' && it->first[0] <=\
    \ 'Z')\n            upper = true;\n        else if(it->first[0] >= 'a' && it->first[0]\
    \ <= 'z')\n            lower = true;\n        else\n            return false;\n\
    \    }\n    if(upper && lower)\n        return false;\n    return true;", "  \
    \  if(dict.size() == 0)\n        return false;\n    bool lower = false;\n    bool\
    \ upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(islower(it->first[0]))\n            lower = true;\n        else if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            return false;\n    }\n \
    \   return lower ^ upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_upper = false;\n        if(isupper(it->first[0]))\n          \
    \  is_lower = false;\n    }\n    return is_upper || is_lower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_upper\
    \ = false;\n    bool is_lower = false;\n    for(auto &i : dict) {\n        if(isupper(i.first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_upper ^ is_lower;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z')\n            is_upper = true;\n        else if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n        else\n\
    \            return false;\n    }\n    if(is_upper && is_lower)\n        return\
    \ false;\n    return true;", "    if(dict.size()==0)\n        return false;\n\
    \    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n   \
    \     if(islower(it->first[0])){\n            for(int i=0;i<it->first.length();i++){\n\
    \                if(!islower(it->first[i])){\n                    flag=false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     else if(isupper(it->first[0])){\n            for(int i=0;i<it->first.length();i++){\n\
    \                if(!isupper(it->first[i])){\n                    flag=false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     else{\n            flag=false;\n            break;\n        }\n    }\n \
    \   return flag;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n  \
    \      if(isupper(it->first[0])) is_upper = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] >= 'a'\
    \ && it->first[0] <= 'z') {\n            is_lower = true;\n        } else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(islower(it->first[0]))\n\
    \        {\n            for(int i=0;i<it->first.length();i++)\n            {\n\
    \                if(!islower(it->first[i]))\n                {\n             \
    \       flag=false;\n                    break;\n                }\n         \
    \   }\n        }\n        else if(isupper(it->first[0]))\n        {\n        \
    \    for(int i=0;i<it->first.length();i++)\n            {\n                if(!isupper(it->first[i]))\n\
    \                {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   bool upper = true;\n    bool lower = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first.size() == 0) {\n          \
    \  return false;\n        }\n        if (it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            upper = false;\n        }\n        if (it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            lower = false;\n        }\n    }\n  \
    \  return upper || lower;", "    if(dict.size()==0) return false;\n    bool upper=true;\n\
    \    bool lower=true;\n    for(auto i:dict){\n        if(islower(i.first[0])){\n\
    \            upper=false;\n        }\n        else{\n            lower=false;\n\
    \        }\n    }\n    return upper||lower;", "    if(dict.size() == 0)\n    \
    \    return false;\n    bool is_lower = false;\n    bool is_upper = false;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size() ==\
    \ 0)\n        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool isUpper = true;\n    bool isLower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            isUpper = false;\n        if(!islower(it->first[0]))\n          \
    \  isLower = false;\n    }\n    return isUpper || isLower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_lower\
    \ = false;\n        else\n            is_upper = false;\n    }\n    return is_lower\
    \ || is_upper;", "    std::map<std::string,std::string>::iterator it;\n    bool\
    \ upper = true;\n    bool lower = true;\n    for (it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (it->first[0] >= 'a' && it->first[0] <= 'z') {\n       \
    \     upper = false;\n        }\n        if (it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            lower = false;\n        }\n    }\n    return upper ||\
    \ lower;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_lower && !(islower(it->first[0])))\n            is_lower\
    \ = false;\n        if(is_upper && !(isupper(it->first[0])))\n            is_upper\
    \ = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            lower = true;\n        } else if(isupper(it->first[0])) {\n \
    \           upper = true;\n        } else {\n            return false;\n     \
    \   }\n    }\n    return lower ^ upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_upper ^ is_lower;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else if(islower(it->first[0]))\n      \
    \      is_lower = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    // Your code here\n    if(dict.size() == 0)\n  \
    \      return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++)\n    {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ lower = false;\n    bool upper = false;\n    for(auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n        if(islower(it->first[0]))\n            lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            upper = true;\n\
    \        else\n            return false;\n    }\n    return lower ^ upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size()==0)\n        return false;\n    bool is_lower = true;\n   \
    \ bool is_upper = true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            is_upper = false;\n        else\
    \ if(isupper(it->first[0]))\n            is_lower = false;\n        else\n   \
    \         return false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    int upper = 0, lower = 0;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper++;\n        else if(islower(it->first[0]))\n            lower++;\n\
    \        else\n            return false;\n    }\n    if(upper == 0 || lower ==\
    \ 0)\n        return true;\n    return false;", "    if(dict.size()==0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n        else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            is_upper = true;\n        else\n\
    \            return false;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()==0)\
    \ return false;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        if(islower(it->first[0])) is_lower = true;\n    }\n\
    \    return is_upper ^ is_lower;", "    if(dict.size()==0)\n        return false;\n\
    \    std::map<std::string,std::string>::iterator it;\n    bool lower=true;\n \
    \   bool upper=true;\n    for(it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\n\
    \            upper=false;\n        else if(isupper(it->first[0]))\n          \
    \  lower=false;\n        else\n            return false;\n    }\n    if(lower\
    \ || upper)\n        return true;\n    return false;", "    if(dict.size() ==\
    \ 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    std::string first_key = dict.begin()->first;\n\
    \    bool is_lower = std::islower(first_key[0]);\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower) {\n            if(!std::islower(it->first[0]))\
    \ return false;\n        } else {\n            if(!std::isupper(it->first[0]))\
    \ return false;\n        }\n    }\n    return true;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(islower(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else if(isupper(it->first[0]))\n      \
    \  {\n            for(int i=0;i<it->first.length();i++)\n            {\n     \
    \           if(!isupper(it->first[i]))\n                {\n                  \
    \  flag=false;\n                    break;\n                }\n            }\n\
    \        }\n        else\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    return flag;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool is_upper = true;\n    bool is_lower = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_upper || is_lower;", "    if(dict.size() == 0) return false;\n\
    \    bool lower = false;\n    bool upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) lower = true;\n\
    \        else if(isupper(it->first[0])) upper = true;\n        else return false;\n\
    \    }\n    return lower ^ upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0])) is_upper = false;\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()==0)\n\
    \        return false;\n    bool lower=true;\n    bool upper=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++){\n        if(islower(it->first[0]))\n \
    \           upper=false;\n        else\n            lower=false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n  \
    \      else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size()\
    \ == 0) return false;\n        if(islower(it->first[0])) is_lower = true;\n  \
    \      if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool upper\
    \ = true;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0]))\n            upper = false;\n  \
    \      if(!islower(it->first[0]))\n            lower = false;\n    }\n    return\
    \ upper || lower;", "    if(dict.size()==0) return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(all_lower && !islower(it->first[0])) all_lower = false;\n\
    \        if(all_upper && !isupper(it->first[0])) all_upper = false;\n    }\n \
    \   return all_lower || all_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool upper = false;\n    bool lower = false;\n    for(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;", "    if(dict.size()==0)\n        return false;\n \
    \   bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n\
    \        if(islower(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(!islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else if(isupper(it->first[0]))\n      \
    \  {\n            for(int i=0;i<it->first.length();i++)\n            {\n     \
    \           if(!isupper(it->first[i]))\n                {\n                  \
    \  flag=false;\n                    break;\n                }\n            }\n\
    \        }\n        else\n        {\n            flag=false;\n            break;\n\
    \        }\n    }\n    return flag;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool lower=false,upper=false;\n    for(auto x:dict){\n        if(islower(x.first[0]))\n\
    \            lower=true;\n        else if(isupper(x.first[0]))\n            upper=true;\n\
    \        else\n            return false;\n    }\n    if(lower && upper)\n    \
    \    return false;\n    return true;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            is_upper = false;\n        if(!islower(it->first[0]))\n         \
    \   is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            is_upper = true;\n\
    \        else if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            is_lower\
    \ = true;\n        else\n            return false;\n    }\n    if(is_upper &&\
    \ is_lower)\n        return false;\n    return true;", "    if(dict.size() ==\
    \ 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper =\
    \ true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            all_upper = false;\n        if(!islower(it->first[0]))\n        \
    \    all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            lower = false;\n        else\n            upper = false;\n    }\n\
    \    return lower || upper;", "    // your code here\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag = true;\n    for(auto i:dict){\n       \
    \ if(i.first[0]>='a' && i.first[0]<='z'){\n            for(int j=0;j<i.first.length();j++){\n\
    \                if(i.first[j]<'a' || i.first[j]>'z'){\n                    flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        else if(i.first[0]>='A' && i.first[0]<='Z'){\n            for(int\
    \ j=0;j<i.first.length();j++){\n                if(i.first[j]<'A' || i.first[j]>'Z'){\n\
    \                    flag = false;\n                    break;\n             \
    \   }\n            }\n        }\n        else{\n            flag = false;\n  \
    \          break;\n        }\n    }\n    return flag;", "    if(dict.size() ==\
    \ 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(std::map<std::string,std::string>::iterator\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            lower = true;\n        } else if(isupper(it->first[0])) {\n \
    \           upper = true;\n        } else {\n            return false;\n     \
    \   }\n    }\n    return lower ^ upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n\
    \        if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0])) upper = false;\n        if(isupper(it->first[0]))\
    \ lower = false;\n    }\n    return lower || upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            is_lower = true;\n        else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            is_upper = true;\n        else\n\
    \            return false;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = true;\n    bool lower = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return upper || lower;", "    if(dict.size()==0)\n        return false;\n\
    \    bool lower=true;\n    bool upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            upper=false;\n        else if(isupper(it->first[0]))\n\
    \            lower=false;\n        else\n            return false;\n    }\n  \
    \  if(lower || upper)\n        return true;\n    return false;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !is_upper) {\n           \
    \ if(!isupper(it->first[0]))\n                return false;\n        }\n     \
    \   else if(!is_lower && is_upper) {\n            if(!islower(it->first[0]))\n\
    \                return false;\n        }\n        else {\n            if(islower(it->first[0]))\n\
    \                is_upper = false;\n            else if(isupper(it->first[0]))\n\
    \                is_lower = false;\n            else\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size() == 0) return false;\n\
    \    std::string first_key = dict.begin()->first;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    if(first_key[0] >= 'a' && first_key[0] <= 'z')\
    \ {\n        is_lower = true;\n    } else if(first_key[0] >= 'A' && first_key[0]\
    \ <= 'Z') {\n        is_upper = true;\n    } else {\n        return false;\n \
    \   }\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        if(is_lower) {\n            if(key[0] < 'a' || key[0]\
    \ > 'z') {\n                return false;\n            }\n        } else if(is_upper)\
    \ {\n            if(key[0] < 'A' || key[0] > 'Z') {\n                return false;\n\
    \            }\n        }\n    }\n    return true;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n        \
    \    is_upper = false;\n        } else if(it->first[0] >= 'A' && it->first[0]\
    \ <= 'Z') {\n            is_lower = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        for(int i = 0; i < key.size(); i++) {\n          \
    \  if(isupper(key[i])) is_lower = false;\n            if(islower(key[i])) is_upper\
    \ = false;\n        }\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ (lower || upper);", "    if(dict.size()==0)\n        return false;\n    bool\
    \ flag=true;\n    for(auto i=dict.begin();i!=dict.end();i++)\n    {\n        if(i->first[0]>='a'\
    \ && i->first[0]<='z')\n        {\n            for(int j=0;j<i->first.length();j++)\n\
    \            {\n                if(i->first[j]<'a' || i->first[j]>'z')\n     \
    \           {\n                    flag=false;\n                    break;\n \
    \               }\n            }\n        }\n        else if(i->first[0]>='A'\
    \ && i->first[0]<='Z')\n        {\n            for(int j=0;j<i->first.length();j++)\n\
    \            {\n                if(i->first[j]<'A' || i->first[j]>'Z')\n     \
    \           {\n                    flag=false;\n                    break;\n \
    \               }\n            }\n        }\n        else\n        {\n       \
    \     flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool upper = false;\n   \
    \ bool lower = false;\n    for(auto i : dict) {\n        if(islower(i.first[0]))\n\
    \            lower = true;\n        else\n            upper = true;\n    }\n \
    \   return (upper && lower) ? false : true;", "    if(dict.size()==0) return false;\n\
    \    bool lower=true;\n    bool upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0])) upper=false;\n        else lower=false;\n \
    \   }\n    return lower || upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool lower = true;\n    bool upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!islower(it->first[0]))\n            lower\
    \ = false;\n        if(!isupper(it->first[0]))\n            upper = false;\n \
    \   }\n    return lower || upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool lower = true;\n    bool\
    \ upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n \
    \       if(islower(it->first[0]))\n            upper = false;\n        else\n\
    \            lower = false;\n    }\n    return lower || upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size()==0)\n        return false;\n    bool upper\
    \ = true;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            upper = false;\n   \
    \     else\n            lower = false;\n    }\n    return upper || lower;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "\tif(dict.size() == 0)\n\t\treturn false;\n\tbool is_lower = false;\n\tbool is_upper\
    \ = false;\n\tfor(auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif(islower(it->first[0]))\n\
    \t\t\tis_lower = true;\n\t\telse if(isupper(it->first[0]))\n\t\t\tis_upper = true;\n\
    \t\telse\n\t\t\treturn false;\n\t}\n\treturn is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first.length() == 0)\n            return false;\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    if(is_lower && is_upper)\n        return false;\n    return true;",
  "    bool lower = true;\n    bool upper = true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  upper = false;\n        } else if (isupper(it->first[0])) {\n            lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return lower || upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <=\
    \ 'z') {\n            is_lower = true;\n        } else if(it->first[0] >= 'A'\
    \ && it->first[0] <= 'Z') {\n            is_upper = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    // Your code here\n    if(dict.size()==0)\n        return false;\n    bool\
    \ flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n     \
    \   if(it->first[0]>='a' && it->first[0]<='z')\n        {\n            for(int\
    \ i=1;i<it->first.length();i++)\n            {\n                if(it->first[i]<'a'\
    \ || it->first[i]>'z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else if(it->first[0]>='A' && it->first[0]<='Z')\n        {\n            for(int\
    \ i=1;i<it->first.length();i++)\n            {\n                if(it->first[i]<'A'\
    \ || it->first[i]>'Z')\n                {\n                    flag=false;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    else\n        {\n            flag=false;\n            break;\n        }\n\
    \    }\n    return flag;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n        }\n        else {\n            is_upper = false;\n\
    \        }\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool upper = true;\n    bool lower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            upper = false;\n        if(!islower(it->first[0]))\n            lower\
    \ = false;\n    }\n    return upper || lower;", "    if(dict.size() == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0] >= 'a'\
    \ && it->first[0] <= 'z') {\n            all_upper = false;\n        } else if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z') {\n            all_lower = false;\n        }\
    \ else {\n            return false;\n        }\n    }\n    return all_lower ||\
    \ all_upper;", "    if(dict.size()==0)\n        return false;\n    bool is_lower=false;\n\
    \    bool is_upper=false;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            is_lower=true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper=true;\n        else\n            return false;\n    }\n\
    \    if(is_lower && is_upper)\n        return false;\n    return true;", "   \
    \ if(dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0])) is_upper = false;\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            is_upper = true;\n        } else {\n            is_lower = true;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size()==0) return false;\n\
    \    bool is_lower=true;\n    bool is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(is_lower){\n            if(isupper(it->first[0])){\n             \
    \   is_lower=false;\n            }\n        }\n        if(is_upper){\n       \
    \     if(islower(it->first[0])){\n                is_upper=false;\n          \
    \  }\n        }\n    }\n    return is_lower||is_upper;", "    if(dict.size() ==\
    \ 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n   \
    \ for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower &&\
    \ !std::all_of(it->first.begin(), it->first.end(), ::islower)) {\n           \
    \ is_lower = false;\n        }\n        if(is_upper && !std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n            is_upper = false;\n        }\n \
    \   }\n    return is_lower || is_upper;", "    // Your code here\n    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++)\n    {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size() == 0)\n        return false;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else if(islower(it->first[0]))\n            is_lower = true;\n\
    \        else\n            return false;\n    }\n    if(is_upper && is_lower)\n\
    \        return false;\n    return true;", "    if(dict.size() == 0) return false;\n\
    \    bool upper = false;\n    bool lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) upper = true;\n\
    \        else lower = true;\n    }\n    return (upper && !lower) || (!upper &&\
    \ lower);", "    if(dict.size() == 0)\n        return false;\n    std::map<std::string,std::string>::iterator\
    \ it;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    if(is_lower && is_upper)\n\
    \        return false;\n    return true;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool lower = true;\n    bool upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else if(isupper(it->first[0]))\n        \
    \    lower = false;\n        else\n            return false;\n    }\n    return\
    \ lower || upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) {\n            is_lower\
    \ = true;\n        } else if(isupper(it->first[0])) {\n            is_upper =\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size()==0)\n        return false;\n    bool\
    \ is_lower=true;\n    bool is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            is_upper=false;\n        else\n\
    \            is_lower=false;\n    }\n    return is_lower||is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            upper = true;\n        else if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            lower = true;\n        else\n  \
    \          return false;\n    }\n    if(upper && lower)\n        return false;\n\
    \    return true;", "    if(dict.size() == 0) return false;\n    bool upper =\
    \ false;\n    bool lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n        \
    \    upper = true;\n        }\n        else if(it->first[0] >= 'a' && it->first[0]\
    \ <= 'z') {\n            lower = true;\n        }\n        else {\n          \
    \  return false;\n        }\n    }\n    return upper ^ lower;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool lower\
    \ = true;\n    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            upper = false;\n   \
    \     else\n            lower = false;\n    }\n    return lower || upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool lower = false;\n   \
    \ bool upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0]))\n            lower = true;\n        else\
    \ if(isupper(it->first[0]))\n            upper = true;\n        else\n       \
    \     return false;\n    }\n    return lower != upper;", "    if(dict.size() ==\
    \ 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(it->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() ==\
    \ 0) return false;\n        if(islower(it->first[0])) is_lower = true;\n     \
    \   if(isupper(it->first[0])) is_upper = true;\n    }\n    return (is_lower &&\
    \ !is_upper) || (!is_lower && is_upper);", "    if(dict.size() == 0) return false;\n\
    \    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!isupper(it->first[0])) all_upper = false;\n\
    \        if(!islower(it->first[0])) all_lower = false;\n    }\n    return all_lower\
    \ || all_upper;", "    if(dict.size() == 0) return false;\n    bool lower = true;\n\
    \    bool upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(islower(it->first[0])) upper = false;\n        if(isupper(it->first[0]))\
    \ lower = false;\n    }\n    return lower || upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool isUpper = false;\n    bool isLower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            isUpper = true;\n        else if(islower(it->first[0]))\n       \
    \     isLower = true;\n        else\n            return false;\n    }\n    if(isUpper\
    \ && isLower)\n        return false;\n    return true;", "    if(dict.size() ==\
    \ 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n \
    \   for(auto i: dict) {\n        if(isupper(i.first[0])) {\n            is_upper\
    \ = true;\n        } else {\n            is_lower = true;\n        }\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return (is_lower && !is_upper)\
    \ || (!is_lower && is_upper);", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_lower = false;\n\
    \        if(islower(it->first[0])) is_upper = false;\n    }\n    return is_lower\
    \ || is_upper;", "\tif(dict.size() == 0)\n\t\treturn false;\n\tbool is_lower =\
    \ false;\n\tbool is_upper = false;\n\tfor(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tif(islower(it->first[0]))\n\t\t\tis_lower = true;\n\t\telse if(isupper(it->first[0]))\n\
    \t\t\tis_upper = true;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_lower = false;\n        if(islower(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool lower = true;\n    bool upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            upper = false;\n\
    \        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n           \
    \ lower = false;\n        } else {\n            return false;\n        }\n   \
    \ }\n    return lower || upper;", "    if(dict.size() == 0) return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first.size() == 0) return false;\n\
    \        if(it->first[0] >= 'a' && it->first[0] <= 'z') is_lower = true;\n   \
    \     if(it->first[0] >= 'A' && it->first[0] <= 'Z') is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool lower = false;\n    bool\
    \ upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(islower(it->first[0]))\n            lower = true;\n        else if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            return false;\n    }\n \
    \   return lower ^ upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ upper = true;\n    bool lower = true;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(!isupper(it->first[0])) upper = false;\n   \
    \     if(!islower(it->first[0])) lower = false;\n    }\n    return upper || lower;",
  "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ i=dict.begin();i!=dict.end();i++)\n    {\n        if(i->first[0]>='a' && i->first[0]<='z')\n\
    \        {\n            for(int j=0;j<i->first.length();j++)\n            {\n\
    \                if(i->first[j]<'a' || i->first[j]>'z')\n                {\n \
    \                   flag=false;\n                    break;\n                }\n\
    \            }\n        }\n        else if(i->first[0]>='A' && i->first[0]<='Z')\n\
    \        {\n            for(int j=0;j<i->first.length();j++)\n            {\n\
    \                if(i->first[j]<'A' || i->first[j]>'Z')\n                {\n \
    \                   flag=false;\n                    break;\n                }\n\
    \            }\n        }\n        else\n        {\n            flag=false;\n\
    \            break;\n        }\n    }\n    return flag;", "    if(dict.size()==0)\n\
    \        return false;\n    bool upper = false;\n    bool lower = false;\n   \
    \ for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first[0]\
    \ >= 'A' && it->first[0] <= 'Z')\n            upper = true;\n        else if(it->first[0]\
    \ >= 'a' && it->first[0] <= 'z')\n            lower = true;\n        else\n  \
    \          return false;\n    }\n    if(upper && lower)\n        return false;\n\
    \    return true;", "    if(dict.size()==0)\n        return false;\n    bool is_upper=true;\n\
    \    bool is_lower=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(it->first[0]>='a' && it->first[0]<='z')\n            is_upper=false;\n\
    \        else if(it->first[0]>='A' && it->first[0]<='Z')\n            is_lower=false;\n\
    \        else\n            return false;\n    }\n    return is_lower || is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_upper = false;\n    bool is_lower\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            is_upper = true;\n\
    \        else if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            is_lower\
    \ = true;\n        else\n            return false;\n    }\n    if(is_upper &&\
    \ is_lower)\n        return false;\n    return true;"]
stop_tokens:
- "\n}"
