language: cpp
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            ret.push_back(i);\n        }\n \
    \   }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcuivcqg.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpwcuivcqg.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpwcuivcqg.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return ret;\n     ^\n/tmp/tmpwcuivcqg.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpwcuivcqg.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpwcuivcqg.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpwcuivcqg.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpwcuivcqg.cpp: In function 'int main()':\n/tmp/tmpwcuivcqg.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcuivcqg.cpp:2:\n/tmp/tmpwcuivcqg.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwcuivcqg.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwcuivcqg.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwcuivcqg.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwcuivcqg.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ x : l) {\n        if (x > 0) {\n            res.push_back(x);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ep0z693.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp0ep0z693.cpp:10:15: error: 'x' does not name a type\n     for\
    \ (auto x : l) {\n               ^\n/tmp/tmp0ep0z693.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmp0ep0z693.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp0ep0z693.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp0ep0z693.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp0ep0z693.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmp0ep0z693.cpp: In function 'int main()':\n/tmp/tmp0ep0z693.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ep0z693.cpp:2:\n/tmp/tmp0ep0z693.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp0ep0z693.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp0ep0z693.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0ep0z693.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp0ep0z693.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n     \
    \       result.push_back(*it);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_us5341l.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp_us5341l.cpp:10:15: error: 'it' does not name a type\n    \
    \ for (auto it = l.begin(); it != l.end(); ++it) {\n               ^\n/tmp/tmp_us5341l.cpp:10:31:\
    \ error: expected ';' before 'it'\n     for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n                               ^\n/tmp/tmp_us5341l.cpp:10:31: error:\
    \ 'it' was not declared in this scope\n/tmp/tmp_us5341l.cpp: In function 'int\
    \ main()':\n/tmp/tmp_us5341l.cpp:18:10: error: 'candidate' does not name a type\n\
    \     auto candidate = get_positive;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_us5341l.cpp:2:\n/tmp/tmp_us5341l.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp_us5341l.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp_us5341l.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_us5341l.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp_us5341l.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_us5341l.cpp:2:\n/usr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu6nb593.cpp: In function 'int main()':\n/tmp/tmpwu6nb593.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/tmp/tmpwu6nb593.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwu6nb593.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwu6nb593.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwu6nb593.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwu6nb593.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxn3ufits.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpxn3ufits.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpxn3ufits.cpp:\
    \ In function 'int main()':\n/tmp/tmpxn3ufits.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxn3ufits.cpp:2:\n/tmp/tmpxn3ufits.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpxn3ufits.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpxn3ufits.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxn3ufits.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpxn3ufits.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpxn3ufits.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto x : l) {\n        if (x > 0) {\n            result.push_back(x);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6lu2adq.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpg6lu2adq.cpp:10:15: error: 'x' does not name a type\n     for\
    \ (auto x : l) {\n               ^\n/tmp/tmpg6lu2adq.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpg6lu2adq.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpg6lu2adq.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpg6lu2adq.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpg6lu2adq.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpg6lu2adq.cpp: In function 'int main()':\n/tmp/tmpg6lu2adq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg6lu2adq.cpp:2:\n/tmp/tmpg6lu2adq.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpg6lu2adq.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpg6lu2adq.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg6lu2adq.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpg6lu2adq.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for(long\
    \ i=0;i<l.size();i++){\n        if(l[i]>0){\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwo2v_jq.cpp: In function 'int main()':\n/tmp/tmpkwo2v_jq.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwo2v_jq.cpp:2:\n/tmp/tmpkwo2v_jq.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpkwo2v_jq.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpkwo2v_jq.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkwo2v_jq.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpkwo2v_jq.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpkwo2v_jq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> result;\n\tfor (auto\
    \ i : l) {\n\t\tif (i > 0) {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmo4q1u_d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpmo4q1u_d.cpp:10:12: error: 'i' does not name a type\n  for\
    \ (auto i : l) {\n            ^\n/tmp/tmpmo4q1u_d.cpp:15:2: error: expected ';'\
    \ before 'return'\n  return result;\n  ^\n/tmp/tmpmo4q1u_d.cpp:15:2: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpmo4q1u_d.cpp:15:2: error: expected\
    \ ';' before 'return'\n/tmp/tmpmo4q1u_d.cpp:15:2: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmo4q1u_d.cpp:15:2: error: expected ')' before 'return'\n\
    /tmp/tmpmo4q1u_d.cpp: In function 'int main()':\n/tmp/tmpmo4q1u_d.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmo4q1u_d.cpp:2:\n/tmp/tmpmo4q1u_d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpmo4q1u_d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpmo4q1u_d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmo4q1u_d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpmo4q1u_d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0g63e96.cpp: In function 'int main()':\n/tmp/tmpj0g63e96.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj0g63e96.cpp:2:\n/tmp/tmpj0g63e96.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpj0g63e96.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpj0g63e96.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj0g63e96.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj0g63e96.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj0g63e96.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu6nb593.cpp: In function 'int main()':\n/tmp/tmpwu6nb593.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/tmp/tmpwu6nb593.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwu6nb593.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwu6nb593.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwu6nb593.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwu6nb593.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n     \
    \       result.push_back(*it);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_us5341l.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp_us5341l.cpp:10:15: error: 'it' does not name a type\n    \
    \ for (auto it = l.begin(); it != l.end(); ++it) {\n               ^\n/tmp/tmp_us5341l.cpp:10:31:\
    \ error: expected ';' before 'it'\n     for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n                               ^\n/tmp/tmp_us5341l.cpp:10:31: error:\
    \ 'it' was not declared in this scope\n/tmp/tmp_us5341l.cpp: In function 'int\
    \ main()':\n/tmp/tmp_us5341l.cpp:18:10: error: 'candidate' does not name a type\n\
    \     auto candidate = get_positive;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_us5341l.cpp:2:\n/tmp/tmp_us5341l.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp_us5341l.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp_us5341l.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_us5341l.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp_us5341l.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_us5341l.cpp:2:\n/usr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzd86xoo3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> result;\n  for (auto\
    \ i : l) {\n    if (i > 0) {\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiquzf1hg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i: l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7u9mv8rt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i: l) {\n        if (i > 0) {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb343esdy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747189
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0g63e96.cpp: In function 'int main()':\n/tmp/tmpj0g63e96.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj0g63e96.cpp:2:\n/tmp/tmpj0g63e96.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpj0g63e96.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpj0g63e96.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj0g63e96.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpj0g63e96.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj0g63e96.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxn3ufits.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpxn3ufits.cpp:10:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : l) {\n                   ^\n/tmp/tmpxn3ufits.cpp:\
    \ In function 'int main()':\n/tmp/tmpxn3ufits.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_positive;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxn3ufits.cpp:2:\n/tmp/tmpxn3ufits.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpxn3ufits.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpxn3ufits.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxn3ufits.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpxn3ufits.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpxn3ufits.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputI"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzd86xoo3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto i\
    \ : l) {\n    if (i > 0) {\n      res.push_back(i);\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoaupcc0l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            ret.push_back(i);\n        }\n \
    \   }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcuivcqg.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmpwcuivcqg.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmpwcuivcqg.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return ret;\n     ^\n/tmp/tmpwcuivcqg.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpwcuivcqg.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpwcuivcqg.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpwcuivcqg.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmpwcuivcqg.cpp: In function 'int main()':\n/tmp/tmpwcuivcqg.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcuivcqg.cpp:2:\n/tmp/tmpwcuivcqg.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwcuivcqg.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwcuivcqg.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwcuivcqg.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwcuivcqg.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu6nb593.cpp: In function 'int main()':\n/tmp/tmpwu6nb593.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/tmp/tmpwu6nb593.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwu6nb593.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwu6nb593.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwu6nb593.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwu6nb593.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> result;\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tresult.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp43bglk3x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747189
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6emcd4li.cpp: In function 'int main()':\n/tmp/tmp6emcd4li.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/tmp/tmp6emcd4li.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp6emcd4li.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp6emcd4li.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6emcd4li.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp6emcd4li.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6emcd4li.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu6nb593.cpp: In function 'int main()':\n/tmp/tmpwu6nb593.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/tmp/tmpwu6nb593.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwu6nb593.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwu6nb593.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwu6nb593.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwu6nb593.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu6nb593.cpp: In function 'int main()':\n/tmp/tmpwu6nb593.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/tmp/tmpwu6nb593.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwu6nb593.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwu6nb593.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwu6nb593.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwu6nb593.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu6nb593.cpp: In function 'int main()':\n/tmp/tmpwu6nb593.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/tmp/tmpwu6nb593.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpwu6nb593.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpwu6nb593.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwu6nb593.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwu6nb593.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwu6nb593.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> result;\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tresult.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp43bglk3x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747189
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>0){\n            v.push_back(l[i]);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzd86xoo3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptltno57.cpp: In function 'int main()':\n/tmp/tmpptltno57.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/tmp/tmpptltno57.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmpptltno57.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmpptltno57.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpptltno57.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpptltno57.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpptltno57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i: l) {\n        if (i > 0) {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb343esdy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747189
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprtfi5zo2.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmprtfi5zo2.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return res;\n     ^\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error:\
    \ expected ';' before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprtfi5zo2.cpp:15:5: error: expected ')' before 'return'\n\
    /tmp/tmprtfi5zo2.cpp: In function 'int main()':\n/tmp/tmprtfi5zo2.cpp:18:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = get_positive;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprtfi5zo2.cpp:2:\n/tmp/tmprtfi5zo2.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmprtfi5zo2.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmprtfi5zo2.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmprtfi5zo2.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (int i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp12q386sr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747188
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
    \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n\
    // >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
    \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0) {\n            result.push_back(i);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tbhji1d.cpp: In function 'std::vector<long int> get_positive(std::vector<long\
    \ int>)':\n/tmp/tmp8tbhji1d.cpp:10:15: error: 'i' does not name a type\n     for\
    \ (auto i : l) {\n               ^\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8tbhji1d.cpp:15:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8tbhji1d.cpp: In function 'int main()':\n/tmp/tmp8tbhji1d.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_positive;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8tbhji1d.cpp:2:\n/tmp/tmp8tbhji1d.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                        ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4,\
    \ (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \                                                                            \
    \            ^\n/tmp/tmp8tbhji1d.cpp:19:88: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8tbhji1d.cpp:19:88:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp8tbhji1d.cpp:19:88: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \          "
  stdout: ''
