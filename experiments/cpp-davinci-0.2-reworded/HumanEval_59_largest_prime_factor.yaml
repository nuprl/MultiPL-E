name: HumanEval_59_largest_prime_factor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
  // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
  \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
  \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
  }\n"
completions: ["    long largest_factor = 1;\n    for (long i = 2; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            largest_factor = i;\n            n /=\
    \ i;\n            i--;\n        }\n    }\n    return largest_factor;", "    long\
    \ largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            largest = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest;", "    long largest_prime = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return largest_prime;", "    long largest = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n      \
    \      n /= i;\n            i = 1;\n        }\n    }\n    return largest;", " \
    \   long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if (n > largest_prime_factor) {\n\
    \        largest_prime_factor = n;\n    }\n    return largest_prime_factor;",
  "    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n        \
    \    n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;", "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;", "    long i;\n    for (i = 2; i < n; i++) {\n      \
    \  if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n    }\n\
    \    return i;", "    long i = 2;\n    while (i * i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return n;", "    long largest_prime_factor = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;", "    long largest_prime_factor = 0;\n\
    \    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    if (n > largest_prime_factor) {\n    \
    \    largest_prime_factor = n;\n    }\n    return largest_prime_factor;", "  \
    \  long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            n /= i;\n            i = 1;\n  \
    \      }\n    }\n    return largest;", "    long largest_prime_factor = 1;\n \
    \   long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n           \
    \ largest_prime_factor = i;\n            n /= i;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    return largest_prime_factor;", "    long i;\n\
    \    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            n /= i;\n\
    \            i--;\n        }\n    }\n    return i;", "    long i = 2;\n    while\
    \ (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    return n;", "    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;", "  \
    \  long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n       \
    \     n /= i;\n            i--;\n        }\n    }\n    return i;", "    long i\
    \ = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return n;", " \
    \   long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n  \
    \      if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++) {\n     \
    \   if (n % i == 0) {\n            largest_prime_factor = i;\n            while\
    \ (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n \
    \   return largest_prime_factor;", "    long largest = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest;", "  \
    \  long largest_prime_factor = 1;\n    long factor = 2;\n    while (factor <=\
    \ n) {\n        if (n % factor == 0) {\n            largest_prime_factor = factor;\n\
    \            n /= factor;\n        } else {\n            factor += 1;\n      \
    \  }\n    }\n    return largest_prime_factor;", "    long largest_prime = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  largest_prime = i;\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    return largest_prime;", "    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;", "    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;",
  "    // TODO: implement me\n    long i;\n    for (i = 2; i <= n; i++) {\n      \
    \  if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n    }\n\
    \    return i;", "    long i;\n    for (i = 2; i < n; i++) {\n        if (n %\
    \ i == 0) {\n            n /= i;\n            i--;\n        }\n    }\n    return\
    \ i;", "    // TODO: Implement me!\n    long i;\n    for (i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n      \
    \  }\n    }\n    return i;", "    long largest_prime_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n            i = 1;\n        }\n    }\n    return\
    \ largest_prime_factor;", "    long i = 2;\n    while (i * i <= n) {\n       \
    \ if (n % i == 0) {\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    return n;", "    long largest = 0;\n    for (long i = 2;\
    \ i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n      \
    \      n /= i;\n            i = 1;\n        }\n    }\n    return largest;", " \
    \   long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n  \
    \      if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \    }\n    return largest_prime;", "    long largest_prime = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;", "    assert(n > 1);\n    long largest_prime_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime_factor = i;\n            while (n % i == 0) {\n        \
    \        n /= i;\n            }\n        }\n    }\n    return largest_prime_factor;",
  "    // TODO: Implement me!\n    long i;\n    long max;\n    for(i=2;i<=n;i++){\n\
    \        if(n%i==0){\n            max=i;\n            n=n/i;\n            i--;\n\
    \        }\n    }\n    return max;", "    long i;\n    for (i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n      \
    \  }\n    }\n    return i;", "    long i = 2;\n    while (i * i <= n) {\n    \
    \    if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    return largest_prime_factor;", "    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime_factor;", "    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;", "  \
    \  long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n        \
    \    n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ n;", "    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;", "    long i = 2;\n    while (i\
    \ * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    return n;", "    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    return largest_prime_factor;", "  \
    \  long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime = i;\n            n /= i;\n         \
    \   i--;\n        }\n    }\n    return largest_prime;", "\tlong largest = 1;\n\
    \tfor (long i = 2; i <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\
    \t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;",
  "    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return i;", "    long\
    \ i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    return n;",
  "    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++) {\n     \
    \   if (n % i == 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n            i--;\n        }\n    }\n    return largest_prime_factor;", " \
    \   long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n  \
    \      if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest = 0;\n    long i = 2;\n    while (i * i <= n) {\n        if (n\
    \ % i == 0) {\n            largest = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    if (n > largest) {\n        largest =\
    \ n;\n    }\n    return largest;", "    long largest_prime_factor = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime = 0;\n    long i = 2;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    if (n > largest_prime)\
    \ {\n        largest_prime = n;\n    }\n    return largest_prime;", "    long\
    \ largest = 0;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            largest = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest;", "    long largest_prime_factor = 0;\n    long factor\
    \ = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1;\n    }\n\
    \    return largest_prime_factor;", "    long i;\n    for (i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n      \
    \  }\n    }\n    return i;", "    long i = 2;\n    while (i * i <= n) {\n    \
    \    if (n % i == 0) {\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime_factor;", "    long largest_prime\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return largest_prime;", "    long i = 2;\n\
    \    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    return n;", "    long\
    \ largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n\
    \ % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \          i--;\n        }\n    }\n    return largest_prime_factor;", "    long\
    \ i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return n;", " \
    \   long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n  \
    \      if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest_prime_factor = i;\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;",
  "    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n        \
    \    n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;", "    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;", "    long i = 2;\n    while (i * i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return n;", "    long largest_prime_factor = 1;\n    long i = 2;\n\
    \    while (i * i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return\
    \ largest_prime_factor;", "    long largest_prime_factor = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    return largest_prime_factor;", "\tlong i = 2;\n\twhile (i * i <= n)\
    \ {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t\
    }\n\treturn n;", "    long largest_prime_factor = 1;\n    long i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return largest_prime_factor;", "    long i = 2;\n    while (i * i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor\
    \ = n;\n    }\n    return largest_prime_factor;", "    long largest_prime_factor\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       largest_prime_factor = i;\n            while (n % i == 0) {\n        \
    \        n /= i;\n            }\n        }\n    }\n    return largest_prime_factor;",
  "    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n        \
    \    n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;", "    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;", "    long i;\n    for (i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return largest_prime_factor(n / i);\n\
    \        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return\
    \ largest_prime_factor;", "    long i = 2;\n    while (i * i <= n) {\n       \
    \ if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;", "    long largest = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest = i;\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return largest;",
  "    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n        \
    \    n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ n;", "    long largest_prime_factor = 1;\n    long factor = 2;\n    while (n\
    \ > 1) {\n        while (n % factor == 0) {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1;\n    }\n\
    \    return largest_prime_factor;", "    long i;\n    for (i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n      \
    \  }\n    }\n    return i;", "    long i;\n    for (i = 2; i < n; i++) {\n   \
    \     if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n  \
    \  }\n    return i;", "    long i;\n    for (i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) {\n            return largest_prime_factor(n / i);\n        }\n\
    \    }\n    return n;", "    long i;\n    for (i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) {\n            n /= i;\n            i--;\n        }\n    }\n  \
    \  return i;", "    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n            i--;\n        }\n    }\n    return\
    \ i;", "    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n    }\n    return largest;",
  "    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i ==\
    \ 0) {\n            largest = i;\n            n /= i;\n            i--;\n    \
    \    }\n    }\n    return largest;", "    long largest_prime_factor = 0;\n   \
    \ long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n         \
    \   largest_prime_factor = i;\n            n /= i;\n        } else {\n       \
    \     i += 1;\n        }\n    }\n    if (n > largest_prime_factor) {\n       \
    \ largest_prime_factor = n;\n    }\n    return largest_prime_factor;", "    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i * i <= n) {\n     \
    \   if (n % i == 0) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n\
    \        largest_prime_factor = n;\n    }\n    return largest_prime_factor;",
  "    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n   \
    \         n /= factor;\n        } else {\n            factor += 1;\n        }\n\
    \    }\n    return factor;", "    long i = 2;\n    while (i * i <= n) {\n    \
    \    if (n % i == 0) {\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    return n;", "    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor\
    \ = n;\n    }\n    return largest_prime_factor;", "    long i;\n    for (i = 2;\
    \ i < n; i++) {\n        if (n % i == 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;", "  long factor = 2;\n  while (n > 1)\
    \ {\n    if (n % factor == 0) {\n      n /= factor;\n    } else {\n      factor\
    \ += 1;\n    }\n  }\n  return factor;", "    long largest_prime_factor = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;",
  "    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    return largest_prime;",
  "    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return largest_prime;"]
stop_tokens:
- "\n}"
