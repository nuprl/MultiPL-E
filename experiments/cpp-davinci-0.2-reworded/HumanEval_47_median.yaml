name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
  \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n   \
    \ if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() /\
    \ 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    int\
    \ n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n\
    \        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    // TODO: Implement this function.\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "  std::sort(l.begin(), l.end());\n  int n = l.size();\n  if (n % 2 == 0) {\n  \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  } else {\n    return l[n / 2];\n\
    \  }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    if (l.size() == 0) {\n        return 0;\n\
    \    }\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n   \
    \     return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n  \
    \      return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n = l.size();\n\
    \    if (n == 0) {\n        return 0;\n    }\n    std::sort(l.begin(), l.end());\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float(l[l.size() /\
    \ 2 - 1]) + l[l.size() / 2]) / 2;\n    } else {\n        return l[l.size() / 2];\n\
    \    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size()\
    \ / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n   \
    \     return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size()\
    \ / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size()\
    \ / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "  std::sort(l.begin(), l.end());\n \
    \ int n = l.size();\n  if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n  } else {\n    return l[n / 2];\n  }", "    assert(l.size() > 0);\n\
    \    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size()\
    \ / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "  std::sort(l.begin(), l.end());\n  if (l.size()\
    \ % 2 == 0) {\n    return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n\
    \  } else {\n    return (float)l[l.size() / 2];\n  }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n   \
    \     return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n \
    \   if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "  assert(l.size()\
    \ > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n  } else {\n    return l[l.size()\
    \ / 2];\n  }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n  \
    \  if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else\
    \ {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0)\
    \ {\n        return 0;\n    }\n    std::sort(l.begin(), l.end());\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else\
    \ {\n        return (float)l[l.size() / 2];\n    }", "\tstd::sort(l.begin(), l.end());\n\
    \tif (l.size() % 2 == 0) {\n\t\treturn (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n\t}\n\telse {\n\t\treturn l[l.size() / 2];\n\t}", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else\
    \ {\n        return (float)l[l.size() / 2];\n    }", "    if (l.size() == 0) {\n\
    \        return 0;\n    }\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n   \
    \     return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n \
    \   int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size()\
    \ / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    int size\
    \ = l.size();\n    if (size == 0) {\n        return 0;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    if (size % 2 == 0) {\n        return (l[size / 2] + l[size /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[size / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n\
    \        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n %\
    \ 2 == 0) {\n        return (float)(l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n   \
    \ return (float)l[n / 2];", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size()\
    \ / 2];\n    }", "    float m;\n    int size = l.size();\n    if (size % 2 ==\
    \ 0) {\n        m = (l[size / 2] + l[size / 2 - 1]) / 2.0;\n    } else {\n   \
    \     m = l[size / 2];\n    }\n    return m;", "  // >>> median((std::vector<long>({(long)3,\
    \ (long)1, (long)2, (long)4, (long)5})))\n  // (float(3))\n  // >>> median((std::vector<long>({(long)-10,\
    \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n  // (15.0)\n  std::sort(l.begin(),\
    \ l.end());\n  int n = l.size();\n  if (n % 2 == 0) {\n    return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n  } else {\n    return l[n / 2];\n  }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n   \
    \     return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    // Write your code here\n    float\
    \ median;\n    std::sort(l.begin(), l.end());\n    if(l.size()%2 == 0)\n    {\n\
    \        median = (l[l.size()/2] + l[l.size()/2 - 1])/2.0;\n    }\n    else\n\
    \    {\n        median = l[l.size()/2];\n    }\n    return median;", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    return (l[l.size()\
    \ / 2] + l[(l.size() - 1) / 2]) / 2.0;", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n\
    \    std::sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    int n = l.size();\n    if (n % 2 == 0) {\n        return (float(l[n / 2 - 1])\
    \ + float(l[n / 2])) / 2;\n    } else {\n        return float(l[n / 2]);\n   \
    \ }", "    // Write your code here\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // Write your code\
    \ here\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2\
    \ == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    // Write your code here\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    // TODO: Implement median function\n    std::sort(l.begin(), l.end());\n  \
    \  int n = l.size();\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0;\n    else\n        return l[n / 2];", "  std::sort(l.begin(), l.end());\n\
    \  int n = l.size();\n  if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n  } else {\n    return l[n / 2];\n  }", "    assert(l.size() > 0);\n\
    \    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int len = l.size();\n    if (len % 2 == 0) {\n        return\
    \ (l[len / 2] + l[len / 2 - 1]) / 2.0;\n    } else {\n        return l[len / 2];\n\
    \    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n\
    \  int mid = l.size() / 2;\n  if (l.size() % 2 == 0) {\n    return (l[mid] + l[mid\
    \ - 1]) / 2.0;\n  } else {\n    return l[mid];\n  }", "    assert(l.size() > 0);\n\
    \    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return\
    \ (float)l[l.size() / 2];\n    }", "  std::sort(l.begin(), l.end());\n  if (l.size()\
    \ % 2 == 0) {\n    return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n\
    \  } else {\n    return (float)l[l.size() / 2];\n  }", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n\
    \        return (float)l[l.size() / 2];\n    }", "    if (l.size() == 0) {\n \
    \       return 0;\n    }\n    std::sort(l.begin(), l.end());\n    int mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2.0;\n\
    \    } else {\n        return l[mid];\n    }", "    assert(l.size() > 0);\n  \
    \  std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) /\
    \ 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size()\
    \ / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   int n = l.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return\
    \ l[n / 2];", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else\
    \ {\n        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return\
    \ (float)l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else\
    \ {\n        return (float)l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n\
    \    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else {\n        return\
    \ (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (float)(l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2;\n    } else {\n        return (float)l[l.size() / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "  assert(l.size()\
    \ > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n  } else {\n    return l[l.size()\
    \ / 2];\n  }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return (l[mid\
    \ - 1] + l[mid]) / 2.0;\n    } else {\n        return l[mid];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    } else\
    \ {\n        return (float)l[l.size() / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return (l[mid] + l[mid - 1]) / 2.0;\n\
    \    } else {\n        return l[mid];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if (n == 0) {\n        return\
    \ 0;\n    }\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    }\n    return l[n / 2];", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2 - 1]\
    \ + l[l.size() / 2]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n \
    \   }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    // Write your code here\n    // To print results\
    \ to the standard output you can use the cout stream\n    // Example: cout <<\
    \ \"Hello world!\";\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n     \
    \   return l[n/2];", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }"]
stop_tokens:
- "\n}"
