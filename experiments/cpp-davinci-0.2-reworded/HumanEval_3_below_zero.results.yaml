language: cpp
name: HumanEval_3_below_zero
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp79b6kdqb.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp79b6kdqb.cpp:12:13: error: 'i' does not name a type\n   for (auto i :\
    \ operations) {\n             ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ';'\
    \ before 'return'\n   return false;\n   ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ ';' before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmp79b6kdqb.cpp: In function 'int main()':\n/tmp/tmp79b6kdqb.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp79b6kdqb.cpp:2:\n/tmp/tmp79b6kdqb.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp79b6kdqb.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp79b6kdqb.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp79b6kdqb.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp79b6kdqb.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp79b6kdqb.cpp:23:97: note: candidates are:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto it = operations.begin(); it != operations.end();\
    \ ++it) {\n        balance += *it;\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdkcdnbk.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpkdkcdnbk.cpp:12:15: error: 'it' does not name a type\n     for (auto it\
    \ = operations.begin(); it != operations.end(); ++it) {\n               ^\n/tmp/tmpkdkcdnbk.cpp:12:40:\
    \ error: expected ';' before 'it'\n     for (auto it = operations.begin(); it\
    \ != operations.end(); ++it) {\n                                        ^\n/tmp/tmpkdkcdnbk.cpp:12:40:\
    \ error: 'it' was not declared in this scope\n/tmp/tmpkdkcdnbk.cpp: In function\
    \ 'int main()':\n/tmp/tmpkdkcdnbk.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = below_zero;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdkcdnbk.cpp:2:\n/tmp/tmpkdkcdnbk.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpkdkcdnbk.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpkdkcdnbk.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpkdkcdnbk.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkdkcdnbk.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkdkcdnbk.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto &i : operations) {\n    balance += i;\n\
    \    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplshtcw9g.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmplshtcw9g.cpp:12:14: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n   for (auto &i : operations) {\n              ^\n/tmp/tmplshtcw9g.cpp:12:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n   for (auto &i\
    \ : operations) {\n                  ^\n/tmp/tmplshtcw9g.cpp: In function 'int\
    \ main()':\n/tmp/tmplshtcw9g.cpp:21:10: error: 'candidate' does not name a type\n\
    \     auto candidate = below_zero;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplshtcw9g.cpp:2:\n/tmp/tmplshtcw9g.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmplshtcw9g.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmplshtcw9g.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmplshtcw9g.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplshtcw9g.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplshtcw9g.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n        "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto operation : operations) {\n        sum +=\
    \ operation;\n        if (sum < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmply2agvp0.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmply2agvp0.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmply2agvp0.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmply2agvp0.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmply2agvp0.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmply2agvp0.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmply2agvp0.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmply2agvp0.cpp: In function 'int main()':\n/tmp/tmply2agvp0.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmply2agvp0.cpp:2:\n/tmp/tmply2agvp0.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmply2agvp0.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmply2agvp0.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmply2agvp0.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmply2agvp0.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmply2agvp0.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (int i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn9rvmqr.cpp: In function 'int main()':\n/tmp/tmpbn9rvmqr.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbn9rvmqr.cpp:2:\n/tmp/tmpbn9rvmqr.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbn9rvmqr.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbn9rvmqr.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbn9rvmqr.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbn9rvmqr.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbn9rvmqr.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbn9rvmqr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto op : operations) {\n    balance += op;\n\
    \    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiweh93iq.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpiweh93iq.cpp:12:13: error: 'op' does not name a type\n   for (auto op\
    \ : operations) {\n             ^\n/tmp/tmpiweh93iq.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return false;\n   ^\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmpiweh93iq.cpp: In function 'int main()':\n/tmp/tmpiweh93iq.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpiweh93iq.cpp:2:\n/tmp/tmpiweh93iq.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpiweh93iq.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpiweh93iq.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpiweh93iq.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiweh93iq.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiweh93iq.cpp:23:97: note: candidates are:\nIn file included"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto operation : operations) {\n    balance +=\
    \ operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp826bycqt.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp826bycqt.cpp:12:13: error: 'operation' does not name a type\n   for (auto\
    \ operation : operations) {\n             ^\n/tmp/tmp826bycqt.cpp:18:3: error:\
    \ expected ';' before 'return'\n   return false;\n   ^\n/tmp/tmp826bycqt.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp826bycqt.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp826bycqt.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp826bycqt.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp826bycqt.cpp: In function 'int main()':\n/tmp/tmp826bycqt.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp826bycqt.cpp:2:\n/tmp/tmp826bycqt.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp826bycqt.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp826bycqt.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp826bycqt.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp826bycqt.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp826bycqt.cpp:23:97: note: candidates are:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp79b6kdqb.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp79b6kdqb.cpp:12:13: error: 'i' does not name a type\n   for (auto i :\
    \ operations) {\n             ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ';'\
    \ before 'return'\n   return false;\n   ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ ';' before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmp79b6kdqb.cpp: In function 'int main()':\n/tmp/tmp79b6kdqb.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp79b6kdqb.cpp:2:\n/tmp/tmp79b6kdqb.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp79b6kdqb.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp79b6kdqb.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp79b6kdqb.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp79b6kdqb.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp79b6kdqb.cpp:23:97: note: candidates are:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto operation : operations) {\n    balance +=\
    \ operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp826bycqt.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp826bycqt.cpp:12:13: error: 'operation' does not name a type\n   for (auto\
    \ operation : operations) {\n             ^\n/tmp/tmp826bycqt.cpp:18:3: error:\
    \ expected ';' before 'return'\n   return false;\n   ^\n/tmp/tmp826bycqt.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp826bycqt.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp826bycqt.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp826bycqt.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp826bycqt.cpp: In function 'int main()':\n/tmp/tmp826bycqt.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp826bycqt.cpp:2:\n/tmp/tmp826bycqt.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp826bycqt.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp826bycqt.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp826bycqt.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp826bycqt.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp826bycqt.cpp:23:97: note: candidates are:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp79b6kdqb.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp79b6kdqb.cpp:12:13: error: 'i' does not name a type\n   for (auto i :\
    \ operations) {\n             ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ';'\
    \ before 'return'\n   return false;\n   ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ ';' before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmp79b6kdqb.cpp: In function 'int main()':\n/tmp/tmp79b6kdqb.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp79b6kdqb.cpp:2:\n/tmp/tmp79b6kdqb.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp79b6kdqb.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp79b6kdqb.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp79b6kdqb.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp79b6kdqb.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp79b6kdqb.cpp:23:97: note: candidates are:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto op : operations) {\n    balance += op;\n\
    \    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiweh93iq.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpiweh93iq.cpp:12:13: error: 'op' does not name a type\n   for (auto op\
    \ : operations) {\n             ^\n/tmp/tmpiweh93iq.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return false;\n   ^\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmpiweh93iq.cpp: In function 'int main()':\n/tmp/tmpiweh93iq.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpiweh93iq.cpp:2:\n/tmp/tmpiweh93iq.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpiweh93iq.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpiweh93iq.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpiweh93iq.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiweh93iq.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiweh93iq.cpp:23:97: note: candidates are:\nIn file included"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < operations.size(); i++) {\n    sum\
    \ += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeaejwy3z.cpp: In function 'int main()':\n/tmp/tmpeaejwy3z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeaejwy3z.cpp:2:\n/tmp/tmpeaejwy3z.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpeaejwy3z.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpeaejwy3z.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpeaejwy3z.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpeaejwy3z.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpeaejwy3z.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeaejwy3z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto operation : operations) {\n    sum += operation;\n\
    \    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp032t2mop.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp032t2mop.cpp:12:13: error: 'operation' does not name a type\n   for (auto\
    \ operation : operations) {\n             ^\n/tmp/tmp032t2mop.cpp:18:3: error:\
    \ expected ';' before 'return'\n   return false;\n   ^\n/tmp/tmp032t2mop.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp032t2mop.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp032t2mop.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp032t2mop.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp032t2mop.cpp: In function 'int main()':\n/tmp/tmp032t2mop.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp032t2mop.cpp:2:\n/tmp/tmp032t2mop.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp032t2mop.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp032t2mop.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp032t2mop.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp032t2mop.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp032t2mop.cpp:23:97: note: candidates are:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp79b6kdqb.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp79b6kdqb.cpp:12:13: error: 'i' does not name a type\n   for (auto i :\
    \ operations) {\n             ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ';'\
    \ before 'return'\n   return false;\n   ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ ';' before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmp79b6kdqb.cpp: In function 'int main()':\n/tmp/tmp79b6kdqb.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp79b6kdqb.cpp:2:\n/tmp/tmp79b6kdqb.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp79b6kdqb.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp79b6kdqb.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp79b6kdqb.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp79b6kdqb.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp79b6kdqb.cpp:23:97: note: candidates are:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp79b6kdqb.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp79b6kdqb.cpp:12:13: error: 'i' does not name a type\n   for (auto i :\
    \ operations) {\n             ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ';'\
    \ before 'return'\n   return false;\n   ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ ';' before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmp79b6kdqb.cpp: In function 'int main()':\n/tmp/tmp79b6kdqb.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp79b6kdqb.cpp:2:\n/tmp/tmp79b6kdqb.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp79b6kdqb.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp79b6kdqb.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp79b6kdqb.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp79b6kdqb.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp79b6kdqb.cpp:23:97: note: candidates are:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptxmxpv20.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto i : operations) {\n    balance += i;\n \
    \   if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph6dlb2ph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n        if(sum < 0){\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4twc1zvo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto op : operations) {\n    balance += op;\n\
    \    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiweh93iq.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpiweh93iq.cpp:12:13: error: 'op' does not name a type\n   for (auto op\
    \ : operations) {\n             ^\n/tmp/tmpiweh93iq.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return false;\n   ^\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmpiweh93iq.cpp: In function 'int main()':\n/tmp/tmpiweh93iq.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpiweh93iq.cpp:2:\n/tmp/tmpiweh93iq.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpiweh93iq.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpiweh93iq.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpiweh93iq.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiweh93iq.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiweh93iq.cpp:23:97: note: candidates are:\nIn file included"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (int i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn9rvmqr.cpp: In function 'int main()':\n/tmp/tmpbn9rvmqr.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbn9rvmqr.cpp:2:\n/tmp/tmpbn9rvmqr.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbn9rvmqr.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbn9rvmqr.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbn9rvmqr.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbn9rvmqr.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbn9rvmqr.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbn9rvmqr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  // your code here\n  long sum = 0;\n  for (auto i : operations) {\n   \
    \ sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkvv_tzvl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (int i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn9rvmqr.cpp: In function 'int main()':\n/tmp/tmpbn9rvmqr.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbn9rvmqr.cpp:2:\n/tmp/tmpbn9rvmqr.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbn9rvmqr.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbn9rvmqr.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbn9rvmqr.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbn9rvmqr.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbn9rvmqr.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbn9rvmqr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto i : operations) {\n    balance += i;\n \
    \   if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph6dlb2ph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ty_h6r4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto i : operations) {\n        balance +=\
    \ i;\n        if (balance < 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsk4whso.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpdsk4whso.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpdsk4whso.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpdsk4whso.cpp: In function 'int main()':\n/tmp/tmpdsk4whso.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdsk4whso.cpp:2:\n/tmp/tmpdsk4whso.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpdsk4whso.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpdsk4whso.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpdsk4whso.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdsk4whso.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdsk4whso.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto op : operations) {\n    balance += op;\n\
    \    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiweh93iq.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpiweh93iq.cpp:12:13: error: 'op' does not name a type\n   for (auto op\
    \ : operations) {\n             ^\n/tmp/tmpiweh93iq.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return false;\n   ^\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmpiweh93iq.cpp: In function 'int main()':\n/tmp/tmpiweh93iq.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpiweh93iq.cpp:2:\n/tmp/tmpiweh93iq.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpiweh93iq.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpiweh93iq.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpiweh93iq.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiweh93iq.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiweh93iq.cpp:23:97: note: candidates are:\nIn file included"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto &operation : operations) {\n       \
    \ balance += operation;\n        if (balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuq2_to2t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < operations.size(); i++) {\n    sum\
    \ += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeaejwy3z.cpp: In function 'int main()':\n/tmp/tmpeaejwy3z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeaejwy3z.cpp:2:\n/tmp/tmpeaejwy3z.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpeaejwy3z.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpeaejwy3z.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpeaejwy3z.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpeaejwy3z.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpeaejwy3z.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeaejwy3z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n\
    \        if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2glsnswv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp79b6kdqb.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp79b6kdqb.cpp:12:13: error: 'i' does not name a type\n   for (auto i :\
    \ operations) {\n             ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ';'\
    \ before 'return'\n   return false;\n   ^\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected\
    \ ';' before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp79b6kdqb.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmp79b6kdqb.cpp: In function 'int main()':\n/tmp/tmp79b6kdqb.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp79b6kdqb.cpp:2:\n/tmp/tmp79b6kdqb.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp79b6kdqb.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp79b6kdqb.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp79b6kdqb.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp79b6kdqb.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp79b6kdqb.cpp:23:97: note: candidates are:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (long i = 0; i < operations.size(); i++) {\n \
    \   balance += operations[i];\n    if (balance < 0) {\n      return true;\n  \
    \  }\n  }\n  return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy4i7wwap.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto op : operations) {\n    balance += op;\n\
    \    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiweh93iq.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpiweh93iq.cpp:12:13: error: 'op' does not name a type\n   for (auto op\
    \ : operations) {\n             ^\n/tmp/tmpiweh93iq.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return false;\n   ^\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpiweh93iq.cpp:18:3: error: expected ')' before 'return'\n\
    /tmp/tmpiweh93iq.cpp: In function 'int main()':\n/tmp/tmpiweh93iq.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_zero;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpiweh93iq.cpp:2:\n/tmp/tmpiweh93iq.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpiweh93iq.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpiweh93iq.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpiweh93iq.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiweh93iq.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiweh93iq.cpp:23:97: note: candidates are:\nIn file included"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto operation : operations) {\n        balance\
    \ += operation;\n        if (balance < 0) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpblgoxene.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpblgoxene.cpp:12:15: error: 'operation' does not name a type\n     for\
    \ (auto operation : operations) {\n               ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n     return false;\n     ^\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpblgoxene.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpblgoxene.cpp: In function 'int main()':\n/tmp/tmpblgoxene.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblgoxene.cpp:2:\n/tmp/tmpblgoxene.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpblgoxene.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpblgoxene.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpblgoxene.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpblgoxene.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpblgoxene.cpp:23:97: note: candidates"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < operations.size(); i++) {\n    sum\
    \ += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgmf0lvkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto i : operations) {\n    balance += i;\n \
    \   if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph6dlb2ph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto operation : operations) {\n    balance +=\
    \ operation;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp826bycqt.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmp826bycqt.cpp:12:13: error: 'operation' does not name a type\n   for (auto\
    \ operation : operations) {\n             ^\n/tmp/tmp826bycqt.cpp:18:3: error:\
    \ expected ';' before 'return'\n   return false;\n   ^\n/tmp/tmp826bycqt.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp826bycqt.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp826bycqt.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp826bycqt.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp826bycqt.cpp: In function 'int main()':\n/tmp/tmp826bycqt.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp826bycqt.cpp:2:\n/tmp/tmp826bycqt.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp826bycqt.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp826bycqt.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp826bycqt.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp826bycqt.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp826bycqt.cpp:23:97: note: candidates are:\nIn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto i : operations) {\n    balance += i;\n \
    \   if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph6dlb2ph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto it = operations.begin(); it != operations.end();\
    \ ++it) {\n    balance += *it;\n    if (balance < 0) {\n      return true;\n \
    \   }\n  }\n  return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfsdfvq17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long sum = 0;\n  for (long i = 0; i < operations.size(); i++) {\n    sum\
    \ += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeaejwy3z.cpp: In function 'int main()':\n/tmp/tmpeaejwy3z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeaejwy3z.cpp:2:\n/tmp/tmpeaejwy3z.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpeaejwy3z.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpeaejwy3z.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpeaejwy3z.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpeaejwy3z.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpeaejwy3z.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeaejwy3z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2,\
    \ (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fk35iok.cpp: In function 'int main()':\n/tmp/tmp7fk35iok.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7fk35iok.cpp:2:\n/tmp/tmp7fk35iok.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp7fk35iok.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp7fk35iok.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp7fk35iok.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7fk35iok.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7fk35iok.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7fk35iok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n  \
    \      sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnyu_wd_.cpp: In function 'int main()':\n/tmp/tmpbnyu_wd_.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnyu_wd_.cpp:2:\n/tmp/tmpbnyu_wd_.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpbnyu_wd_.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpbnyu_wd_.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpbnyu_wd_.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnyu_wd_.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnyu_wd_.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnyu_wd_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (long i = 0; i < operations.size(); i++) {\n \
    \   balance += operations[i];\n    if (balance < 0) {\n      return true;\n  \
    \  }\n  }\n  return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy4i7wwap.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl3yvky1s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n \
    \       sum += operations[i];\n        if (sum < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2myqelca.cpp: In function 'int main()':\n/tmp/tmp2myqelca.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2myqelca.cpp:2:\n/tmp/tmp2myqelca.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmp2myqelca.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmp2myqelca.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmp2myqelca.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2myqelca.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2myqelca.cpp:23:97: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2myqelca.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument dedu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n  long balance = 0;\n  for (auto it = operations.begin(); it != operations.end();\
    \ ++it) {\n    balance += *it;\n    if (balance < 0) {\n      return true;\n \
    \   }\n  }\n  return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfsdfvq17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659805648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long sum = 0;\n    for (auto i : operations) {\n        sum += i;\n \
    \       if (sum < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3,\
    \ (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfa4ivvd.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpsfa4ivvd.cpp:12:15: error: 'i' does not name a type\n     for (auto i\
    \ : operations) {\n               ^\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsfa4ivvd.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpsfa4ivvd.cpp: In function 'int main()':\n/tmp/tmpsfa4ivvd.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsfa4ivvd.cpp:2:\n/tmp/tmpsfa4ivvd.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpsfa4ivvd.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpsfa4ivvd.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpsfa4ivvd.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsfa4ivvd.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsfa4ivvd.cpp:23:97: note: candidates are:\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector\
    \ of deposit and withdrawal operations on a bank account that starts with\n//\
    \ zero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\n// at that point function should return true. Otherwise\
    \ it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2,\
    \ (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations)\
    \ {\n    long balance = 0;\n    for (auto op : operations) {\n        balance\
    \ += op;\n        if (balance < 0) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n \
    \   assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2,\
    \ (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5gmf9ai.cpp: In function 'bool below_zero(std::vector<long int>)':\n\
    /tmp/tmpw5gmf9ai.cpp:12:15: error: 'op' does not name a type\n     for (auto op\
    \ : operations) {\n               ^\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return false;\n     ^\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw5gmf9ai.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw5gmf9ai.cpp: In function 'int main()':\n/tmp/tmpw5gmf9ai.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw5gmf9ai.cpp:2:\n/tmp/tmpw5gmf9ai.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (false));\n                                           ^\n/tmp/tmpw5gmf9ai.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n                    \
    \                    ^\n/tmp/tmpw5gmf9ai.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1,\
    \ (long)2, (long)-3}))) == (false));\n                                       \
    \                                                          ^\n/tmp/tmpw5gmf9ai.cpp:23:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw5gmf9ai.cpp:23:97: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw5gmf9ai.cpp:23:97: note: candidates are:\nIn file "
  stdout: ''
