language: cpp
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> ret;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n   \
    \     if (paren_string[i] == '(') {\n            count++;\n            temp +=\
    \ paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n  \
    \          count--;\n            temp += paren_string[i];\n        }\n       \
    \ if (count == 0 && temp.size() > 0) {\n            ret.push_back(temp);\n   \
    \         temp = \"\";\n        }\n    }\n    return ret;\n}\nint main() {\n \
    \   auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            temp += paren_string[i];\n            count--;\n            if (count\
    \ == 0) {\n                result.push_back(temp);\n                temp = \"\"\
    ;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) ()\
    \ ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(stk.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmp4bispkun: /tmp/tmp4bispkun.cpp:36: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ s;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            s.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            s.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(s.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmptaxp0g3p: /tmp/tmptaxp0g3p.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            if(stk.empty()) {\n                result.push_back(temp);\n\
    \                temp = \"\";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmppov_mpz1: /tmp/tmppov_mpz1.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n  std::vector<std::string> result;\n  std::stack<char> s;\n\
    \  std::string temp;\n  for(int i = 0; i < paren_string.length(); i++) {\n   \
    \ if(paren_string[i] == '(') {\n      s.push(paren_string[i]);\n    }\n    else\
    \ if(paren_string[i] == ')') {\n      s.pop();\n      temp += paren_string[i];\n\
    \    }\n    else {\n      temp += paren_string[i];\n    }\n    if(s.empty()) {\n\
    \      result.push_back(temp);\n      temp = \"\";\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmphjpasl3_: /tmp/tmphjpasl3_.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if (paren_string[i] == ')') {\n            count--;\n\
    \            temp.push_back(paren_string[i]);\n        }\n        if (count ==\
    \ 0 && temp.length() > 0) {\n            result.push_back(temp);\n           \
    \ temp.clear();\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) ()\
    \ ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> ret;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n   \
    \     if (paren_string[i] == '(') {\n            count++;\n            temp +=\
    \ paren_string[i];\n        } else if (paren_string[i] == ')') {\n           \
    \ count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.size() > 0) {\n            ret.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\"\
    , (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> res;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n   \
    \     if (paren_string[i] == '(') {\n            count++;\n            temp +=\
    \ paren_string[i];\n        } else if (paren_string[i] == ')') {\n           \
    \ count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.size() > 0) {\n            res.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\"\
    , (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        } else if (paren_string[i] == ' ') {\n \
    \           continue;\n        }\n        if (open == 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        if (count == 0) {\n   \
    \         result.push_back(temp);\n            temp = \"\";\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            if(st.empty())\
    \ {\n                return result;\n            }\n            else {\n     \
    \           st.pop();\n                temp += paren_string[i];\n            }\n\
    \        }\n        else if(paren_string[i] == ' ') {\n            if(st.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n            else {\n                temp += paren_string[i];\n\
    \            }\n        }\n    }\n    if(!st.empty()) {\n        return result;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpri22tyfh: /tmp/tmpri22tyfh.cpp:43: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> ret;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n   \
    \     if (paren_string[i] == '(') {\n            count++;\n            temp +=\
    \ paren_string[i];\n        } else if (paren_string[i] == ')') {\n           \
    \ count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.size() > 0) {\n            ret.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\"\
    , (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> res;\n    std::string temp;\n\
    \    int count = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            count++;\n            temp += c;\n        } else if (c == ')')\
    \ {\n            count--;\n            temp += c;\n        }\n        if (count\
    \ == 0 && temp.size() > 0) {\n            res.push_back(temp);\n            temp.clear();\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < paren_string.length())\
    \ {\n        if (paren_string[i] == '(') {\n            count++;\n        }\n\
    \        if (paren_string[i] == ')') {\n            count--;\n        }\n    \
    \    if (count == 0) {\n            result.push_back(paren_string.substr(j, i\
    \ - j + 1));\n            j = i + 1;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmp310bzpt0: /tmp/tmp310bzpt0.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n  std::vector<std::string> result;\n  std::string temp;\n \
    \ int count = 0;\n  for (int i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i]\
    \ == '(') {\n      count++;\n      temp += paren_string[i];\n    } else if (paren_string[i]\
    \ == ')') {\n      count--;\n      temp += paren_string[i];\n    }\n    if (count\
    \ == 0 && temp.size() > 0) {\n      result.push_back(temp);\n      temp = \"\"\
    ;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp.push_back(paren_string[i]);\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp.push_back(paren_string[i]);\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp.clear();\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if (paren_string[i] == ')') {\n            count--;\n\
    \            temp.push_back(paren_string[i]);\n        }\n        if (count ==\
    \ 0 && temp.length() > 0) {\n            result.push_back(temp);\n           \
    \ temp.clear();\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) ()\
    \ ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    int start = 0;\n\
    \    int end = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n     \
    \   if (paren_string[i] == '(') {\n            start = i;\n            int count\
    \ = 1;\n            while (count != 0) {\n                i++;\n             \
    \   if (paren_string[i] == '(') {\n                    count++;\n            \
    \    } else if (paren_string[i] == ')') {\n                    count--;\n    \
    \            }\n            }\n            end = i;\n            result.push_back(paren_string.substr(start,\
    \ end - start + 1));\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpulkyakjl: /tmp/tmpulkyakjl.cpp:36: int main(): Assertion `candidate(("(
    ) (( )) (( )( ))")) == (std::vector<std::string>({(std::string)"()", (std::string)"(())",
    (std::string)"(()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n  std::vector<std::string> result;\n  std::string temp;\n \
    \ int open = 0;\n  for (int i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i]\
    \ == '(') {\n      open++;\n      temp += paren_string[i];\n    } else if (paren_string[i]\
    \ == ')') {\n      open--;\n      temp += paren_string[i];\n    }\n    if (open\
    \ == 0 && temp.size() > 0) {\n      result.push_back(temp);\n      temp = \"\"\
    ;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    int i = 0;\n    int\
    \ j = 0;\n    int count = 0;\n    while (i < paren_string.length()) {\n      \
    \  if (paren_string[i] == '(') {\n            count++;\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n        }\n        if (count == 0) {\n    \
    \        result.push_back(paren_string.substr(j, i - j + 1));\n            j =\
    \ i + 1;\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpjy79m4dl: /tmp/tmpjy79m4dl.cpp:30: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    count--;\n            temp += paren_string[i];\n        }\n        if (count\
    \ == 0 && temp.length() > 0) {\n            result.push_back(temp);\n        \
    \    temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open_paren = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            open_paren++;\n          \
    \  temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n  \
    \          open_paren--;\n            temp += paren_string[i];\n        }\n  \
    \      if (open_paren == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        else if (paren_string[i] == ')') {\n            count--;\n\
    \            temp.push_back(paren_string[i]);\n        }\n        if (count ==\
    \ 0 && temp.length() > 0) {\n            result.push_back(temp);\n           \
    \ temp.clear();\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) ()\
    \ ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n  std::vector<std::string> result;\n  std::string current_string;\n\
    \  int open_paren_count = 0;\n  for (char c : paren_string) {\n    if (c == '(')\
    \ {\n      open_paren_count++;\n      current_string += c;\n    } else if (c ==\
    \ ')') {\n      open_paren_count--;\n      current_string += c;\n      if (open_paren_count\
    \ == 0) {\n        result.push_back(current_string);\n        current_string =\
    \ \"\";\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\"\
    , (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n  \
    \      if (paren_string[i] == '(') {\n            open++;\n            temp +=\
    \ paren_string[i];\n        } else if (paren_string[i] == ')') {\n           \
    \ open--;\n            temp += paren_string[i];\n        }\n        if (open ==\
    \ 0 && temp.length() > 0) {\n            result.push_back(temp);\n           \
    \ temp = \"\";\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) ()\
    \ ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(stk.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmp4bispkun: /tmp/tmp4bispkun.cpp:36: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> paren_groups;\n    std::string\
    \ paren_group;\n    int open_parens = 0;\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            open_parens++;\n            paren_group\
    \ += c;\n        } else if (c == ')') {\n            open_parens--;\n        \
    \    paren_group += c;\n        }\n        if (open_parens == 0 && !paren_group.empty())\
    \ {\n            paren_groups.push_back(paren_group);\n            paren_group.clear();\n\
    \        }\n    }\n    return paren_groups;\n}\nint main() {\n    auto candidate\
    \ = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\"\
    )) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\"\
    , (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            if(stk.empty()) {\n                result.push_back(temp);\n\
    \                temp = \"\";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmppov_mpz1: /tmp/tmppov_mpz1.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(stk.empty()) {\n           \
    \ result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpbtgs8uh4: /tmp/tmpbtgs8uh4.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n  std::vector<std::string> result;\n  std::string temp;\n \
    \ int count = 0;\n  for (int i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i]\
    \ == '(') {\n      count++;\n      temp += paren_string[i];\n    } else if (paren_string[i]\
    \ == ')') {\n      count--;\n      temp += paren_string[i];\n    }\n    if (count\
    \ == 0 && temp.size() > 0) {\n      result.push_back(temp);\n      temp = \"\"\
    ;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> ret;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n   \
    \     if (paren_string[i] == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        } else if (paren_string[i] == ')') {\n            count--;\n        \
    \    temp.push_back(paren_string[i]);\n        }\n        if (count == 0 && temp.size()\
    \ > 0) {\n            ret.push_back(temp);\n            temp.clear();\n      \
    \  }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> groups;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            groups.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return groups;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> res;\n    std::stack<char> stk;\n\
    \    std::string temp;\n    for(int i = 0; i < paren_string.size(); i++) {\n \
    \       if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            if(stk.empty()) {\n                res.push_back(temp);\n       \
    \         temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpzre_amh0: /tmp/tmpzre_amh0.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(stk.empty()) {\n           \
    \ result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpbtgs8uh4: /tmp/tmpbtgs8uh4.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += '(';\n        }\n        else if (paren_string[i] == ')') {\n           \
    \ count--;\n            temp += ')';\n        }\n        if (count == 0 && temp.length()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp.push_back(paren_string[i]);\n\
    \        } else if (paren_string[i] == ')') {\n            count--;\n        \
    \    temp.push_back(paren_string[i]);\n        }\n        if (count == 0 && temp.length()\
    \ > 0) {\n            result.push_back(temp);\n            temp.clear();\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ s;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            s.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            s.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(s.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmptaxp0g3p: /tmp/tmptaxp0g3p.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ s;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            s.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            s.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(s.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmptaxp0g3p: /tmp/tmptaxp0g3p.cpp:33: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    int start = 0;\n\
    \    int end = 0;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            if (count == 0) {\n\
    \                start = i;\n            }\n            count++;\n        } else\
    \ if (paren_string[i] == ')') {\n            count--;\n            if (count ==\
    \ 0) {\n                end = i;\n                result.push_back(paren_string.substr(start,\
    \ end - start + 1));\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmp1p3c8vdl: /tmp/tmp1p3c8vdl.cpp:35: int main(): Assertion `candidate(("(
    ) (( )) (( )( ))")) == (std::vector<std::string>({(std::string)"()", (std::string)"(())",
    (std::string)"(()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n  std::vector<std::string> result;\n  std::stack<char> st;\n\
    \  std::string temp;\n  for(int i = 0; i < paren_string.length(); i++) {\n   \
    \ if(paren_string[i] == '(') {\n      st.push(paren_string[i]);\n    }\n    else\
    \ if(paren_string[i] == ')') {\n      st.pop();\n      if(st.empty()) {\n    \
    \    result.push_back(temp);\n        temp = \"\";\n      }\n    }\n    else if(paren_string[i]\
    \ != ' ') {\n      temp += paren_string[i];\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmprfkeil5s: /tmp/tmprfkeil5s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            if(st.top()\
    \ == '(') {\n                st.pop();\n                if(st.empty()) {\n   \
    \                 result.push_back(temp);\n                    temp = \"\";\n\
    \                }\n            }\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((()))\
    \ () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"\
    ((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"\
    () (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\"\
    , (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n\
    \    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmp_qpkbaud: /tmp/tmp_qpkbaud.cpp:34: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string str;\n    for(int i=0;i<paren_string.length();i++){\n \
    \       if(paren_string[i]=='('){\n            st.push(paren_string[i]);\n   \
    \     }\n        else if(paren_string[i]==')'){\n            if(st.top()=='('){\n\
    \                st.pop();\n                if(st.empty()){\n                \
    \    result.push_back(str);\n                    str.clear();\n              \
    \  }\n            }\n        }\n        else{\n            str+=paren_string[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmp5ubn0dhd: /tmp/tmp5ubn0dhd.cpp:34: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057961
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else if(paren_string[i]\
    \ != ' ') {\n            temp += paren_string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
    (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: Exception
  stderr: 'tmpmmpngg4s: /tmp/tmpmmpngg4s.cpp:32: int main(): Assertion `candidate(("(()())
    ((())) () ((())()())")) == (std::vector<std::string>({(std::string)"(()())", (std::string)"((()))",
    (std::string)"()", (std::string)"((())()())"}))'' failed.

    '
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n    \
    \    if (paren_string[i] == '(') {\n            open++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            open--;\n         \
    \   temp += paren_string[i];\n        }\n        if (open == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = separate_paren_groups;\n\
    \    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"\
    (()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"\
    })));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string containing multiple groups of nested parentheses. Your goal is to\n\
    // separate those group into separate strings and return the vector of those.\n\
    // Separate groups are balanced (each open brace is properly closed) and not nested\
    \ within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"\
    ( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"\
    (())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string\
    \ paren_string) {\n    std::vector<std::string> result;\n    std::string temp;\n\
    \    int count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            count++;\n            temp\
    \ += paren_string[i];\n        }\n        else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()())\
    \ ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
    , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
    \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
    })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
    (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057960
