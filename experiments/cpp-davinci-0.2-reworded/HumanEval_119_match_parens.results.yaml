language: cpp
name: HumanEval_119_match_parens
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  std::string\
    \ s = s1 + s2;\n  int cnt = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if\
    \ (s[i] == '(') {\n      cnt++;\n    } else {\n      cnt--;\n    }\n    if (cnt\
    \ < 0) {\n      return \"No\";\n    }\n  }\n  if (cnt == 0) {\n    return \"Yes\"\
    ;\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n    auto candidate =\
    \ match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz0rx_g9.cpp: In function 'int main()':\n/tmp/tmphz0rx_g9.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphz0rx_g9.cpp:2:\n/tmp/tmphz0rx_g9.cpp:39:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmphz0rx_g9.cpp:39:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmphz0rx_g9.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphz0rx_g9.cpp:39:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmphz0rx_g9.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmphz0rx_g9.cpp:40:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmphz0rx_g9.cpp:40:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int count = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    for\
    \ (int j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == '(') {\n     \
    \   count++;\n      } else {\n        count--;\n      }\n      if (count < 0)\
    \ {\n        return \"No\";\n      }\n    }\n  }\n  if (count == 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gcjplgp.cpp: In function 'int main()':\n/tmp/tmp9gcjplgp.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9gcjplgp.cpp:2:\n/tmp/tmp9gcjplgp.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp9gcjplgp.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp9gcjplgp.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9gcjplgp.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp9gcjplgp.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmp9gcjplgp.cpp:39:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmp9gcjplgp.cpp:39:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  int c1 = 0;\n\
    \  int c2 = 0;\n  for (int i = 0; i < s1.length(); i++) {\n    if (s1[i] == '(')\
    \ {\n      c1++;\n    } else {\n      c1--;\n    }\n  }\n  for (int i = 0; i <\
    \ s2.length(); i++) {\n    if (s2[i] == '(') {\n      c2++;\n    } else {\n  \
    \    c2--;\n    }\n  }\n  if (c1 == 0 && c2 == 0) {\n    return \"Yes\";\n  }\
    \ else if (c1 == -1 && c2 == 1) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ujy111p.cpp: In function 'int main()':\n/tmp/tmp4ujy111p.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4ujy111p.cpp:2:\n/tmp/tmp4ujy111p.cpp:45:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp4ujy111p.cpp:45:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp4ujy111p.cpp:45:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp4ujy111p.cpp:45:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp4ujy111p.cpp:46:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmp4ujy111p.cpp:46:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmp4ujy111p.cpp:46:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int open = 0;\n  int close = 0;\n  for (int i = 0; i < lst[0].size();\
    \ i++) {\n    if (lst[0][i] == '(') {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] ==\
    \ '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ == close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2ua1gqs.cpp: In function 'int main()':\n/tmp/tmpp2ua1gqs.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp2ua1gqs.cpp:2:\n/tmp/tmpp2ua1gqs.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpp2ua1gqs.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpp2ua1gqs.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpp2ua1gqs.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpp2ua1gqs.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpp2ua1gqs.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpp2ua1gqs.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  int c1 = 0;\n\
    \  int c2 = 0;\n  for (int i = 0; i < s1.length(); i++) {\n    if (s1[i] == '(')\
    \ {\n      c1++;\n    } else {\n      c1--;\n    }\n  }\n  for (int i = 0; i <\
    \ s2.length(); i++) {\n    if (s2[i] == '(') {\n      c2++;\n    } else {\n  \
    \    c2--;\n    }\n  }\n  if (c1 == 0 && c2 == 0) {\n    return \"Yes\";\n  }\
    \ else if (c1 > 0 && c2 < 0) {\n    if (c1 == -c2) {\n      return \"Yes\";\n\
    \    } else {\n      return \"No\";\n    }\n  } else if (c1 < 0 && c2 > 0) {\n\
    \    if (c2 == -c1) {\n      return \"Yes\";\n    } else {\n      return \"No\"\
    ;\n    }\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvoq_pkf.cpp: In function 'int main()':\n/tmp/tmplvoq_pkf.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplvoq_pkf.cpp:2:\n/tmp/tmplvoq_pkf.cpp:55:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmplvoq_pkf.cpp:55:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmplvoq_pkf.cpp:55:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmplvoq_pkf.cpp:55:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmplvoq_pkf.cpp:56:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmplvoq_pkf.cpp:56:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmplvoq_pkf.cpp:56:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int count = 0;\n  for (auto i : lst) {\n    for (auto j : i) {\n \
    \     if (j == '(') {\n        count++;\n      } else {\n        count--;\n  \
    \    }\n      if (count < 0) {\n        return \"No\";\n      }\n    }\n  }\n\
    \  if (count == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n\
    }\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtnhwmvc.cpp: In function 'std::string match_parens(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpbtnhwmvc.cpp:18:13: error: 'i' does not name a type\n   for (auto\
    \ i : lst) {\n             ^\n/tmp/tmpbtnhwmvc.cpp:30:3: error: expected ';' before\
    \ 'if'\n   if (count == 0) {\n   ^\n/tmp/tmpbtnhwmvc.cpp:30:3: error: expected\
    \ primary-expression before 'if'\n/tmp/tmpbtnhwmvc.cpp:30:3: error: expected ';'\
    \ before 'if'\n/tmp/tmpbtnhwmvc.cpp:30:3: error: expected primary-expression before\
    \ 'if'\n/tmp/tmpbtnhwmvc.cpp:30:3: error: expected ')' before 'if'\n/tmp/tmpbtnhwmvc.cpp:\
    \ In function 'int main()':\n/tmp/tmpbtnhwmvc.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = match_parens;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbtnhwmvc.cpp:2:\n/tmp/tmpbtnhwmvc.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpbtnhwmvc.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpbtnhwmvc.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpbtnhwmvc.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpbtnhwmvc.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int count = 0;\n  for (auto str : lst) {\n    for (auto c : str) {\n\
    \      if (c == '(') {\n        count++;\n      } else {\n        count--;\n \
    \     }\n      if (count < 0) {\n        return \"No\";\n      }\n    }\n  }\n\
    \  return count == 0 ? \"Yes\" : \"No\";\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nqjg28h.cpp: In function 'std::string match_parens(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp4nqjg28h.cpp:18:13: error: 'str' does not name a type\n   for\
    \ (auto str : lst) {\n             ^\n/tmp/tmp4nqjg28h.cpp:30:3: error: expected\
    \ ';' before 'return'\n   return count == 0 ? \"Yes\" : \"No\";\n   ^\n/tmp/tmp4nqjg28h.cpp:30:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp4nqjg28h.cpp:30:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp4nqjg28h.cpp:30:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp4nqjg28h.cpp:30:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp4nqjg28h.cpp: In function 'int main()':\n/tmp/tmp4nqjg28h.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nqjg28h.cpp:2:\n/tmp/tmp4nqjg28h.cpp:34:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp4nqjg28h.cpp:34:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp4nqjg28h.cpp:34:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp4nqjg28h.cpp:34:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp4nqjg28h.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  int count1\
    \ = 0;\n  int count2 = 0;\n  for (int i = 0; i < s1.length(); i++) {\n    if (s1[i]\
    \ == '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for\
    \ (int i = 0; i < s2.length(); i++) {\n    if (s2[i] == '(') {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n  }\n  if (count1 == 0 && count2 == 0)\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n\
    \    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1if8do8w.cpp: In function 'int main()':\n/tmp/tmp1if8do8w.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1if8do8w.cpp:2:\n/tmp/tmp1if8do8w.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp1if8do8w.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp1if8do8w.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp1if8do8w.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp1if8do8w.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmp1if8do8w.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmp1if8do8w.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < lst[0].size();\
    \ i++) {\n        if (lst[0][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    for (int i = 0; i < lst[1].size();\
    \ i++) {\n        if (lst[1][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    if (open == close) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint main()\
    \ {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx4pynqd.cpp: In function 'int main()':\n/tmp/tmprx4pynqd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprx4pynqd.cpp:2:\n/tmp/tmprx4pynqd.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmprx4pynqd.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmprx4pynqd.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmprx4pynqd.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmprx4pynqd.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmprx4pynqd.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmprx4pynqd.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return \"No\";\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxb21_oj5.cpp: In function 'int main()':\n/tmp/tmpxb21_oj5.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxb21_oj5.cpp:2:\n/tmp/tmpxb21_oj5.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpxb21_oj5.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpxb21_oj5.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxb21_oj5.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpxb21_oj5.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpxb21_oj5.cpp:39:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpxb21_oj5.cpp:39:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < lst[0].size();\
    \ i++) {\n        if (lst[0][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    for (int i = 0; i < lst[1].size();\
    \ i++) {\n        if (lst[1][i] == '(') {\n            open++;\n        } else\
    \ {\n            close++;\n        }\n    }\n    if (open == close) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint main()\
    \ {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx4pynqd.cpp: In function 'int main()':\n/tmp/tmprx4pynqd.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprx4pynqd.cpp:2:\n/tmp/tmprx4pynqd.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmprx4pynqd.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmprx4pynqd.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmprx4pynqd.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmprx4pynqd.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmprx4pynqd.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmprx4pynqd.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string str1 = lst[0];\n    std::string str2 = lst[1];\n   \
    \ int count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < str1.length();\
    \ i++) {\n        if (str1[i] == '(') {\n            count1++;\n        } else\
    \ {\n            count1--;\n        }\n    }\n    for (int i = 0; i < str2.length();\
    \ i++) {\n        if (str2[i] == '(') {\n            count2++;\n        } else\
    \ {\n            count2--;\n        }\n    }\n    if (count1 == 0 && count2 ==\
    \ 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7mjct_t.cpp: In function 'int main()':\n/tmp/tmph7mjct_t.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph7mjct_t.cpp:2:\n/tmp/tmph7mjct_t.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmph7mjct_t.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmph7mjct_t.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmph7mjct_t.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmph7mjct_t.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmph7mjct_t.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmph7mjct_t.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int count = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    for\
    \ (int j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == '(') {\n     \
    \   count++;\n      } else {\n        count--;\n      }\n      if (count < 0)\
    \ {\n        return \"No\";\n      }\n    }\n  }\n  if (count == 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gcjplgp.cpp: In function 'int main()':\n/tmp/tmp9gcjplgp.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9gcjplgp.cpp:2:\n/tmp/tmp9gcjplgp.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp9gcjplgp.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp9gcjplgp.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9gcjplgp.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp9gcjplgp.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmp9gcjplgp.cpp:39:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmp9gcjplgp.cpp:39:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int count = 0;\n    for (auto i : lst) {\n        for (auto j :\
    \ i) {\n            if (j == '(') {\n                count++;\n            } else\
    \ {\n                count--;\n            }\n            if (count < 0) {\n \
    \               return \"No\";\n            }\n        }\n    }\n    if (count\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcdf0sxj6.cpp: In function 'std::string match_parens(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpcdf0sxj6.cpp:18:15: error: 'i' does not name a type\n     for\
    \ (auto i : lst) {\n               ^\n/tmp/tmpcdf0sxj6.cpp:30:5: error: expected\
    \ ';' before 'if'\n     if (count == 0) {\n     ^\n/tmp/tmpcdf0sxj6.cpp:30:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpcdf0sxj6.cpp:30:5: error:\
    \ expected ';' before 'if'\n/tmp/tmpcdf0sxj6.cpp:30:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpcdf0sxj6.cpp:30:5: error: expected ')' before 'if'\n/tmp/tmpcdf0sxj6.cpp:\
    \ In function 'int main()':\n/tmp/tmpcdf0sxj6.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = match_parens;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcdf0sxj6.cpp:2:\n/tmp/tmpcdf0sxj6.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpcdf0sxj6.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpcdf0sxj6.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcdf0sxj6.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpcdf0sxj6.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by defa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int\
    \ count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < s1.length(); i++)\
    \ {\n        if (s1[i] == '(') {\n            count1++;\n        } else {\n  \
    \          count1--;\n        }\n    }\n    for (int i = 0; i < s2.length(); i++)\
    \ {\n        if (s2[i] == '(') {\n            count2++;\n        } else {\n  \
    \          count2--;\n        }\n    }\n    if (count1 == 0 && count2 == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksh29575.cpp: In function 'int main()':\n/tmp/tmpksh29575.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpksh29575.cpp:2:\n/tmp/tmpksh29575.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpksh29575.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpksh29575.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpksh29575.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpksh29575.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpksh29575.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpksh29575.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  int open = 0;\n  int close = 0;\n  for (int i = 0; i < lst[0].size();\
    \ i++) {\n    if (lst[0][i] == '(') {\n      open++;\n    } else {\n      close++;\n\
    \    }\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] ==\
    \ '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ == close) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2ua1gqs.cpp: In function 'int main()':\n/tmp/tmpp2ua1gqs.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp2ua1gqs.cpp:2:\n/tmp/tmpp2ua1gqs.cpp:41:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpp2ua1gqs.cpp:41:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpp2ua1gqs.cpp:41:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpp2ua1gqs.cpp:41:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpp2ua1gqs.cpp:42:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpp2ua1gqs.cpp:42:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpp2ua1gqs.cpp:42:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int\
    \ count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < s1.length(); i++)\
    \ {\n        if (s1[i] == '(') {\n            count1++;\n        } else {\n  \
    \          count1--;\n        }\n    }\n    for (int i = 0; i < s2.length(); i++)\
    \ {\n        if (s2[i] == '(') {\n            count2++;\n        } else {\n  \
    \          count2--;\n        }\n    }\n    if (count1 == 0 && count2 == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksh29575.cpp: In function 'int main()':\n/tmp/tmpksh29575.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpksh29575.cpp:2:\n/tmp/tmpksh29575.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpksh29575.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpksh29575.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpksh29575.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpksh29575.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpksh29575.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpksh29575.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    int count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return \"No\";\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nint main() {\n    auto candidate\
    \ = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxb21_oj5.cpp: In function 'int main()':\n/tmp/tmpxb21_oj5.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxb21_oj5.cpp:2:\n/tmp/tmpxb21_oj5.cpp:38:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpxb21_oj5.cpp:38:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpxb21_oj5.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpxb21_oj5.cpp:38:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpxb21_oj5.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpxb21_oj5.cpp:39:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpxb21_oj5.cpp:39:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n  std::string s1 = lst[0];\n  std::string s2 = lst[1];\n  int count1\
    \ = 0;\n  int count2 = 0;\n  for (int i = 0; i < s1.length(); i++) {\n    if (s1[i]\
    \ == '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for\
    \ (int i = 0; i < s2.length(); i++) {\n    if (s2[i] == '(') {\n      count2++;\n\
    \    } else {\n      count2--;\n    }\n  }\n  if (count1 == 0 && count2 == 0)\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nint main() {\n\
    \    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1if8do8w.cpp: In function 'int main()':\n/tmp/tmp1if8do8w.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1if8do8w.cpp:2:\n/tmp/tmp1if8do8w.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmp1if8do8w.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmp1if8do8w.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp1if8do8w.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmp1if8do8w.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmp1if8do8w.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmp1if8do8w.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of two strings, both strings consist of open\n// parentheses '(' or close parentheses\
    \ ')' only.\n// Your job is to check if it is possible to concatenate the two\
    \ strings in\n// some order, that the resulting string will be good.\n// A string\
    \ S is considered to be good if and only if all parentheses in S\n// are balanced.\
    \ For example: the string '(())()' is good, while the string\n// '())' is not.\n\
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
    // Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\"\
    , (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string>\
    \ lst) {\n    std::string s1 = lst[0];\n    std::string s2 = lst[1];\n    int\
    \ count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < s1.length(); i++)\
    \ {\n        if (s1[i] == '(') {\n            count1++;\n        } else {\n  \
    \          count1--;\n        }\n    }\n    for (int i = 0; i < s2.length(); i++)\
    \ {\n        if (s2[i] == '(') {\n            count2++;\n        } else {\n  \
    \          count2--;\n        }\n    }\n    if (count1 == 0 && count2 == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nint\
    \ main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    ((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    (\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksh29575.cpp: In function 'int main()':\n/tmp/tmpksh29575.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = match_parens;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpksh29575.cpp:2:\n/tmp/tmpksh29575.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                ^\n/tmp/tmpksh29575.cpp:43:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\"\
    )\"}))) == (\"Yes\"));\n                                                     \
    \                                 ^\n/tmp/tmpksh29575.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpksh29575.cpp:43:88: error: 'candidate' was not declared in\
    \ this scope\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    ()(\", (std::string)\")\"}))) == (\"Yes\"));\n                               \
    \                                                         ^\n/tmp/tmpksh29575.cpp:44:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \             ^\n/tmp/tmpksh29575.cpp:44:84: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    )\", (std::string)\")\"}))) == (\"No\"));\n                                  \
    \                                                  ^\n/tmp/tmpksh29575.cpp:44:84:\
    \ warning: extended initializer lists only available with -st"
  stdout: ''
