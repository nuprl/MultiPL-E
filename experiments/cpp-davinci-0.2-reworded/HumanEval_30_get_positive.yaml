name: HumanEval_30_get_positive
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
  \ in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4,\
  \ (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n//\
  \ >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3,\
  \ (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5,\
  \ (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
  \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
  \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
  \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2})))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  }\n"
completions: ["    std::vector<long> result;\n    for (auto i : l) {\n        if (i\
    \ > 0) {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0) {\n \
    \           result.push_back(i);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0) {\n  \
    \          result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        if (i > 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> ret;\n    for (auto i : l)\
    \ {\n        if (i > 0) {\n            ret.push_back(i);\n        }\n    }\n \
    \   return ret;", "    std::vector<long> result;\n    for (auto i : l) {\n   \
    \     if (i > 0) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    for (auto i : l) {\n        if (i\
    \ > 0) {\n            res.push_back(i);\n        }\n    }\n    return res;", " \
    \   std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0) {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for (auto i : l) {\n\
    \        if (i > 0) {\n            result.push_back(i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    for (auto i : l) {\n \
    \       if (i > 0) {\n            result.push_back(i);\n        }\n    }\n   \
    \ return result;", "    std::vector<long> res;\n    for (auto i : l) {\n     \
    \   if (i > 0) {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    for (auto i : l) {\n        if (i\
    \ > 0) {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0) {\n \
    \           result.push_back(i);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> res;\n    for (auto i : l) {\n        if (i > 0) {\n     \
    \       res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            result.push_back(l[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n\
    \    return result;", "    std::vector<long> res;\n    for (auto i : l) {\n  \
    \      if (i > 0) {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    for (auto i : l) {\n        if (i >\
    \ 0) {\n            res.push_back(i);\n        }\n    }\n    return res;"]
stop_tokens:
- "\n}"
