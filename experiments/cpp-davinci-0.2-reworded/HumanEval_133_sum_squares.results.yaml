language: cpp
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(float\
    \ i : lst){\n        sum += ceil(i) * ceil(i);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdcthx18.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpqdcthx18.cpp:19:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for(float i : lst){\n                   ^\n/tmp/tmpqdcthx18.cpp:\
    \ In function 'int main()':\n/tmp/tmpqdcthx18.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sum_squares;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqdcthx18.cpp:2:\n/tmp/tmpqdcthx18.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpqdcthx18.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpqdcthx18.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpqdcthx18.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqdcthx18.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqdcthx18.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn fi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += ceil(i) * ceil(i);\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2ujssk4.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpp2ujssk4.cpp:19:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected ')' before 'return'\n\
    /tmp/tmpp2ujssk4.cpp: In function 'int main()':\n/tmp/tmpp2ujssk4.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp2ujssk4.cpp:2:\n/tmp/tmpp2ujssk4.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpp2ujssk4.cpp:25:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpp2ujssk4.cpp:25:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpp2ujssk4.cpp:25:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp2ujssk4.cpp:25:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp2ujssk4.cpp:2:\n/usr/include/c++/4.8.2/b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\
    \t\tsum+=(ceil(lst[i])*ceil(lst[i]));\n\t}\n\treturn sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1igxx604.cpp: In function 'int main()':\n/tmp/tmp1igxx604.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1igxx604.cpp:2:\n/tmp/tmp1igxx604.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp1igxx604.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp1igxx604.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1igxx604.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1igxx604.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1igxx604.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1igxx604.cpp:2:\n/tmp/tmp1igxx604.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += (long)ceil(lst[i]) * (long)ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51mzb9c_.cpp: In function 'int main()':\n/tmp/tmp51mzb9c_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp51mzb9c_.cpp:2:\n/tmp/tmp51mzb9c_.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp51mzb9c_.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp51mzb9c_.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp51mzb9c_.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp51mzb9c_.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp51mzb9c_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp51mzb9c_.cpp:2:\n/tmp/tmp51mzb9c_.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ &i : lst) {\n    sum += ceil(i) * ceil(i);\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwqxchv0.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpkwqxchv0.cpp:19:14: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n   for (auto &i : lst) {\n              ^\n/tmp/tmpkwqxchv0.cpp:19:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n   for (auto &i\
    \ : lst) {\n                  ^\n/tmp/tmpkwqxchv0.cpp: In function 'int main()':\n\
    /tmp/tmpkwqxchv0.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sum_squares;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwqxchv0.cpp:2:\n/tmp/tmpkwqxchv0.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpkwqxchv0.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpkwqxchv0.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpkwqxchv0.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkwqxchv0.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkwqxchv0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _Input"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += ceil(i) * ceil(i);\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2ujssk4.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmpp2ujssk4.cpp:19:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpp2ujssk4.cpp:21:5: error: expected ')' before 'return'\n\
    /tmp/tmpp2ujssk4.cpp: In function 'int main()':\n/tmp/tmpp2ujssk4.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp2ujssk4.cpp:2:\n/tmp/tmpp2ujssk4.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpp2ujssk4.cpp:25:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpp2ujssk4.cpp:25:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpp2ujssk4.cpp:25:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp2ujssk4.cpp:25:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp2ujssk4.cpp:2:\n/usr/include/c++/4.8.2/b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        lst[i] = ceil(lst[i]);\n        sum +=\
    \ lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphkiiarez.cpp: In function 'int main()':\n/tmp/tmphkiiarez.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphkiiarez.cpp:2:\n/tmp/tmphkiiarez.cpp:27:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmphkiiarez.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmphkiiarez.cpp:27:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphkiiarez.cpp:27:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphkiiarez.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphkiiarez.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphkiiarez.cpp:2:\n/tmp/tmphkiiarez.cpp:27:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  int sum = 0;\n  for(int\
    \ i = 0; i < lst.size(); i++){\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8oztqt0l.cpp: In function 'int main()':\n/tmp/tmp8oztqt0l.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8oztqt0l.cpp:2:\n/tmp/tmp8oztqt0l.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp8oztqt0l.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp8oztqt0l.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp8oztqt0l.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8oztqt0l.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8oztqt0l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8oztqt0l.cpp:2:\n/tmp/tmp8oztqt0l.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += ceil(i) * ceil(i);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplndxieya.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmplndxieya.cpp:19:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst) {\n              ^\n/tmp/tmplndxieya.cpp:22:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmplndxieya.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmplndxieya.cpp:22:5: error: expected\
    \ ';' before 'return'\n/tmp/tmplndxieya.cpp:22:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmplndxieya.cpp:22:5: error: expected ')' before 'return'\n\
    /tmp/tmplndxieya.cpp: In function 'int main()':\n/tmp/tmplndxieya.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sum_squares;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplndxieya.cpp:2:\n/tmp/tmplndxieya.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmplndxieya.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmplndxieya.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmplndxieya.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplndxieya.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplndxieya.cpp:2:\n/usr/include/c++/4.8.2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += (long)ceil(lst[i]) * (long)ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51mzb9c_.cpp: In function 'int main()':\n/tmp/tmp51mzb9c_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp51mzb9c_.cpp:2:\n/tmp/tmp51mzb9c_.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp51mzb9c_.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp51mzb9c_.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp51mzb9c_.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp51mzb9c_.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp51mzb9c_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp51mzb9c_.cpp:2:\n/tmp/tmp51mzb9c_.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dt0_fxl.cpp: In function 'int main()':\n/tmp/tmp7dt0_fxl.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7dt0_fxl.cpp:2:\n/tmp/tmp7dt0_fxl.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp7dt0_fxl.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp7dt0_fxl.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp7dt0_fxl.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7dt0_fxl.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7dt0_fxl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7dt0_fxl.cpp:2:\n/tmp/tmp7dt0_fxl.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    sum += ceil(lst[i]) * ceil(lst[i]);\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3kq72uz.cpp: In function 'int main()':\n/tmp/tmpb3kq72uz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpb3kq72uz.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpb3kq72uz.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3kq72uz.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb3kq72uz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3kq72uz.cpp:2:\n/tmp/tmpb3kq72uz.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tsum += pow(ceil(lst[i]), 2);\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07bdmwpq.cpp: In function 'int main()':\n/tmp/tmp07bdmwpq.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp07bdmwpq.cpp:2:\n/tmp/tmp07bdmwpq.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp07bdmwpq.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp07bdmwpq.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp07bdmwpq.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp07bdmwpq.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp07bdmwpq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp07bdmwpq.cpp:2:\n/tmp/tmp07bdmwpq.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        sum += ceil(lst[i]) * ceil(lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpy9ik1v.cpp: In function 'int main()':\n/tmp/tmpdpy9ik1v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sum_squares;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmpdpy9ik1v.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdpy9ik1v.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdpy9ik1v.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdpy9ik1v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdpy9ik1v.cpp:2:\n/tmp/tmpdpy9ik1v.cpp:26:78: no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ of numbers.\n// You need to return the sum of squared numbers in the given vector,\n\
    // round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)2.0, (float)3.0})))\n// (14)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)4.0, (float)9.0})))\n// (98)\n\
    // >>> lst((std::vector<float>({(float)1.0, (float)3.0, (float)5.0, (float)7.0})))\n\
    // (84)\n// >>> lst((std::vector<float>({(float)1.4, (float)4.2, (float)0.0})))\n\
    // (29)\n// >>> lst((std::vector<float>({(float)-2.4, (float)1.0, (float)1.0})))\n\
    // (6)\nlong sum_squares(std::vector<float> lst) {\n  long sum = 0;\n  for (auto\
    \ i = lst.begin(); i != lst.end(); i++) {\n    sum += ceil(*i) * ceil(*i);\n \
    \ }\n  return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)3.0, (float)5.0, (float)7.0}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4,\
    \ (float)4.2, (float)0.0}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4,\
    \ (float)1.0, (float)1.0}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)1.0, (float)15.0, (float)2.0}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0,\
    \ (float)10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)4.6, (float)6.3}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4,\
    \ (float)17.9, (float)18.9, (float)19.9}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-1.0}))) == (1));\n\
    \    assert(candidate((std::vector<float>({(float)-1.0, (float)1.0, (float)0.0})))\
    \ == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8qha9_pl.cpp: In function 'long int sum_squares(std::vector<float>)':\n\
    /tmp/tmp8qha9_pl.cpp:19:13: error: 'i' does not name a type\n   for (auto i =\
    \ lst.begin(); i != lst.end(); i++) {\n             ^\n/tmp/tmp8qha9_pl.cpp:19:30:\
    \ error: expected ';' before 'i'\n   for (auto i = lst.begin(); i != lst.end();\
    \ i++) {\n                              ^\n/tmp/tmp8qha9_pl.cpp:19:30: error:\
    \ 'i' was not declared in this scope\n/tmp/tmp8qha9_pl.cpp: In function 'int main()':\n\
    /tmp/tmp8qha9_pl.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sum_squares;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8qha9_pl.cpp:2:\n/tmp/tmp8qha9_pl.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0}))) == (14));\n                                         ^\n/tmp/tmp8qha9_pl.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0}))) == (14));\n                                     \
    \                                         ^\n/tmp/tmp8qha9_pl.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp8qha9_pl.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8qha9_pl.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8qha9_pl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, "
  stdout: ''
