name: HumanEval_49_modp
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware\
  \ of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n\
  // >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100),\
  \ (101))\n// (1)\nlong modp(long n, long p) {\n"
tests: "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
  \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
  \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
  \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
  \ (5)) == (3));\n}\n"
completions: ["    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long res\
    \ = modp(n/2, p);\n        return (res * res) % p;\n    } else {\n        return\
    \ (modp(n-1, p) * n) % p;\n    }", "    if (n == 0) {\n        return 1;\n   \
    \ }\n    if (n % 2 == 0) {\n        long temp = modp(n / 2, p);\n        return\
    \ (temp * temp) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) %\
    \ p;\n    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n        return\
    \ (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n ==\
    \ 1) return n % p;\n    long res = 1;\n    for (long i = 0; i < n; i++) {\n  \
    \      res = (res * 2) % p;\n    }\n    return res;", "    if (n == 0) {\n   \
    \     return 1;\n    }\n    if (n == 1) {\n        return n;\n    }\n    long\
    \ res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n \
    \       res = (res * n) % p;\n    }\n    return res;", "  assert(p > 0);\n  if\
    \ (n < 0) {\n    n = p - (-n % p);\n  }\n  return n % p;", "    if (n == 0) return\
    \ 1;\n    long x = modp(n/2, p);\n    x = (x*x) % p;\n    if (n % 2 == 1) x =\
    \ (x*2) % p;\n    return x;", "    assert(p > 0);\n    if (n < 0) {\n        n\
    \ = p - (-n % p);\n    }\n    return n % p;", "    assert(p > 0);\n    assert(n\
    \ >= 0);\n    if (n == 0) {\n        return 1;\n    }\n    long res = modp(n /\
    \ 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n\
    \        n += p * ((-n / p) + 1);\n    }\n    return n % p;", "    assert(p >\
    \ 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    } else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    if (n == 0) {\n        return 1;\n    }\n  \
    \  if (n % 2 == 0) {\n        long x = modp(n / 2, p);\n        return (x * x)\
    \ % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "  if (n == 0) return 1;\n\
    \  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n\
    \  } else {\n    return (modp(n - 1, p) * n) % p;\n  }", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return n % p;\n    long res = 1;\n    while (n > 0) {\n\
    \        if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n\
    \ * n) % p;\n    }\n    return res;", "    assert(p > 0);\n    if (n < 0) {\n\
    \        n = (n % p) + p;\n    }\n    return n % p;", "    assert(p > 0);\n  \
    \  if (n < 0) {\n        n = n % p + p;\n    }\n    return n % p;", "    if (n\
    \ == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long y = modp(n\
    \ / 2, p);\n        return (y * y) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "  assert(p > 0);\n  if (n < 0) {\n    n = p - (-n % p);\n  }\n  return\
    \ n % p;", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n\
    \        long temp = modp(n / 2, p);\n        return (temp * temp) % p;\n    }\n\
    \    else {\n        return (modp(n - 1, p) * n) % p;\n    }", "    assert(p >\
    \ 0);\n    if (n < 0) {\n        n = p - (-n % p);\n    }\n    return n % p;"]
stop_tokens:
- "\n}"
