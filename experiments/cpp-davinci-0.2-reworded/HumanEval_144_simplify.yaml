name: HumanEval_144_simplify
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement\
  \ a function that will simplify the expression\n// x * n. The function returns true\
  \ if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are\
  \ string representation of a fraction, and have the following format,\n// <numerator>/<denominator>\
  \ where both numerator and denominator are positive whole numbers.\n// You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n// >>>\
  \ simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"\
  ))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string\
  \ x, std::string n) {\n"
tests: "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"\
  1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"\
  1/5\"), (\"1/5\")) == (false));\n}\n"
completions: ["    int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(), \"%d/%d\"\
    , &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n    return\
    \ (x_num * n_den) % (x_den * n_num) == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (x_num * n_den) % (x_den * n_num) == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    if (result_numerator % result_denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "    // Your code here\n    int num1, num2, den1,\
    \ den2;\n    std::stringstream ss(x);\n    std::stringstream ss1(n);\n    std::string\
    \ temp;\n    getline(ss, temp, '/');\n    num1 = std::stoi(temp);\n    getline(ss,\
    \ temp, '/');\n    den1 = std::stoi(temp);\n    getline(ss1, temp, '/');\n   \
    \ num2 = std::stoi(temp);\n    getline(ss1, temp, '/');\n    den2 = std::stoi(temp);\n\
    \    if(num1*den2 == num2*den1)\n        return true;\n    return false;", " \
    \ // your code here\n  std::stringstream ss(x);\n  std::stringstream ss2(n);\n\
    \  int a,b,c,d;\n  char c1,c2;\n  ss>>a>>c1>>b;\n  ss2>>c>>c2>>d;\n  if(a*d==b*c)\n\
    \    return true;\n  return false;", "    // Your code here\n    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    if (numerator % denominator == 0) {\n        return true;\n    }\n    return\
    \ false;", "  // Your code here\n  int num1, num2, den1, den2;\n  int i = 0;\n\
    \  int j = 0;\n  while(x[i] != '/'){\n    num1 = num1*10 + (x[i] - '0');\n   \
    \ i++;\n  }\n  i++;\n  while(x[i] != '\\0'){\n    den1 = den1*10 + (x[i] - '0');\n\
    \    i++;\n  }\n  while(n[j] != '/'){\n    num2 = num2*10 + (n[j] - '0');\n  \
    \  j++;\n  }\n  j++;\n  while(n[j] != '\\0'){\n    den2 = den2*10 + (n[j] - '0');\n\
    \    j++;\n  }\n  if((num1*den2)%(num2*den1) == 0){\n    return true;\n  }\n \
    \ else{\n    return false;\n  }", "    int x_num, x_den, n_num, n_den;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    std::string temp;\n    std::getline(ss1,\
    \ temp, '/');\n    x_num = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n\
    \    x_den = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    n_num =\
    \ std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    n_den = std::stoi(temp);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "    // Your code\
    \ here\n    int num1, num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::string temp;\n    std::getline(ss1, temp, '/');\n    num1\
    \ = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    den2 = std::stoi(temp);\n    int num = num1 * num2;\n    int\
    \ den = den1 * den2;\n    if (num % den == 0) {\n        return true;\n    }\n\
    \    return false;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;", "    std::stringstream ss(x);\n    std::string item;\n    std::vector<std::string>\
    \ tokens;\n    while (std::getline(ss, item, '/')) {\n        tokens.push_back(item);\n\
    \    }\n    int x_numerator = std::stoi(tokens[0]);\n    int x_denominator = std::stoi(tokens[1]);\n\
    \    tokens.clear();\n    ss.clear();\n    ss.str(n);\n    while (std::getline(ss,\
    \ item, '/')) {\n        tokens.push_back(item);\n    }\n    int n_numerator =\
    \ std::stoi(tokens[0]);\n    int n_denominator = std::stoi(tokens[1]);\n    int\
    \ result_numerator = x_numerator * n_numerator;\n    int result_denominator =\
    \ x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    std::stringstream ss(x);\n    std::stringstream ss2(n);\n    int\
    \ a, b, c, d;\n    char c1, c2;\n    ss >> a >> c1 >> b;\n    ss2 >> c >> c2 >>\
    \ d;\n    assert(c1 == '/' && c2 == '/');\n    return (a * d) % (b * c) == 0;",
  "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int a = std::stoi(x.substr(0, x.find(\"/\")));\n    int b = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int c = std::stoi(n.substr(0, n.find(\"/\")));\n    int d = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (a * d) % (b * c) == 0;", "    std::stringstream ss(x);\n\
    \    std::string item;\n    std::vector<std::string> tokens;\n    while (std::getline(ss,\
    \ item, '/')) {\n        tokens.push_back(item);\n    }\n    int numerator = std::stoi(tokens[0]);\n\
    \    int denominator = std::stoi(tokens[1]);\n    std::stringstream ss1(n);\n\
    \    std::string item1;\n    std::vector<std::string> tokens1;\n    while (std::getline(ss1,\
    \ item1, '/')) {\n        tokens1.push_back(item1);\n    }\n    int numerator1\
    \ = std::stoi(tokens1[0]);\n    int denominator1 = std::stoi(tokens1[1]);\n  \
    \  int result = numerator * numerator1;\n    int result1 = denominator * denominator1;\n\
    \    if (result % result1 == 0) {\n        return true;\n    }\n    return false;",
  "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_num, x_den, n_num, n_den;\n    std::stringstream ss;\n  \
    \  ss << x;\n    ss >> x_num;\n    ss.clear();\n    ss << n;\n    ss >> n_num;\n\
    \    ss.clear();\n    ss << x;\n    ss.ignore(1, '/');\n    ss >> x_den;\n   \
    \ ss.clear();\n    ss << n;\n    ss.ignore(1, '/');\n    ss >> n_den;\n    ss.clear();\n\
    \    if (x_num * n_den * n_num * x_den % (x_den * n_den) == 0) {\n        return\
    \ true;\n    }\n    return false;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    int gcd = std::__gcd(numerator, denominator);\n    numerator /= gcd;\n  \
    \  denominator /= gcd;\n    return numerator % denominator == 0;", "    int a,b,c,d;\n\
    \    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n\
    \    return (a*d)%(b*c)==0;", "    int x_numerator, x_denominator, n_numerator,\
    \ n_denominator;\n    std::stringstream ss;\n    ss << x;\n    ss >> x_numerator;\n\
    \    ss.ignore();\n    ss >> x_denominator;\n    ss.clear();\n    ss << n;\n \
    \   ss >> n_numerator;\n    ss.ignore();\n    ss >> n_denominator;\n    int numerator\
    \ = x_numerator * n_denominator;\n    int denominator = x_denominator * n_numerator;\n\
    \    if (numerator % denominator == 0) {\n        return true;\n    }\n    return\
    \ false;", "    int num1 = std::stoi(x.substr(0, x.find('/')));\n    int den1\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int num2 = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int den2 = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = num1 * num2;\n    int den = den1 * den2;\n    if (num % den == 0) {\n\
    \        return true;\n    }\n    return false;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int product_numerator = x_numerator\
    \ * n_numerator;\n  int product_denominator = x_denominator * n_denominator;\n\
    \  return product_numerator % product_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    // Write your code\
    \ here\n    int num1, den1, num2, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::string temp;\n    std::getline(ss1, temp, '/');\n    num1\
    \ = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    den2 = std::stoi(temp);\n    int num = num1 * num2;\n    int\
    \ den = den1 * den2;\n    if (num % den == 0)\n        return true;\n    else\n\
    \        return false;", "    // Your code here\n    int num1, den1, num2, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> num1;\n\
    \    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n    ss2.ignore();\n  \
    \  ss2 >> den2;\n    int num = num1 * num2;\n    int den = den1 * den2;\n    if\
    \ (num % den == 0)\n        return true;\n    else\n        return false;", " \
    \   int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    std::stringstream ss;\n    ss << x << \" \" << n;\n    int a, b,\
    \ c, d;\n    char ch;\n    ss >> a >> ch >> b >> c >> ch >> d;\n    return (a\
    \ * d) % (b * c) == 0;", "    int numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ numerator2 = std::stoi(n.substr(0, n.find(\"/\")));\n    int denominator2 =\
    \ std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator3 = numerator * denominator2;\n\
    \    int denominator3 = denominator * numerator2;\n    if (numerator3 % denominator3\
    \ == 0) {\n        return true;\n    }\n    return false;", "    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    int x1, x2, n1, n2;\n    char c;\n\
    \    ss1 >> x1 >> c >> x2;\n    ss2 >> n1 >> c >> n2;\n    return (x1 * n2) %\
    \ (x2 * n1) == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    std::stringstream\
    \ ss(x);\n    std::stringstream ss2(n);\n    int num1, num2, den1, den2;\n   \
    \ char c;\n    ss >> num1 >> c >> den1;\n    ss2 >> num2 >> c >> den2;\n    int\
    \ num = num1 * num2;\n    int den = den1 * den2;\n    if (num % den == 0) {\n\
    \        return true;\n    }\n    return false;", "    std::stringstream ss(x);\n\
    \    std::stringstream ss2(n);\n    std::string item;\n    std::string item2;\n\
    \    std::getline(ss, item, '/');\n    std::getline(ss2, item2, '/');\n    int\
    \ numerator = std::stoi(item);\n    int denominator = std::stoi(item2);\n    int\
    \ result = numerator * denominator;\n    if (result % denominator == 0) {\n  \
    \      return true;\n    }\n    return false;", "    std::stringstream ss(x);\n\
    \    int a, b;\n    char c;\n    ss >> a >> c >> b;\n    std::stringstream ss2(n);\n\
    \    int a2, b2;\n    char c2;\n    ss2 >> a2 >> c2 >> b2;\n    return (a * b2)\
    \ % (b * a2) == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    // Your code here\n\
    \    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    return num % den == 0;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  if (num\
    \ % den == 0) {\n    return true;\n  }\n  return false;", "    int x_num, x_den,\
    \ n_num, n_den;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n\
    \    char c;\n    ss1 >> x_num >> c >> x_den;\n    ss2 >> n_num >> c >> n_den;\n\
    \    // std::cout << x_num << \" \" << x_den << \" \" << n_num << \" \" << n_den\
    \ << std::endl;\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n\
    \    // std::cout << num << \" \" << den << std::endl;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    int x_num, x_den, n_num,\
    \ n_den;\n    std::stringstream ss(x);\n    std::stringstream ss2(n);\n    char\
    \ c;\n    ss >> x_num >> c >> x_den;\n    ss2 >> n_num >> c >> n_den;\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    std::stringstream ss(x);\n\
    \    std::stringstream ss2(n);\n    int a, b, c, d;\n    char ch;\n    ss >> a\
    \ >> ch >> b;\n    ss2 >> c >> ch >> d;\n    return (a * d) % (b * c) == 0;",
  "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int product_numerator = x_numerator * n_numerator;\n    int product_denominator\
    \ = x_denominator * n_denominator;\n    return product_numerator % product_denominator\
    \ == 0;", "    std::stringstream ss(x);\n    std::stringstream ss2(n);\n    int\
    \ x1, x2, n1, n2;\n    char c;\n    ss >> x1 >> c >> x2;\n    ss2 >> n1 >> c >>\
    \ n2;\n    if (x1 * n2 == x2 * n1) {\n        return true;\n    }\n    return\
    \ false;", "    // Your code here\n    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return (numerator % denominator == 0);", "    // Your code here\n    int\
    \ x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int product_numerator = x_numerator * n_numerator;\n    int product_denominator\
    \ = x_denominator * n_denominator;\n    return (product_numerator % product_denominator\
    \ == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    // your code here\n    return true;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    if (result_numerator % result_denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  if (num % den == 0) {\n    return\
    \ true;\n  }\n  return false;", "    int x_numerator, x_denominator, n_numerator,\
    \ n_denominator;\n    std::stringstream ss;\n    ss << x;\n    ss >> x_numerator;\n\
    \    ss.ignore();\n    ss >> x_denominator;\n    ss.clear();\n    ss << n;\n \
    \   ss >> n_numerator;\n    ss.ignore();\n    ss >> n_denominator;\n    ss.clear();\n\
    \    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    if (result_numerator % result_denominator\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "  int x_numerator =\
    \ 0;\n  int x_denominator = 0;\n  int n_numerator = 0;\n  int n_denominator =\
    \ 0;\n  int i = 0;\n  while (x[i] != '/') {\n    x_numerator = x_numerator * 10\
    \ + (x[i] - '0');\n    i++;\n  }\n  i++;\n  while (i < x.length()) {\n    x_denominator\
    \ = x_denominator * 10 + (x[i] - '0');\n    i++;\n  }\n  i = 0;\n  while (n[i]\
    \ != '/') {\n    n_numerator = n_numerator * 10 + (n[i] - '0');\n    i++;\n  }\n\
    \  i++;\n  while (i < n.length()) {\n    n_denominator = n_denominator * 10 +\
    \ (n[i] - '0');\n    i++;\n  }\n  if (x_numerator * n_denominator == x_denominator\
    \ * n_numerator) {\n    return true;\n  }\n  return false;", "    int x_num, x_den,\
    \ n_num, n_den;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n\
    \    ss1 >> x_num;\n    ss1.ignore();\n    ss1 >> x_den;\n    ss2 >> n_num;\n\
    \    ss2.ignore();\n    ss2 >> n_den;\n    int num = x_num * n_num;\n    int den\
    \ = x_den * n_den;\n    return (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    if (result_numerator % result_denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "    std::stringstream ss(x);\n    std::stringstream\
    \ ss2(n);\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n \
    \   char slash;\n    ss >> x_numerator >> slash >> x_denominator;\n    ss2 >>\
    \ n_numerator >> slash >> n_denominator;\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    if (result_numerator % result_denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "  // Your code here\n\
    \  int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  return numerator % denominator == 0;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  return\
    \ num % den == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int numerator_x, denominator_x, numerator_n, denominator_n;\n \
    \   std::stringstream ss_x(x);\n    std::stringstream ss_n(n);\n    char slash;\n\
    \    ss_x >> numerator_x >> slash >> denominator_x;\n    ss_n >> numerator_n >>\
    \ slash >> denominator_n;\n    int numerator_product = numerator_x * numerator_n;\n\
    \    int denominator_product = denominator_x * denominator_n;\n    return numerator_product\
    \ % denominator_product == 0;", "    int x_num = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num\
    \ % den == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_num, x_den, n_num, n_den;\n    std::stringstream ss(x);\n\
    \    std::stringstream ss2(n);\n    ss >> x_num;\n    ss.ignore();\n    ss >>\
    \ x_den;\n    ss2 >> n_num;\n    ss2.ignore();\n    ss2 >> n_den;\n    int num\
    \ = x_num * n_num;\n    int den = x_den * n_den;\n    return num % den == 0;",
  "    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    int a, b, c,\
    \ d;\n    char ch;\n    ss1 >> a >> ch >> b;\n    ss2 >> c >> ch >> d;\n    return\
    \ (a * d) % (b * c) == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator = x_numerator *\
    \ n_numerator;\n    int denominator = x_denominator * n_denominator;\n    if (numerator\
    \ % denominator == 0) {\n        return true;\n    }\n    return false;", "  \
    \  int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(), \"%d/%d\", &x_num, &x_den);\n\
    \    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n    int num = x_num * n_num;\n\
    \    int den = x_den * n_den;\n    int gcd = __gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    return num % den == 0;", "    int num1, den1, num2, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> num1;\n\
    \    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n    ss2.ignore();\n  \
    \  ss2 >> den2;\n    int num = num1 * num2;\n    int den = den1 * den2;\n    return\
    \ (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "  int x_numerator =\
    \ std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n  return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;", "    int x_num, x_den,\
    \ n_num, n_den;\n    std::stringstream ss(x);\n    std::stringstream ss1(n);\n\
    \    std::string temp;\n    std::getline(ss, temp, '/');\n    x_num = std::stoi(temp);\n\
    \    std::getline(ss, temp, '/');\n    x_den = std::stoi(temp);\n    std::getline(ss1,\
    \ temp, '/');\n    n_num = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n\
    \    n_den = std::stoi(temp);\n    int num = x_num * n_num;\n    int den = x_den\
    \ * n_den;\n    if (num % den == 0) {\n        return true;\n    }\n    return\
    \ false;", "    // your code here\n    int numerator, denominator;\n    std::stringstream\
    \ ss(x);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n\
    \    while (std::getline(ss, item, '/')) {\n        splittedStrings.push_back(item);\n\
    \    }\n    numerator = std::stoi(splittedStrings[0]);\n    denominator = std::stoi(splittedStrings[1]);\n\
    \    std::stringstream ss1(n);\n    std::vector<std::string> splittedStrings1;\n\
    \    while (std::getline(ss1, item, '/')) {\n        splittedStrings1.push_back(item);\n\
    \    }\n    int numerator1 = std::stoi(splittedStrings1[0]);\n    int denominator1\
    \ = std::stoi(splittedStrings1[1]);\n    int result = numerator * denominator1;\n\
    \    int result1 = numerator1 * denominator;\n    if (result % result1 == 0)\n\
    \        return true;\n    else\n        return false;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd\
    \ = std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return num % den ==\
    \ 0;", "    // Your code here\n    std::stringstream ss(x);\n    std::string item;\n\
    \    std::vector<std::string> tokens;\n    while (std::getline(ss, item, '/'))\
    \ {\n        tokens.push_back(item);\n    }\n    int x_num = std::stoi(tokens[0]);\n\
    \    int x_den = std::stoi(tokens[1]);\n    std::stringstream ss1(n);\n    std::string\
    \ item1;\n    std::vector<std::string> tokens1;\n    while (std::getline(ss1,\
    \ item1, '/')) {\n        tokens1.push_back(item1);\n    }\n    int n_num = std::stoi(tokens1[0]);\n\
    \    int n_den = std::stoi(tokens1[1]);\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    if (num % den == 0) {\n        return true;\n    }\n\
    \    return false;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    if (numerator % denominator == 0) {\n\
    \        return true;\n    }\n    return false;", "    // Your code here\n   \
    \ int num1, num2, den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::string temp;\n    std::getline(ss1, temp, '/');\n    num1\
    \ = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    den1 = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    den2 = std::stoi(temp);\n    int num = num1 * num2;\n    int\
    \ den = den1 * den2;\n    if (num % den == 0) {\n        return true;\n    }\n\
    \    return false;", "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "    int\
    \ x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    if (result_numerator % result_denominator\
    \ == 0) {\n        return true;\n    }\n    return false;", "  // your code here\n\
    \  int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = x_num * n_num;\n  int\
    \ den = x_den * n_den;\n  if (num % den == 0) {\n    return true;\n  }\n  return\
    \ false;", "    // Your code here\n    int x_numerator, x_denominator, n_numerator,\
    \ n_denominator;\n    std::stringstream ss(x);\n    std::stringstream ss2(n);\n\
    \    std::string temp;\n    getline(ss, temp, '/');\n    x_numerator = std::stoi(temp);\n\
    \    getline(ss, temp, '/');\n    x_denominator = std::stoi(temp);\n    getline(ss2,\
    \ temp, '/');\n    n_numerator = std::stoi(temp);\n    getline(ss2, temp, '/');\n\
    \    n_denominator = std::stoi(temp);\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return (numerator %\
    \ denominator == 0);", "    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n\
    \    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;", "    int\
    \ x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;", "  int x_numerator, x_denominator, n_numerator, n_denominator;\n  std::stringstream\
    \ ss(x);\n  std::stringstream ss2(n);\n  std::string temp;\n  std::getline(ss,\
    \ temp, '/');\n  x_numerator = std::stoi(temp);\n  std::getline(ss, temp, '/');\n\
    \  x_denominator = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_numerator\
    \ = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_denominator = std::stoi(temp);\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  if (numerator % denominator == 0) {\n    return true;\n\
    \  }\n  return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int lcm = std::lcm(x_denominator,\
    \ n_denominator);\n    int x_lcm = lcm / x_denominator;\n    int n_lcm = lcm /\
    \ n_denominator;\n    return (x_numerator * x_lcm * n_numerator * n_lcm) % lcm\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return numerator % denominator == 0;",
  "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int x_numerator_new = x_numerator * n_denominator;\n    int x_denominator_new\
    \ = x_denominator * n_numerator;\n    if (x_numerator_new % x_denominator_new\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    int gcd = std::__gcd(numerator, denominator);\n    numerator /= gcd;\n  \
    \  denominator /= gcd;\n    return numerator % denominator == 0;", "  int x_num\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = x_num * n_num;\n  int\
    \ den = x_den * n_den;\n  return num % den == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return num\
    \ % den == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int x_numerator_new = x_numerator * n_denominator;\n    int x_denominator_new\
    \ = x_denominator * n_numerator;\n    if (x_numerator_new % x_denominator_new\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int x_product = x_numerator\
    \ * n_numerator;\n    int n_product = x_denominator * n_denominator;\n    return\
    \ (x_product % n_product == 0);", "    int numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ numerator2 = std::stoi(n.substr(0, n.find(\"/\")));\n    int denominator2 =\
    \ std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator3 = numerator * denominator2;\n\
    \    int denominator3 = denominator * numerator2;\n    if (numerator3 % denominator3\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int num1, num2,\
    \ den1, den2;\n    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n\
    \    ss1 >> num1;\n    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n   \
    \ ss2.ignore();\n    ss2 >> den2;\n    int num = num1 * num2;\n    int den = den1\
    \ * den2;\n    return (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "  // your code here\n\
    \  std::stringstream ss(x);\n  std::stringstream ss2(n);\n  std::string token;\n\
    \  std::string token2;\n  std::vector<std::string> v;\n  std::vector<std::string>\
    \ v2;\n  while(std::getline(ss, token, '/')) {\n    v.push_back(token);\n  }\n\
    \  while(std::getline(ss2, token2, '/')) {\n    v2.push_back(token2);\n  }\n \
    \ int num1 = std::stoi(v[0]);\n  int den1 = std::stoi(v[1]);\n  int num2 = std::stoi(v2[0]);\n\
    \  int den2 = std::stoi(v2[1]);\n  int num = num1 * num2;\n  int den = den1 *\
    \ den2;\n  if(num % den == 0) {\n    return true;\n  }\n  return false;"]
stop_tokens:
- "\n}"
