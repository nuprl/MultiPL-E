name: HumanEval_84_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n\
  // (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\"\
  )\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n\
  // a string of binary number\nstd::string solve(long N) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000))\
  \ == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147))\
  \ == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963))\
  \ == (\"10010\"));\n}\n"
completions: ["    std::string s = \"\";\n    while(N > 0) {\n        s += std::to_string(N\
    \ % 2);\n        N /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;", "    std::stringstream ss;\n    ss << std::bitset<32>(N);\n    std::string\
    \ s = ss.str();\n    std::string result = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == '1') {\n            result += s[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    while (N > 0) {\n \
    \       result += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::string result;\n    while (N\
    \ > 0) {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n\
    \    }\n    return result;", "    std::stringstream ss;\n    while (N > 0) {\n\
    \        ss << N % 2;\n        N /= 2;\n    }\n    std::string s = ss.str();\n\
    \    std::reverse(s.begin(), s.end());\n    return s;", "    std::string binary\
    \ = \"\";\n    while (N > 0) {\n        binary = std::to_string(N % 2) + binary;\n\
    \        N /= 2;\n    }\n    return binary;", "    std::stringstream ss;\n   \
    \ ss << std::bitset<32>(N);\n    std::string s = ss.str();\n    int i = 0;\n \
    \   while(s[i] == '0') {\n        i++;\n    }\n    return s.substr(i);", "   \
    \ std::stringstream ss;\n    while (N > 0) {\n        ss << N % 2;\n        N\
    \ /= 2;\n    }\n    std::string s = ss.str();\n    std::reverse(s.begin(), s.end());\n\
    \    return s;", "    std::string result;\n    while (N > 0) {\n        result\
    \ += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::string binary = \"\";\n    while\
    \ (N > 0) {\n        binary = std::to_string(N % 2) + binary;\n        N /= 2;\n\
    \    }\n    return binary;", "    std::stringstream ss;\n    while (N > 0) {\n\
    \        ss << N % 2;\n        N /= 2;\n    }\n    std::string s = ss.str();\n\
    \    std::reverse(s.begin(), s.end());\n    return s;", "  std::stringstream ss;\n\
    \  while (N > 0) {\n    ss << N % 2;\n    N /= 2;\n  }\n  std::string s = ss.str();\n\
    \  std::reverse(s.begin(), s.end());\n  return s;", "    std::string result;\n\
    \    while (N > 0) {\n        result += std::to_string(N % 2);\n        N /= 2;\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;",
  "    std::string res = \"\";\n    while(N > 0) {\n        res = std::to_string(N\
    \ % 2) + res;\n        N /= 2;\n    }\n    return res;", "    std::stringstream\
    \ ss;\n    while (N) {\n        ss << N % 2;\n        N /= 2;\n    }\n    std::string\
    \ s = ss.str();\n    std::reverse(s.begin(), s.end());\n    return s;", "    std::stringstream\
    \ ss;\n    std::string s;\n    ss << std::bitset<32>(N);\n    ss >> s;\n    int\
    \ i = 0;\n    while(s[i] == '0') {\n        i++;\n    }\n    return s.substr(i);",
  "    std::string binary = \"\";\n    while (N > 0) {\n        binary = std::to_string(N\
    \ % 2) + binary;\n        N /= 2;\n    }\n    return binary;", "    std::string\
    \ result;\n    while (N) {\n        result += (N & 1) ? '1' : '0';\n        N\
    \ >>= 1;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
  "    std::stringstream ss;\n    while (N > 0) {\n        ss << N % 2;\n        N\
    \ /= 2;\n    }\n    std::string s = ss.str();\n    std::reverse(s.begin(), s.end());\n\
    \    return s;", "    std::stringstream ss;\n    ss << std::bitset<32>(N);\n \
    \   return ss.str();"]
stop_tokens:
- "\n}"
