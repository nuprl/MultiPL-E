name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n\
  // (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n\
  // (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["  std::string roman;\n  std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral\
    \ : roman_numerals) {\n    while (number >= roman_numeral.first) {\n      roman\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return roman;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[13] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= values[i]) {\n            number -= values[i];\n            roman\
    \ += roman_numerals[i];\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::vector<std::pair<long, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"\
    },\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto &i : roman_numerals)\
    \ {\n        while (number >= i.first) {\n            roman += i.second;\n   \
    \         number -= i.first;\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& roman_numeral : roman_numerals) {\n        while\
    \ (number >= roman_numeral.first) {\n            roman += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; ++i) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto& rn : roman_numerals) {\n        while (number >= rn.first)\
    \ {\n            roman += rn.second;\n            number -= rn.first;\n      \
    \  }\n    }\n    return roman;", "    std::string roman;\n    int num[] = {1,\
    \ 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string sym[] =\
    \ {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\",\
    \ \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number > 0) {\n        int\
    \ div = number / num[i];\n        number = number % num[i];\n        while (div--)\
    \ {\n            roman += sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n    \
    \        roman += roman_numerals[i];\n        }\n    }\n    return roman;", " \
    \   std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& p : roman_numerals) {\n        while (number >= p.first)\
    \ {\n            result += p.second;\n            number -= p.first;\n       \
    \ }\n    }\n    return result;", "    std::string roman;\n    int i = 0;\n   \
    \ while (number > 0) {\n        if (number >= 1000) {\n            roman += \"\
    m\";\n            number -= 1000;\n        } else if (number >= 900) {\n     \
    \       roman += \"cm\";\n            number -= 900;\n        } else if (number\
    \ >= 500) {\n            roman += \"d\";\n            number -= 500;\n       \
    \ } else if (number >= 400) {\n            roman += \"cd\";\n            number\
    \ -= 400;\n        } else if (number >= 100) {\n            roman += \"c\";\n\
    \            number -= 100;\n        } else if (number >= 90) {\n            roman\
    \ += \"xc\";\n            number -= 90;\n        } else if (number >= 50) {\n\
    \            roman += \"l\";\n            number -= 50;\n        } else if (number\
    \ >= 40) {\n            roman += \"xl\";\n            number -= 40;\n        }\
    \ else if (number >= 10) {\n            roman += \"x\";\n            number -=\
    \ 10;\n        } else if (number >= 9) {\n            roman += \"ix\";\n     \
    \       number -= 9;\n        } else if (number >= 5) {\n            roman +=\
    \ \"v\";\n            number -= 5;\n        } else if (number >= 4) {\n      \
    \      roman += \"iv\";\n            number -= 4;\n        } else if (number >=\
    \ 1) {\n            roman += \"i\";\n            number -= 1;\n        }\n   \
    \ }\n    return roman;", "    // Write your code here\n    std::string roman;\n\
    \    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    std::string\
    \ sym[] = {\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"\
    d\",\"cm\",\"m\"};\n    int i=12;\n    while(number>0)\n    {\n        int div\
    \ = number/num[i];\n        number = number%num[i];\n        while(div--)\n  \
    \      {\n            roman+=sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    int i = 0;\n    while (number > 0) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n        i++;\n    }\n   \
    \ return roman;", "    std::string roman = \"\";\n    std::string ones[] = {\"\
    \", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\
    \    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\"\
    , \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\", \"c\", \"cc\"\
    , \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n    std::string\
    \ thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman += thousands[number\
    \ / 1000];\n    roman += hundreds[(number % 1000) / 100];\n    roman += tens[(number\
    \ % 100) / 10];\n    roman += ones[number % 10];\n    return roman;", "    std::string\
    \ result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= values[i]) {\n            number\
    \ -= values[i];\n            result += roman_numerals[i];\n        }\n    }\n\
    \    return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string hundreds[] = {\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n\
    \    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n    roman = thousands[number\
    \ / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number\
    \ % 10];\n    return roman;", "    std::string result;\n    std::string roman[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while\
    \ (number >= value[i]) {\n            number -= value[i];\n            result\
    \ += roman[i];\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
