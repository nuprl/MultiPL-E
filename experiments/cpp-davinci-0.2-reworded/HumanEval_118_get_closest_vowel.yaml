name: HumanEval_118_get_closest_vowel
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your\
  \ task is to find the closest vowel that stands between \n// two consonants from\
  \ the right side of the word (case sensitive).\n// Vowels in the beginning and ending\
  \ doesn't count. Return empty string if you didn't\n// find any vowel met the above\
  \ condition. \n// You may assume that the given string contains English letter only.\n\
  // Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"\
  FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"\
  ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n"
tests: "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
  yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
  easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
  ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
  most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
  ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
  anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
  Above\")) == (\"o\"));\n}\n"
completions: ["    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (index == -1) {\n                index = i;\n            } else {\n        \
    \        if (word[index] == word[i]) {\n                    index = i;\n     \
    \           } else {\n                    break;\n                }\n        \
    \    }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    int i =\
    \ word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if (i == word.size() - 1) {\n            \
    \    return \"\";\n            }\n            if (vowels.find(word[i + 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (index == -1) {\n                index\
    \ = i;\n            } else {\n                if (i + 1 < index) {\n         \
    \           result = word[i];\n                    break;\n                }\n\
    \            }\n        } else {\n            index = -1;\n        }\n    }\n\
    \    return result;", "    int len = word.length();\n    for(int i = len-1; i\
    \ > 0; i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u') {\n            if(word[i-1] != 'a' && word[i-1]\
    \ != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u') {\n    \
    \            return word.substr(i,1);\n            }\n        }\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance =\
    \ INT_MAX;\n    int word_length = word.length();\n    for (int i = 0; i < word_length;\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (word[i] == vowels[j]) {\n                int distance = word_length - i - 1;\n\
    \                if (distance < closest_vowel_distance) {\n                  \
    \  closest_vowel_distance = distance;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return std::string(1, word[closest_vowel_index]);",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    int word_length = word.length();\n \
    \   for (int i = 0; i < word_length; i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i > 0 && i < word_length - 1) {\n \
    \               if (vowels.find(word[i - 1]) == std::string::npos && vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                    if (closest_vowel_index ==\
    \ -1) {\n                        closest_vowel_index = i;\n                  \
    \      closest_vowel = word[i];\n                    } else {\n              \
    \          if (i > closest_vowel_index) {\n                            closest_vowel_index\
    \ = i;\n                            closest_vowel = word[i];\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return closest_vowel;", "    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    int i = index - 1;\n    while (i\
    \ >= 0) {\n        if (vowels.find(word[i]) == std::string::npos) {\n        \
    \    return word.substr(i + 1, index - i);\n        }\n        i--;\n    }\n \
    \   return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    int word_length = word.length();\n    for (int i = 0; i < word_length; i++)\
    \ {\n        char current_char = word[i];\n        if (vowels.find(current_char)\
    \ != std::string::npos) {\n            if (i == 0) {\n                if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                    closest_vowel = current_char;\n\
    \                    closest_vowel_index = i;\n                }\n           \
    \ } else if (i == word_length - 1) {\n                if (vowels.find(word[i -\
    \ 1]) == std::string::npos) {\n                    closest_vowel = current_char;\n\
    \                    closest_vowel_index = i;\n                }\n           \
    \ } else {\n                if (vowels.find(word[i - 1]) == std::string::npos\
    \ && vowels.find(word[i + 1]) == std::string::npos) {\n                    closest_vowel\
    \ = current_char;\n                    closest_vowel_index = i;\n            \
    \    }\n            }\n        }\n    }\n    return closest_vowel;", "    // Your\
    \ code here\n    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n\
    \    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.length() - i;\n            if (distance < min_distance) {\n\
    \                min_distance = distance;\n                index = i;\n      \
    \      }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ res = \"\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            res = word[i];\n            break;\n  \
    \      }\n    }\n    return res;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "\tstd::string vowels = \"aeiou\";\n\t\
    std::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index >=\
    \ 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;", " \
    \   // Your code here\n    int n = word.length();\n    int i = n-1;\n    while(i>=0){\n\
    \        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u'\
    \ || word[i]=='A' || word[i]=='E' || word[i]=='I' || word[i]=='O' || word[i]=='U'){\n\
    \            if(i==n-1){\n                return \"\";\n            }\n      \
    \      else{\n                if(word[i-1]=='a' || word[i-1]=='e' || word[i-1]=='i'\
    \ || word[i-1]=='o' || word[i-1]=='u' || word[i-1]=='A' || word[i-1]=='E' || word[i-1]=='I'\
    \ || word[i-1]=='O' || word[i-1]=='U'){\n                    return \"\";\n  \
    \              }\n                else{\n                    return word.substr(i,1);\n\
    \                }\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            } else {\n     \
    \           if (i < closest_vowel_index) {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        } else {\n            if (closest_vowel_index != -1) {\n \
    \               return closest_vowel;\n            }\n        }\n    }\n    return\
    \ \"\";", "    // Your code here\n    std::string vowels = \"aeiouAEIOU\";\n \
    \   int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            else if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       i--;\n                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    int len = word.length();\n    int i = len - 1;\n  \
    \  while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            if (i == len - 1) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[i + 1]) == std::string::npos) {\n          \
    \      return word.substr(i, 1);\n            }\n        }\n        i--;\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    int pos = word.length()\
    \ - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos == 0) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[pos - 1]) == std::string::npos) {\n        \
    \        return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n \
    \       if (vowels.find(word[pos]) != std::string::npos) {\n            result\
    \ = word[pos];\n            break;\n        }\n        pos--;\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n    \
    \    if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "    int i = word.size() - 1;\n    while (i >= 0) {\n        if (word[i] ==\
    \ 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            break;\n        }\n        i--;\n    }\n    if (i == 0) {\n \
    \       return \"\";\n    }\n    int j = i - 1;\n    while (j >= 0) {\n      \
    \  if (word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' &&\
    \ word[j] != 'u') {\n            break;\n        }\n        j--;\n    }\n    if\
    \ (j == -1) {\n        return \"\";\n    }\n    return word.substr(j + 1, i -\
    \ j);", "    std::string vowels = \"aeiou\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = -1;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.size() - i;\n            if (closest_vowel_distance == -1 ||\
    \ distance < closest_vowel_distance) {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = i;\n            }\n     \
    \   }\n    }\n    if (closest_vowel_index == -1) {\n        return \"\";\n   \
    \ }\n    for (int i = closest_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(closest_vowel_index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "\tstd::string vowels = \"aeiouAEIOU\";\n\tint len = word.length();\n\tint i = len\
    \ - 1;\n\twhile (i >= 0) {\n\t\tif (vowels.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tif (i == len - 1) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tif (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n\t\t\t\treturn word.substr(i, 1);\n\t\t\t}\n\t\
    \t}\n\t\ti--;\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = word.length() - 1;\n    int vowel_index = -1;\n    while (index\
    \ >= 0) {\n        if (consonants.find(word[index]) != std::string::npos) {\n\
    \            vowel_index = index;\n            break;\n        }\n        index--;\n\
    \    }\n    if (vowel_index == -1) return \"\";\n    index = vowel_index + 1;\n\
    \    while (index < word.length()) {\n        if (vowels.find(word[index]) !=\
    \ std::string::npos) {\n            return std::string(1, word[index]);\n    \
    \    }\n        index++;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiou\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   index = i;\n            break;\n        }\n    }\n    if (index == -1) {\n\
    \        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       i--;\n                continue;\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";", "\tstd::string\
    \ vowels = \"aeiou\";\n\tstd::string result = \"\";\n\tint index = -1;\n\tfor\
    \ (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) !=\
    \ std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ == -1) {\n\t\treturn result;\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\
    \t\tif (vowels.find(word[i]) == std::string::npos) {\n\t\t\tresult = word[index];\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiou\"\
    ;\n    int vowel_index = -1;\n    int distance = INT_MAX;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_index = i;\n            break;\n        }\n    }\n    if\
    \ (vowel_index == -1) {\n        return \"\";\n    }\n    for (int i = vowel_index\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            distance = vowel_index - i;\n            break;\n        }\n\
    \    }\n    if (distance == INT_MAX) {\n        return \"\";\n    }\n    for (int\
    \ i = vowel_index + 1; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            if (i - vowel_index < distance) {\n   \
    \             return word.substr(vowel_index, 1);\n            }\n           \
    \ break;\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n   \
    \ int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int distance\
    \ = word.length() - i;\n            if (distance < min_distance) {\n         \
    \       min_distance = distance;\n                index = i;\n            }\n\
    \        }\n    }\n    if (index != -1) {\n        result = word[index];\n   \
    \ }\n    return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string\
    \ result = \"\";\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0;\
    \ i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tindex =\
    \ i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\t}\n\
    \tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) == std::string::npos)\
    \ {\n\t\t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
  "    std::string vowels = \"aeiou\";\n    std::string closest_vowel = \"\";\n  \
    \  int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n    for\
    \ (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int left_consonant_index = -1;\n            int right_consonant_index\
    \ = -1;\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ == std::string::npos) {\n                    left_consonant_index = j;\n   \
    \                 break;\n                }\n            }\n            for (int\
    \ j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ == std::string::npos) {\n                    right_consonant_index = j;\n  \
    \                  break;\n                }\n            }\n            if (left_consonant_index\
    \ != -1 && right_consonant_index != -1) {\n                int vowel_distance\
    \ = right_consonant_index - left_consonant_index;\n                if (closest_vowel_distance\
    \ == -1 || vowel_distance < closest_vowel_distance) {\n                    closest_vowel_distance\
    \ = vowel_distance;\n                    closest_vowel_index = i;\n          \
    \      }\n            }\n        }\n    }\n    if (closest_vowel_index != -1)\
    \ {\n        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n\
    \    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n    \
    \            return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string res = \"\";\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            res = word[i];\n            break;\n     \
    \   }\n    }\n    return res;", "    std::string vowels = \"aeiouAEIOU\";\n  \
    \  std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) return result;\n    for\
    \ (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index > 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            if\
    \ (vowels.find(word[index - 1]) == std::string::npos) {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   index = i;\n            break;\n        }\n    }\n    if (index == -1) return\
    \ result;\n    for (int i = index + 1; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index = i;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    if (result == \"\") {\n        return result;\n    }\n\
    \    int index_vowel = index;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ == std::string::npos) {\n            break;\n        }\n        index--;\n \
    \   }\n    if (index == -1) {\n        return \"\";\n    }\n    index = index_vowel\
    \ + 1;\n    while (index < word.length()) {\n        if (vowels.find(word[index])\
    \ == std::string::npos) {\n            break;\n        }\n        index++;\n \
    \   }\n    if (index == word.length()) {\n        return \"\";\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size()\
    \ - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.size() - 1) {\n                i--;\n         \
    \       continue;\n            }\n            if (vowels.find(word[i + 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.length()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \    std::vector<char> consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n    std::vector<char>::iterator\
    \ it;\n    std::vector<char>::iterator it2;\n    std::vector<char>::iterator it3;\n\
    \    std::vector<char>::iterator it4;\n    std::vector<char>::iterator it5;\n\
    \    std::vector<char>::iterator it6;\n    std::vector<char>::iterator it7;\n\
    \    std::vector<char>::iterator it8;\n    std::vector<char>::iterator it9;\n\
    \    std::vector<char>::iterator it10;\n    std::vector<char>::iterator it11;\n\
    \    std::vector<char>::iterator it12;\n    std::vector<char>::iterator it13;\n\
    \    std::vector<char>::iterator it14;\n    std::vector<char>::iterator it15;\n\
    \    std::vector<char>::iterator it16;\n    std::vector<char>::iterator it17;\n\
    \    std::vector<char>::iterator it18;\n    std::vector<char>::iterator it19;\n\
    \    std::vector<char>::iterator it20;\n    std::vector<char>::iterator it21;\n\
    \    std::vector<char>::iterator it22;\n    std::vector<char>::iterator it23;\n\
    \    std::vector<char>::iterator it24;\n    std::vector<char>::iterator it25;\n\
    \    std::vector<char>::iterator it26;\n    std::vector<char>::iterator it27;\n\
    \    std::vector<char>::iterator it28;\n    std::vector<char>::iterator it29;\n\
    \    std::vector<char>::iterator it30;\n    std::vector<char>::iterator it31;\n\
    \    std::vector<", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          if (i == word.length() - 1) {\n                return result;\n   \
    \         }\n            for (int j = i + 1; j < word.length(); j++) {\n     \
    \           if (vowels.find(word[j]) != std::string::npos) {\n               \
    \     if (index == -1) {\n                        index = j;\n               \
    \     } else {\n                        if (j < index) {\n                   \
    \         index = j;\n                        }\n                    }\n     \
    \           }\n            }\n            if (index != -1) {\n               \
    \ result = word[index];\n            }\n            return result;\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index != -1)\
    \ {\n        for (int i = index - 1; i >= 0; i--) {\n            if (vowels.find(word[i])\
    \ == std::string::npos) {\n                result = word[index];\n           \
    \     break;\n            }\n        }\n    }\n    return result;", "    // Your\
    \ code here\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            else if(vowels.find(word[i + 1]) != std::string::npos)\
    \ {\n                return \"\";\n            }\n            else {\n       \
    \         return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = word.length() - 1; i >= 0; i--) {\n       \
    \ if (vowels.find(word[i]) != std::string::npos) {\n            if (i == word.length()\
    \ - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                result = word[i];\n                break;\n        \
    \    }\n        } else {\n            index = -1;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size()\
    \ - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.size() - 1) {\n                return \"\";\n \
    \           }\n            if (vowels.find(word[i+1]) == std::string::npos) {\n\
    \                return word.substr(i, 1);\n            }\n        }\n       \
    \ i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "\tstd::string\
    \ vowels = \"aeiou\";\n\tint index = word.size() - 1;\n\twhile (index >= 0) {\n\
    \t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tif (index == 0)\
    \ {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tif (vowels.find(word[index - 1]) ==\
    \ std::string::npos) {\n\t\t\t\treturn word.substr(index, 1);\n\t\t\t}\n\t\t}\n\
    \t\tindex--;\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                break;\n            }\n        } else if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (index != -1) {\n                result\
    \ = word[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n \
    \   int min = INT_MAX;\n    for (int i = 0; i < word.length(); i++) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            int j = i - 1;\n\
    \            while (j >= 0 && vowels.find(word[j]) != std::string::npos) {\n \
    \               j--;\n            }\n            if (j >= 0) {\n             \
    \   int k = i + 1;\n                while (k < word.length() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.length()) {\n                    if (min > k - j) {\n\
    \                        min = k - j;\n                        index = i;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ if (index != -1) {\n        return word.substr(index, 1);\n    }\n    return\
    \ \"\";", "    // Your code here\n    std::string vowels = \"aeiouAEIOU\";\n \
    \   int pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n  \
    \          break;\n        }\n    }\n    if (pos == -1) return \"\";\n    for\
    \ (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    // Your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.length() - i;\n            if (distance < min_distance) {\n\
    \                min_distance = distance;\n                index = i;\n      \
    \      }\n        }\n    }\n    if (index != -1) {\n        result += word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n \
    \   for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.length() - i;\n   \
    \         if (closest_vowel_distance == -1 || distance < closest_vowel_distance)\
    \ {\n                closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_index != -1) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int pos = word.length() - 1;\n  \
    \  while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos > 0 && vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos == 0) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ int len = word.length();\n    int i = len - 1;\n    while (i >= 0) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            if (i == len\
    \ - 1) {\n                return \"\";\n            }\n            if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;", "    // your code here\n    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) return \"\";\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(pos, 1);\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ if (index == 0) {\n        return \"\";\n    }\n    index--;\n    while (index\
    \ >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n    \
    \        return \"\";\n        }\n        index--;\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = word.length() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    int len = word.length();\n    int i = len - 1;\n    while(i >=\
    \ 0) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            if(i == len - 1) {\n              \
    \  return \"\";\n            }\n            else if(i == 0) {\n              \
    \  return \"\";\n            }\n            else if(word[i - 1] == 'a' || word[i\
    \ - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u')\
    \ {\n                i--;\n            }\n            else if(word[i + 1] == 'a'\
    \ || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i\
    \ + 1] == 'u') {\n                i--;\n            }\n            else {\n  \
    \              return word.substr(i, 1);\n            }\n        }\n        else\
    \ {\n            i--;\n        }\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = word.length() - 1;\n    while (index >= 0) {\n        if (consonants.find(word[index])\
    \ != std::string::npos) {\n            break;\n        }\n        index--;\n \
    \   }\n    if (index == 0) {\n        return \"\";\n    }\n    for (int i = index\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            return word.substr(i, 1);\n        }\n    }\n    return \"\";",
  "    // Your code here\n    int len = word.length();\n    int i = len - 1;\n   \
    \ while(i >= 0) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u') {\n            if(i == len - 1) {\n   \
    \             return \"\";\n            }\n            else if(word[i + 1] ==\
    \ 'a' || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i\
    \ + 1] == 'u') {\n                return \"\";\n            }\n            else\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    if (index == 0) {\n        return \"\";\n    }\n    int index_vowel\
    \ = index;\n    while (index >= 0) {\n        if (vowels.find(word[index]) ==\
    \ std::string::npos) {\n            if (index_vowel - index == 1) {\n        \
    \        return result;\n            }\n            index_vowel = index;\n   \
    \     }\n        index--;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return closest_vowel;\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    // Your code\
    \ here\n    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n\
    \    int pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n \
    \           break;\n        }\n    }\n    if (pos == -1) {\n        return result;\n\
    \    }\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[pos];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int pos = word.size() - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            if (pos > 0 && vowels.find(word[pos - 1])\
    \ == std::string::npos) {\n                return word.substr(pos, 1);\n     \
    \       }\n        }\n        pos--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int word_size = word.size();\n    int vowel_pos\
    \ = -1;\n    for (int i = word_size - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            vowel_pos = i;\n            break;\n  \
    \      }\n    }\n    if (vowel_pos == -1) {\n        return \"\";\n    }\n   \
    \ for (int i = vowel_pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(vowel_pos, 1);\n   \
    \     }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   // Your code here\n    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int k = i + 1;\n                while (k < word.length() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.length()) {\n                    if (min_distance > k\
    \ - j) {\n                        min_distance = k - j;\n                    \
    \    result = word[i];\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return result;", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int len =\
    \ word.length();\n    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(consonants.find(word[i + 1]) != std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = word.length() - 1;\n    while\
    \ (index > 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            if (vowels.find(word[index - 1]) == std::string::npos) {\n      \
    \          result = word[index];\n                break;\n            }\n    \
    \    }\n        index--;\n    }\n    return result;", "\tstd::string vowels =\
    \ \"aeiou\";\n\tint i = word.length() - 1;\n\twhile (i >= 0) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tif (i == word.length() - 1) {\n\t\t\t\treturn\
    \ \"\";\n\t\t\t}\n\t\t\tif (vowels.find(word[i + 1]) == std::string::npos) {\n\
    \t\t\t\treturn word.substr(i, 1);\n\t\t\t}\n\t\t}\n\t\ti--;\n\t}\n\treturn \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == len - 1) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return result;\n        }\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size() - 1;\n\
    \    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == word.size() - 1) {\n                i--;\n         \
    \       continue;\n            }\n            if (vowels.find(word[i + 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiou\";\n    int pos = word.length() - 1;\n    while (pos >= 0) {\n   \
    \     if (vowels.find(word[pos]) != std::string::npos) {\n            return word.substr(pos,\
    \ 1);\n        }\n        pos--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance\
    \ = -1;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.size() && vowels.find(word[j]) != std::string::npos) {\n              \
    \  j++;\n            }\n            if (j < word.size()) {\n                if\
    \ (closest_vowel_distance == -1 || j - i < closest_vowel_distance) {\n       \
    \             closest_vowel_distance = j - i;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return word.substr(closest_vowel_index,\
    \ 1);", "    // Your code here\n    std::string vowels = \"aeiouAEIOU\";\n   \
    \ int len = word.length();\n    int i = len - 1;\n    while(i >= 0) {\n      \
    \  if(vowels.find(word[i]) != std::string::npos) {\n            if(i == len -\
    \ 1) {\n                return \"\";\n            }\n            else if(vowels.find(word[i\
    \ + 1]) != std::string::npos) {\n                return \"\";\n            }\n\
    \            else {\n                return word.substr(i, 1);\n            }\n\
    \        }\n        i--;\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    int pos = word.size() - 1;\n    while (pos >= 0) {\n  \
    \      if (vowels.find(word[pos]) != std::string::npos) {\n            if (pos\
    \ == 0) {\n                return \"\";\n            }\n            if (vowels.find(word[pos\
    \ - 1]) == std::string::npos) {\n                return word.substr(pos, 1);\n\
    \            }\n        }\n        pos--;\n    }\n    return \"\";", "    int\
    \ i = word.size() - 1;\n    while (i >= 0) {\n        if (word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  break;\n        }\n        i--;\n    }\n    if (i == 0) {\n        return \"\
    \";\n    }\n    int j = i - 1;\n    while (j >= 0) {\n        if (word[j] != 'a'\
    \ && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u') {\n\
    \            break;\n        }\n        j--;\n    }\n    if (j == -1) {\n    \
    \    return \"\";\n    }\n    return word.substr(j + 1, i - j);", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiou\";\n    int pos = -1;\n\
    \    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiou\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      closest_vowel = word[i];\n            closest_vowel_index = i;\n      \
    \      break;\n        }\n    }\n    if (closest_vowel_index == -1) {\n      \
    \  return \"\";\n    }\n    for (int i = closest_vowel_index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    int min_distance\
    \ = word.length();\n    for (int i = 0; i < word.length(); i++) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            int j = i - 1;\n\
    \            while (j >= 0 && vowels.find(word[j]) != std::string::npos) {\n \
    \               j--;\n            }\n            if (j >= 0) {\n             \
    \   int k = i + 1;\n                while (k < word.length() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.length()) {\n                    if (k - i < min_distance)\
    \ {\n                        min_distance = k - i;\n                        index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int vowel_index = -1;\n\
    \    int word_length = word.length();\n    for (int i = word_length - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      vowel_index = i;\n            break;\n        }\n    }\n    if (vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = vowel_index - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n      \
    \      return word.substr(vowel_index, 1);\n        }\n    }\n    return \"\";",
  "  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n  int index =\
    \ -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ != std::string::npos) {\n      index = i;\n      break;\n    }\n  }\n  if (index\
    \ == -1) {\n    return result;\n  }\n  for (int i = index - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) == std::string::npos) {\n      result = word[index];\n\
    \      break;\n    }\n  }\n  return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i < closest_vowel_index) {\n      \
    \              closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        } else {\n            if (closest_vowel_index\
    \ != -1) {\n                return closest_vowel;\n            }\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return \"\"\
    ;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ int n = word.length();\n    int i = n - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n - 1) {\n                return\
    \ \"\";\n            }\n            else if(vowels.find(word[i + 1]) != std::string::npos)\
    \ {\n                return \"\";\n            }\n            else {\n       \
    \         return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        for (int j = 0; j < vowels.length(); j++) {\n           \
    \ if (word[i] == vowels[j]) {\n                index = i;\n                break;\n\
    \            }\n        }\n        if (index != -1) {\n            break;\n  \
    \      }\n    }\n    if (index != -1) {\n        for (int i = index - 1; i >=\
    \ 0; i--) {\n            for (int j = 0; j < vowels.length(); j++) {\n       \
    \         if (word[i] == vowels[j]) {\n                    return result;\n  \
    \              }\n            }\n            for (int j = 0; j < vowels.length();\
    \ j++) {\n                if (word[index] == vowels[j]) {\n                  \
    \  result = word[index];\n                    return result;\n               \
    \ }\n            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length() - 1;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           index = i;\n            break;\n        }\n    }\n    if (index ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    int vowel_pos\
    \ = -1;\n    int word_len = word.length();\n    for (int i = word_len - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      vowel_pos = i;\n            break;\n        }\n    }\n    if (vowel_pos\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = vowel_pos - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n      \
    \      return word.substr(vowel_pos, 1);\n        }\n    }\n    return \"\";",
  "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.size() - 1;\n    while\
    \ (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos) {\n     \
    \       if (i == word.size() - 1) {\n                return \"\";\n          \
    \  }\n            if (vowels.find(word[i + 1]) == std::string::npos) {\n     \
    \           return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int\
    \ i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            else if (vowels.find(word[i + 1]) == std::string::npos) {\n\
    \                return word.substr(i, 1);\n            }\n        }\n       \
    \ i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    std::string result = \"\";\n    int index = 0;\n    int min_distance = word.length();\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.length() - i;\n   \
    \         if (distance < min_distance) {\n                min_distance = distance;\n\
    \                index = i;\n            }\n        }\n    }\n    if (min_distance\
    \ != word.length()) {\n        for (int i = index; i >= 0; i--) {\n          \
    \  if (consonants.find(word[i]) != std::string::npos) {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n    }\n  \
    \  return result;", "    // Write your code here\n    std::string vowels = \"\
    aeiouAEIOU\";\n    int len = word.length();\n    int i = len - 1;\n    while(i\
    \ >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n         \
    \   if(i == len - 1) {\n                return \"\";\n            }\n        \
    \    else {\n                if(vowels.find(word[i+1]) != std::string::npos) {\n\
    \                    return \"\";\n                }\n                else {\n\
    \                    return word.substr(i, 1);\n                }\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n   \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int i = word.length() - 1;\n    while (i >= 0) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n\
    \            break;\n        }\n        i--;\n    }\n    if (result == \"\") {\n\
    \        return result;\n    }\n    i--;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            return result;\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ closest_vowel = \"\";\n    int min_distance = INT_MAX;\n    int distance = 0;\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.length();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   distance = j - i;\n                    if (distance < min_distance)\
    \ {\n                        min_distance = distance;\n                      \
    \  closest_vowel = word[i];\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result += word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int min_distance = word.length();\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.length() - i;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = word.size() - i - 1;\n \
    \           if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i - 1;\n            while (j >= 0 && vowels.find(word[j])\
    \ != std::string::npos) {\n                j--;\n            }\n            if\
    \ (j >= 0) {\n                int distance = i - j;\n                if (distance\
    \ < min_distance) {\n                    min_distance = distance;\n          \
    \          index = i;\n                }\n            }\n        }\n    }\n  \
    \  if (index != -1) {\n        result += word[index];\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while (j >=\
    \ 0 && vowels.find(word[j]) != std::string::npos) {\n                j--;\n  \
    \          }\n            if (j >= 0) {\n                int distance = i - j;\n\
    \                if (distance < min_distance) {\n                    min_distance\
    \ = distance;\n                    result = word[i];\n                }\n    \
    \        }\n        }\n    }\n    return result;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    for (int i = len - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if (i == len - 1) {\n                return\
    \ \"\";\n            }\n            if (vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i - 1; j >= 0; j--) {\n  \
    \              if (vowels.find(word[j]) == std::string::npos) {\n            \
    \        if (closest_vowel_distance == -1 || closest_vowel_distance > i - j) {\n\
    \                        closest_vowel_distance = i - j;\n                   \
    \     closest_vowel_index = i;\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ != -1) {\n        closest_vowel = word.substr(closest_vowel_index, 1);\n   \
    \ }\n    return closest_vowel;", "    std::string vowels = \"aeiouAEIOU\";\n \
    \   int vowel_index = -1;\n    int vowel_distance = -1;\n    for (int i = 0; i\
    \ < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i > 0 && vowels.find(word[i-1]) == std::string::npos) {\n\
    \                if (vowel_distance == -1 || i - vowel_index < vowel_distance)\
    \ {\n                    vowel_index = i;\n                    vowel_distance\
    \ = i - vowel_index;\n                }\n            }\n        }\n    }\n   \
    \ if (vowel_index == -1) {\n        return \"\";\n    }\n    return word.substr(vowel_index,\
    \ 1);", "    std::string vowels = \"aeiou\";\n    int pos = word.length() - 1;\n\
    \    while (pos > 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (vowels.find(word[pos - 1]) == std::string::npos) {\n    \
    \            return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "\tstd::string vowels = \"aeiou\";\n\tstd::string result\
    \ = \"\";\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\
    \t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tindex = i;\n\t\t\t\
    break;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\t}\n\tfor (int\
    \ i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) == std::string::npos)\
    \ {\n\t\t\treturn word[index];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    int i = n - 1;\n \
    \   while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            if(i == n - 1) {\n                return \"\";\n            }\n \
    \           if(vowels.find(word[i + 1]) == std::string::npos) {\n            \
    \    return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";", "  std::string vowels = \"aeiouAEIOU\";\n  std::string result\
    \ = \"\";\n  int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) != std::string::npos) {\n      index = i;\n    \
    \  break;\n    }\n  }\n  if (index == -1) {\n    return result;\n  }\n  for (int\
    \ i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos)\
    \ {\n      result = word[index];\n      break;\n    }\n  }\n  return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int\
    \ i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            else if(vowels.find(word[i+1]) != std::string::npos) {\n        \
    \        continue;\n            }\n            else {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n    }\n    return \"\";", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n  \
    \  std::string result = \"\";\n    int index = word.length() - 1;\n    while (index\
    \ >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n    \
    \        result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    int min_distance = word.length();\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i + 1;\n            while (j <\
    \ word.length() && vowels.find(word[j]) != std::string::npos) {\n            \
    \    j++;\n            }\n            if (j < word.length()) {\n             \
    \   if (j - i < min_distance) {\n                    min_distance = j - i;\n \
    \                   index = i;\n                }\n            }\n           \
    \ i = j;\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ closest_vowel = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            } else {\n     \
    \           if (i + 1 < closest_vowel_index) {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        } else {\n            if (closest_vowel_index != -1) {\n \
    \               return closest_vowel;\n            }\n        }\n    }\n    return\
    \ \"\";", "  // your code here\n  int n = word.length();\n  int i;\n  for(i =\
    \ n-1; i >= 0; i--) {\n    if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u') {\n      break;\n    }\n  }\n  if(i ==\
    \ 0) {\n    return \"\";\n  }\n  for(int j = i-1; j >= 0; j--) {\n    if(word[j]\
    \ != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u')\
    \ {\n      return word.substr(i, 1);\n    }\n  }\n  return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                break;\n            }\n        } else if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (index != -1) {\n                result\
    \ = word[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == 0) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::string\
    \ vowels = \"aeiou\";\n    int index = -1;\n    for(int i = word.length() - 1;\
    \ i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n  \
    \          index = i;\n            break;\n        }\n    }\n    if(index == -1)\
    \ {\n        return \"\";\n    }\n    int count = 0;\n    for(int i = index -\
    \ 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            count++;\n        }\n    }\n    if(count % 2 == 0) {\n        return\
    \ \"\";\n    }\n    return word.substr(index, 1);", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string result = \"\";\n    int i = word.length() -\
    \ 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n        i--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    int last_index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   last_index = i;\n            break;\n        }\n    }\n    if (last_index\
    \ == -1) {\n        return result;\n    }\n    return word.substr(index, 1);",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ min_distance = word.length();\n    for (int i = 0; i < word.length(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int k = i + 1;\n                while (k < word.length() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.length()) {\n                    int distance = k - j\
    \ - 1;\n                    if (distance < min_distance) {\n                 \
    \       min_distance = distance;\n                        result = word.substr(i,\
    \ 1);\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return result;", "    std::string vowels = \"aeiou\";\n    int index\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int j = i;\n            while (j < word.size()\
    \ && vowels.find(word[j]) != std::string::npos) {\n                j++;\n    \
    \        }\n            if (j < word.size() && vowels.find(word[j]) == std::string::npos)\
    \ {\n                int k = j;\n                while (k < word.size() && vowels.find(word[k])\
    \ == std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.size() && vowels.find(word[k]) != std::string::npos)\
    \ {\n                    if (k - i < closest_vowel_distance) {\n             \
    \           closest_vowel_distance = k - i;\n                        closest_vowel_index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \   }\n    if (closest_vowel_index == -1) {\n        return \"\";\n    }\n   \
    \ return word.substr(closest_vowel_index, 1);", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i == word.size() - 1) {\n         \
    \       return \"\";\n            }\n            if (vowels.find(word[i + 1])\
    \ == std::string::npos) {\n                return word.substr(i, 1);\n       \
    \     }\n        }\n        i--;\n    }\n    return \"\";", "    // Write your\
    \ code here\n    std::string vowels = \"aeiou\";\n    int index = word.size()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.size() - 1) {\n                index--;\n \
    \               continue;\n            }\n            if (vowels.find(word[index\
    \ + 1]) == std::string::npos) {\n                return word.substr(index, 1);\n\
    \            }\n        }\n        index--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int n = word.length();\n    for(int i = n-1; i\
    \ >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n    \
    \        if(i == n-1) {\n                return \"\";\n            }\n       \
    \     else if(vowels.find(word[i+1]) != std::string::npos) {\n               \
    \ continue;\n            }\n            else {\n                return word.substr(i,\
    \ 1);\n            }\n        }\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = 0;\n    int min_dist = INT_MAX;\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int dist = 0;\n            for (int j =\
    \ i + 1; j < word.length(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    dist = j - i;\n               \
    \     break;\n                }\n            }\n            if (dist < min_dist)\
    \ {\n                min_dist = dist;\n                index = i;\n          \
    \  }\n        }\n    }\n    if (min_dist != INT_MAX) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    int index\
    \ = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            if (index == word.size() - 1) {\n     \
    \           return \"\";\n            }\n            if (vowels.find(word[index\
    \ + 1]) == std::string::npos) {\n                return word.substr(index, 1);\n\
    \            }\n        }\n        index--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n \
    \   for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int word_size = word.size();\n    for (int i = word_size\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = word.length() - 1;\n    while (index >= 0) {\n\
    \        if (vowels.find(word[index]) != std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n        index--;\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < closest_vowel_distance) {\n                    closest_vowel_distance\
    \ = distance;\n                    closest_vowel_index = i;\n                }\n\
    \            }\n        }\n    }\n    if (closest_vowel_index == -1) {\n     \
    \   return \"\";\n    }\n    return word.substr(closest_vowel_index, 1);", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                distance++;\n \
    \           }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = word.size() - i - 1;\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    int distance\
    \ = 0;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.length();\
    \ j++) {\n                if (consonants.find(word[j]) != std::string::npos) {\n\
    \                    distance = j - i;\n                    if (distance < min_distance)\
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i];\n                    }\n                    break;\n    \
    \            }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int vowel_index = -1;\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            vowel_index = i;\n            break;\n        }\n    }\n    if (vowel_index\
    \ == -1) {\n        return result;\n    }\n    for (int i = vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         result = word[vowel_index];\n            break;\n        }\n    }\n\
    \    return result;", "\tstd::string vowels = \"aeiou\";\n\tint index = -1;\n\t\
    for (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) !=\
    \ std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ == -1) {\n\t\treturn \"\";\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\
    \tif (vowels.find(word[i]) == std::string::npos) {\n\t\t\treturn word.substr(i\
    \ + 1, 1);\n\t\t}\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int closest_vowel_index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      closest_vowel_index = i;\n            break;\n        }\n    }\n    if\
    \ (closest_vowel_index == -1) {\n        return \"\";\n    }\n    for (int i =\
    \ closest_vowel_index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) ==\
    \ std::string::npos) {\n            return word.substr(closest_vowel_index, 1);\n\
    \        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_index = -1;\n    for\
    \ (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i > 0 && vowels.find(word[i-1]) == std::string::npos) {\n\
    \                if (closest_index == -1 || i < closest_index) {\n           \
    \         closest_index = i;\n                    closest_vowel = word[i];\n \
    \               }\n            }\n        }\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = 0;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        for (int j = 0; j < vowels.size(); j++) {\n            if (word[i]\
    \ == vowels[j]) {\n                int distance = 0;\n                for (int\
    \ k = i; k < word.size(); k++) {\n                    if (vowels.find(word[k])\
    \ == std::string::npos) {\n                        distance++;\n             \
    \       } else {\n                        break;\n                    }\n    \
    \            }\n                if (distance < min_distance) {\n             \
    \       min_distance = distance;\n                    result = word[i];\n    \
    \            }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int distance = word.length();\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        for (int j = 0; j < vowels.length(); j++) {\n            if (word[i]\
    \ == vowels[j]) {\n                if (i < distance) {\n                    distance\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        }\n    }\n    return closest_vowel;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int pos = word.length() -\
    \ 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            result = word[pos];\n            pos--;\n            break;\n\
    \        }\n        pos--;\n    }\n    while (pos >= 0) {\n        if (vowels.find(word[pos])\
    \ != std::string::npos) {\n            result = \"\";\n            break;\n  \
    \      }\n        pos--;\n    }\n    return result;", "    std::string vowels\
    \ = \"AEIOUaeiou\";\n    int pos = -1;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      pos = i;\n            break;\n        }\n    }\n    if (pos == -1) {\n\
    \        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(pos,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = word.length() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int n = word.length();\n    int i = n - 1;\n    while(i\
    \ >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n         \
    \   if(i == n - 1) {\n                return \"\";\n            }\n          \
    \  if(vowels.find(word[i + 1]) == std::string::npos) {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";"]
stop_tokens:
- "\n}"
