name: HumanEval_118_get_closest_vowel
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your\
  \ task is to find the closest vowel that stands between \n// two consonants from\
  \ the right side of the word (case sensitive).\n// Vowels in the beginning and ending\
  \ doesn't count. Return empty string if you didn't\n// find any vowel met the above\
  \ condition. \n// You may assume that the given string contains English letter only.\n\
  // Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"\
  FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"\
  ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n"
tests: "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
  yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
  easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
  ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
  most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
  ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
  anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
  Above\")) == (\"o\"));\n}\n"
completions: ["    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (index == -1) {\n                index = i;\n            } else {\n        \
    \        if (word[index] == word[i]) {\n                    index = i;\n     \
    \           } else {\n                    break;\n                }\n        \
    \    }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    int i =\
    \ word.size() - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if (i == word.size() - 1) {\n            \
    \    return \"\";\n            }\n            if (vowels.find(word[i + 1]) ==\
    \ std::string::npos) {\n                return word.substr(i, 1);\n          \
    \  }\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (index == -1) {\n                index\
    \ = i;\n            } else {\n                if (i + 1 < index) {\n         \
    \           result = word[i];\n                    break;\n                }\n\
    \            }\n        } else {\n            index = -1;\n        }\n    }\n\
    \    return result;", "    int len = word.length();\n    for(int i = len-1; i\
    \ > 0; i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u') {\n            if(word[i-1] != 'a' && word[i-1]\
    \ != 'e' && word[i-1] != 'i' && word[i-1] != 'o' && word[i-1] != 'u') {\n    \
    \            return word.substr(i,1);\n            }\n        }\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance =\
    \ INT_MAX;\n    int word_length = word.length();\n    for (int i = 0; i < word_length;\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (word[i] == vowels[j]) {\n                int distance = word_length - i - 1;\n\
    \                if (distance < closest_vowel_distance) {\n                  \
    \  closest_vowel_distance = distance;\n                    closest_vowel_index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (closest_vowel_index\
    \ == -1) {\n        return \"\";\n    }\n    return std::string(1, word[closest_vowel_index]);",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string closest_vowel = \"\"\
    ;\n    int closest_vowel_index = -1;\n    int word_length = word.length();\n \
    \   for (int i = 0; i < word_length; i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (i > 0 && i < word_length - 1) {\n \
    \               if (vowels.find(word[i - 1]) == std::string::npos && vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                    if (closest_vowel_index ==\
    \ -1) {\n                        closest_vowel_index = i;\n                  \
    \      closest_vowel = word[i];\n                    } else {\n              \
    \          if (i > closest_vowel_index) {\n                            closest_vowel_index\
    \ = i;\n                            closest_vowel = word[i];\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return closest_vowel;", "    // your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    int i = index - 1;\n    while (i\
    \ >= 0) {\n        if (vowels.find(word[i]) == std::string::npos) {\n        \
    \    return word.substr(i + 1, index - i);\n        }\n        i--;\n    }\n \
    \   return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    int word_length = word.length();\n    for (int i = 0; i < word_length; i++)\
    \ {\n        char current_char = word[i];\n        if (vowels.find(current_char)\
    \ != std::string::npos) {\n            if (i == 0) {\n                if (vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                    closest_vowel = current_char;\n\
    \                    closest_vowel_index = i;\n                }\n           \
    \ } else if (i == word_length - 1) {\n                if (vowels.find(word[i -\
    \ 1]) == std::string::npos) {\n                    closest_vowel = current_char;\n\
    \                    closest_vowel_index = i;\n                }\n           \
    \ } else {\n                if (vowels.find(word[i - 1]) == std::string::npos\
    \ && vowels.find(word[i + 1]) == std::string::npos) {\n                    closest_vowel\
    \ = current_char;\n                    closest_vowel_index = i;\n            \
    \    }\n            }\n        }\n    }\n    return closest_vowel;", "    // Your\
    \ code here\n    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n\
    \    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.length() - i;\n            if (distance < min_distance) {\n\
    \                min_distance = distance;\n                index = i;\n      \
    \      }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ res = \"\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            res = word[i];\n            break;\n  \
    \      }\n    }\n    return res;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n    \
    \        break;\n        }\n    }\n    if (index == -1) {\n        return result;\n\
    \    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "\tstd::string vowels = \"aeiou\";\n\t\
    std::string result = \"\";\n\tint index = word.length() - 1;\n\twhile (index >=\
    \ 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tresult\
    \ = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn result;", " \
    \   // Your code here\n    int n = word.length();\n    int i = n-1;\n    while(i>=0){\n\
    \        if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u'\
    \ || word[i]=='A' || word[i]=='E' || word[i]=='I' || word[i]=='O' || word[i]=='U'){\n\
    \            if(i==n-1){\n                return \"\";\n            }\n      \
    \      else{\n                if(word[i-1]=='a' || word[i-1]=='e' || word[i-1]=='i'\
    \ || word[i-1]=='o' || word[i-1]=='u' || word[i-1]=='A' || word[i-1]=='E' || word[i-1]=='I'\
    \ || word[i-1]=='O' || word[i-1]=='U'){\n                    return \"\";\n  \
    \              }\n                else{\n                    return word.substr(i,1);\n\
    \                }\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";"]
stop_tokens:
- "\n}"
