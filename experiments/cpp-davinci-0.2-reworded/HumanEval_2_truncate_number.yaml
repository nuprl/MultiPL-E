name: HumanEval_2_truncate_number
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating\
  \ point number, it can be decomposed into\n// and integer part (largest integer\
  \ smaller than given number) and decimals\n// (leftover part always smaller than\
  \ 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5))\n\
  // (0.5)\nfloat truncate_number(float number) {\n"
tests: "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5))\
  \ == (0.5));\n    assert(candidate((1.25)) == (0.25));\n    assert(candidate((123.0))\
  \ == (0.0));\n}\n"
completions: ["    // Write your code here\n    int integer = (int)number;\n    float\
    \ decimal = number - integer;\n    return decimal;", '    return number - (int)number;',
  "  // Write your code here\n  return number - (int)number;", '    return number
    - (int)number;', "    // TODO: implement this function\n    int a = number;\n\
    \    float b = number - a;\n    return b;", "    int int_part = (int)number;\n\
    \    return number - int_part;", "    int integer = (int)number;\n    float decimal\
    \ = number - integer;\n    return decimal;", "    // TODO: implement this function\n\
    \    return number - (int)number;", "    int i = number;\n    float f = number\
    \ - i;\n    return f;", "    // Write your code here\n    return number - (int)number;",
  '    return number - (int)number;', "    // Write your code here\n    int a = number;\n\
    \    return number - a;", '  return number - (int)number;', "    // Write your\
    \ code here\n    return number - (int)number;", "    int integer_part = (int)number;\n\
    \    float decimal_part = number - integer_part;\n    return decimal_part;", " \
    \ // TODO: Implement this function.\n  int integer_part = (int)number;\n  float\
    \ decimal_part = number - integer_part;\n  return decimal_part;", "    // TODO:\
    \ Implement this function\n    return 0.0;", "    // TODO: Implement this function\n\
    \    return number - (int)number;", "  // Write your code here\n  int a = number;\n\
    \  float b = number - a;\n  return b;", "  // Write your code here\n  int a =\
    \ number;\n  float b = number - a;\n  return b;"]
stop_tokens:
- "\n}"
