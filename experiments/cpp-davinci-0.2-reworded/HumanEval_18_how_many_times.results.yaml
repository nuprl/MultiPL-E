language: cpp
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n  long count =\
    \ 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i,\
    \ substring.length()) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sublen = substring.length();\n    long strlen = string.length();\n\
    \    for (long i = 0; i < strlen; i++) {\n        if (string.substr(i, sublen)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long pos = 0;\n    while(pos < string.length()){\n        if(string.substr(pos,\
    \ substring.length()) == substring){\n            count++;\n            pos +=\
    \ substring.length();\n        }\n        else{\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: Exception
  stderr: 'tmpdystk2ff: /tmp/tmpdystk2ff.cpp:28: int main(): Assertion `candidate(("cacacacac"),
    ("cac")) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    int len = substring.length();\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, len) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    int i = 0;\n    while (i < string.length()) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n            i +=\
    \ substring.length();\n        } else {\n            i++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: Exception
  stderr: 'tmpu8n9w7dj: /tmp/tmpu8n9w7dj.cpp:27: int main(): Assertion `candidate(("cacacacac"),
    ("cac")) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    int count =\
    \ 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long string_length = string.length();\n    long substring_length =\
    \ substring.length();\n    for (long i = 0; i < string_length; i++) {\n      \
    \  if (string[i] == substring[0]) {\n            long j = 0;\n            while\
    \ (j < substring_length && string[i + j] == substring[j]) {\n                j++;\n\
    \            }\n            if (j == substring_length) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    int len = substring.length();\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.substr(i, len) == substring) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long n = string.length();\n    long m = substring.length();\n    for\
    \ (long i = 0; i < n; i++) {\n        if (string.substr(i, m) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n  long count =\
    \ 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i,\
    \ substring.length()) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    int n = string.length();\n    int m = substring.length();\n    for\
    \ (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n\
    \            if (string[i + j] != substring[j])\n                break;\n    \
    \    if (j == m) {\n            count++;\n            j = 0;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n\tlong count =\
    \ 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string[i + j] != substring[j]) {\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t\tif (j == substring.length() - 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long i = 0;\n    while (i < string.length()) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n            i +=\
    \ substring.length();\n        } else {\n            i++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: Exception
  stderr: 'tmpgc7azfy1: /tmp/tmpgc7azfy1.cpp:27: int main(): Assertion `candidate(("cacacacac"),
    ("cac")) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n  long count =\
    \ 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string.substr(i,\
    \ substring.length()) == substring) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    for (long i = 0; i < str_len; i++) {\n        if (string.substr(i, sub_len)\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long sub_len = substring.length();\n    long str_len = string.length();\n\
    \    if (sub_len > str_len) {\n        return 0;\n    }\n    for (long i = 0;\
    \ i < str_len; i++) {\n        if (string.substr(i, sub_len) == substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substr(i,\
    \ substring.length()) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057898
