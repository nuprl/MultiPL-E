language: cpp
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto i : arr) {\n        pq.push(i);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmm5kj3o.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpkmm5kj3o.cpp:20:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpkmm5kj3o.cpp:26:5: error:\
    \ expected ';' before 'std'\n     std::vector<long> res;\n     ^\n/tmp/tmpkmm5kj3o.cpp:26:23:\
    \ error: expected primary-expression before 'res'\n     std::vector<long> res;\n\
    \                       ^\n/tmp/tmpkmm5kj3o.cpp:26:23: error: expected ';' before\
    \ 'res'\n/tmp/tmpkmm5kj3o.cpp:26:23: error: 'res' was not declared in this scope\n\
    /tmp/tmpkmm5kj3o.cpp:26:26: error: expected ')' before ';' token\n     std::vector<long>\
    \ res;\n                          ^\n/tmp/tmpkmm5kj3o.cpp:28:9: error: 'res' was\
    \ not declared in this scope\n         res.push_back(pq.top());\n         ^\n\
    /tmp/tmpkmm5kj3o.cpp:31:18: error: 'res' was not declared in this scope\n    \
    \ std::reverse(res.begin(), res.end());\n                  ^\n/tmp/tmpkmm5kj3o.cpp:\
    \ In function 'int main()':\n/tmp/tmpkmm5kj3o.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = maximum;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkmm5kj3o.cpp:2:\n/tmp/tmpkmm5kj3o.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpkmm5kj3o.cpp:36:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpkmm5kj3o.cpp:36:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    std::priority_queue<long> pq;\n    for(int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for(int\
    \ i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwmqjopi.cpp: In function 'int main()':\n/tmp/tmpgwmqjopi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgwmqjopi.cpp:2:\n/tmp/tmpgwmqjopi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpgwmqjopi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpgwmqjopi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgwmqjopi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgwmqjopi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgwmqjopi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (arr[i] > pq.top())\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqop9ccbw.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpqop9ccbw.cpp:23:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpqop9ccbw.cpp: In function 'int main()':\n/tmp/tmpqop9ccbw.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqop9ccbw.cpp:2:\n/tmp/tmpqop9ccbw.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpqop9ccbw.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpqop9ccbw.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqop9ccbw.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqop9ccbw.cpp:42:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqop9ccbw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vv0hyvi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp3vv0hyvi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp3vv0hyvi.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp3vv0hyvi.cpp: In function 'int main()':\n/tmp/tmp3vv0hyvi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vv0hyvi.cpp:2:\n/tmp/tmp3vv0hyvi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp3vv0hyvi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp3vv0hyvi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vv0hyvi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vv0hyvi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (auto\
    \ i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqd8doxzk.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpqd8doxzk.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpqd8doxzk.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpqd8doxzk.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpqd8doxzk.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpqd8doxzk.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpqd8doxzk.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpqd8doxzk.cpp: In function 'int main()':\n/tmp/tmpqd8doxzk.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqd8doxzk.cpp:2:\n/tmp/tmpqd8doxzk.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpqd8doxzk.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpqd8doxzk.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqd8doxzk.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqd8doxzk.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnbloh0y.cpp: In function 'int main()':\n/tmp/tmpmnbloh0y.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmnbloh0y.cpp:2:\n/tmp/tmpmnbloh0y.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpmnbloh0y.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpmnbloh0y.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmnbloh0y.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpmnbloh0y.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmnbloh0y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto i : arr) {\n        pq.push(i);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmm5kj3o.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpkmm5kj3o.cpp:20:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpkmm5kj3o.cpp:26:5: error:\
    \ expected ';' before 'std'\n     std::vector<long> res;\n     ^\n/tmp/tmpkmm5kj3o.cpp:26:23:\
    \ error: expected primary-expression before 'res'\n     std::vector<long> res;\n\
    \                       ^\n/tmp/tmpkmm5kj3o.cpp:26:23: error: expected ';' before\
    \ 'res'\n/tmp/tmpkmm5kj3o.cpp:26:23: error: 'res' was not declared in this scope\n\
    /tmp/tmpkmm5kj3o.cpp:26:26: error: expected ')' before ';' token\n     std::vector<long>\
    \ res;\n                          ^\n/tmp/tmpkmm5kj3o.cpp:28:9: error: 'res' was\
    \ not declared in this scope\n         res.push_back(pq.top());\n         ^\n\
    /tmp/tmpkmm5kj3o.cpp:31:18: error: 'res' was not declared in this scope\n    \
    \ std::reverse(res.begin(), res.end());\n                  ^\n/tmp/tmpkmm5kj3o.cpp:\
    \ In function 'int main()':\n/tmp/tmpkmm5kj3o.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = maximum;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkmm5kj3o.cpp:2:\n/tmp/tmpkmm5kj3o.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpkmm5kj3o.cpp:36:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpkmm5kj3o.cpp:36:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n \
    \   for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6bm_l5xl.cpp: In function 'int main()':\n/tmp/tmp6bm_l5xl.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6bm_l5xl.cpp:2:\n/tmp/tmp6bm_l5xl.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp6bm_l5xl.cpp:28:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp6bm_l5xl.cpp:28:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6bm_l5xl.cpp:28:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6bm_l5xl.cpp:28:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6bm_l5xl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto& num : arr) {\n        pq.push(num);\n    }\n    while (k--) {\n     \
    \   result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdlrhzpi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpxdlrhzpi.cpp:21:16: error: ISO C++ forbids declaration\
    \ of 'num' with no type [-fpermissive]\n     for (auto& num : arr) {\n       \
    \         ^\n/tmp/tmpxdlrhzpi.cpp:21:22: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto& num : arr) {\n                      ^\n\
    /tmp/tmpxdlrhzpi.cpp: In function 'int main()':\n/tmp/tmpxdlrhzpi.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = maximum;\n         \
    \ ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n            \
    \     from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n    \
    \             from /tmp/tmpxdlrhzpi.cpp:2:\n/tmp/tmpxdlrhzpi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpxdlrhzpi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpxdlrhzpi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxdlrhzpi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxdlrhzpi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxdlrhzpi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Al"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code here\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(auto i : arr){\n        pq.push(i);\n    }\n    while(k--){\n \
    \       result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpudno_twj.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpudno_twj.cpp:22:14: error: 'i' does not name a type\n\
    \     for(auto i : arr){\n              ^\n/tmp/tmpudno_twj.cpp:25:5: error: expected\
    \ ';' before 'while'\n     while(k--){\n     ^\n/tmp/tmpudno_twj.cpp:25:5: error:\
    \ expected primary-expression before 'while'\n/tmp/tmpudno_twj.cpp:25:5: error:\
    \ expected ';' before 'while'\n/tmp/tmpudno_twj.cpp:25:5: error: expected primary-expression\
    \ before 'while'\n/tmp/tmpudno_twj.cpp:25:5: error: expected ')' before 'while'\n\
    /tmp/tmpudno_twj.cpp: In function 'int main()':\n/tmp/tmpudno_twj.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = maximum;\n         \
    \ ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n            \
    \     from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n    \
    \             from /tmp/tmpudno_twj.cpp:2:\n/tmp/tmpudno_twj.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpudno_twj.cpp:33:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpudno_twj.cpp:33:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpudno_twj.cpp:33:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpudno_twj.cpp:33:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (arr[i] > pq.top())\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqop9ccbw.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpqop9ccbw.cpp:23:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpqop9ccbw.cpp: In function 'int main()':\n/tmp/tmpqop9ccbw.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqop9ccbw.cpp:2:\n/tmp/tmpqop9ccbw.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpqop9ccbw.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpqop9ccbw.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqop9ccbw.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqop9ccbw.cpp:42:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqop9ccbw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (auto\
    \ i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++) {\n\
    \        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2lbb4j0.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpk2lbb4j0.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpk2lbb4j0.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmpk2lbb4j0.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpk2lbb4j0.cpp: In function 'int main()':\n/tmp/tmpk2lbb4j0.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk2lbb4j0.cpp:2:\n/tmp/tmpk2lbb4j0.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpk2lbb4j0.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpk2lbb4j0.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk2lbb4j0.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk2lbb4j0.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vv0hyvi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp3vv0hyvi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp3vv0hyvi.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp3vv0hyvi.cpp: In function 'int main()':\n/tmp/tmp3vv0hyvi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vv0hyvi.cpp:2:\n/tmp/tmp3vv0hyvi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp3vv0hyvi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp3vv0hyvi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vv0hyvi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vv0hyvi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k == arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpus3p9p0w.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpus3p9p0w.cpp:26:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpus3p9p0w.cpp: In function 'int main()':\n/tmp/tmpus3p9p0w.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpus3p9p0w.cpp:2:\n/tmp/tmpus3p9p0w.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpus3p9p0w.cpp:46:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpus3p9p0w.cpp:46:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpus3p9p0w.cpp:46:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpus3p9p0w.cpp:46:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpus3p9p0w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k == arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (auto i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpoosadl9s.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpoosadl9s.cpp:26:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpoosadl9s.cpp:27:15: error: 'i' does not name a type\n\
    \     for (auto i = 0; i < arr.size(); i++) {\n               ^\n/tmp/tmpoosadl9s.cpp:27:22:\
    \ error: expected ';' before 'i'\n     for (auto i = 0; i < arr.size(); i++) {\n\
    \                      ^\n/tmp/tmpoosadl9s.cpp:27:22: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpoosadl9s.cpp: In function 'int main()':\n/tmp/tmpoosadl9s.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoosadl9s.cpp:2:\n/tmp/tmpoosadl9s.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpoosadl9s.cpp:45:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpoosadl9s.cpp:45:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpoosadl9s.cpp:45:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpoosadl9s.cpp:45:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 fro"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k == arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5jk3t54.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpu5jk3t54.cpp:26:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpu5jk3t54.cpp: In function 'int main()':\n/tmp/tmpu5jk3t54.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu5jk3t54.cpp:2:\n/tmp/tmpu5jk3t54.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpu5jk3t54.cpp:46:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpu5jk3t54.cpp:46:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu5jk3t54.cpp:46:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu5jk3t54.cpp:46:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu5jk3t54.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vv0hyvi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp3vv0hyvi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp3vv0hyvi.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp3vv0hyvi.cpp: In function 'int main()':\n/tmp/tmp3vv0hyvi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vv0hyvi.cpp:2:\n/tmp/tmp3vv0hyvi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp3vv0hyvi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp3vv0hyvi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vv0hyvi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vv0hyvi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    if (k == 0) {\n        return ans;\n    }\n\
    \    if (k == arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp62iyzr1x.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp62iyzr1x.cpp:26:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmp62iyzr1x.cpp: In function 'int main()':\n/tmp/tmp62iyzr1x.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp62iyzr1x.cpp:2:\n/tmp/tmp62iyzr1x.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp62iyzr1x.cpp:45:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp62iyzr1x.cpp:45:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp62iyzr1x.cpp:45:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp62iyzr1x.cpp:45:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp62iyzr1x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    int n = arr.size();\n    if (k == 0) return\
    \ res;\n    if (k == n) return arr;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < n; i++) {\n        pq.push(arr[i]);\n        if (pq.size() >\
    \ k) pq.pop();\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb17hy3y5.cpp: In function 'int main()':\n/tmp/tmpb17hy3y5.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb17hy3y5.cpp:2:\n/tmp/tmpb17hy3y5.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpb17hy3y5.cpp:37:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpb17hy3y5.cpp:37:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb17hy3y5.cpp:37:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpb17hy3y5.cpp:37:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb17hy3y5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k == arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (auto i : arr) {\n     \
    \   pq.push(i);\n        if (pq.size() > k) {\n            pq.pop();\n       \
    \ }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n \
    \       pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n  \
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4br8au4k.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp4br8au4k.cpp:26:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmp4br8au4k.cpp:27:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp4br8au4k.cpp:33:5: error:\
    \ expected ';' before 'while'\n     while (!pq.empty()) {\n     ^\n/tmp/tmp4br8au4k.cpp:33:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmp4br8au4k.cpp:33:5:\
    \ error: expected ';' before 'while'\n/tmp/tmp4br8au4k.cpp:33:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmp4br8au4k.cpp:33:5: error: expected\
    \ ')' before 'while'\n/tmp/tmp4br8au4k.cpp: In function 'int main()':\n/tmp/tmp4br8au4k.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4br8au4k.cpp:2:\n/tmp/tmp4br8au4k.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp4br8au4k.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp4br8au4k.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4br8au4k.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n \
    \           pq.push(arr[i]);\n        } else {\n            if (arr[i] > pq.top())\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqop9ccbw.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpqop9ccbw.cpp:23:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpqop9ccbw.cpp: In function 'int main()':\n/tmp/tmpqop9ccbw.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqop9ccbw.cpp:2:\n/tmp/tmpqop9ccbw.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpqop9ccbw.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpqop9ccbw.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqop9ccbw.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqop9ccbw.cpp:42:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqop9ccbw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> q;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        q.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(q.top());\n        q.pop();\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkonkrg3z.cpp: In function 'int main()':\n/tmp/tmpkonkrg3z.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkonkrg3z.cpp:2:\n/tmp/tmpkonkrg3z.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpkonkrg3z.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpkonkrg3z.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkonkrg3z.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkonkrg3z.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkonkrg3z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnbloh0y.cpp: In function 'int main()':\n/tmp/tmpmnbloh0y.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmnbloh0y.cpp:2:\n/tmp/tmpmnbloh0y.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpmnbloh0y.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpmnbloh0y.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmnbloh0y.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpmnbloh0y.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmnbloh0y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpybok085y.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpybok085y.cpp:21:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpybok085y.cpp: In function 'int main()':\n/tmp/tmpybok085y.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpybok085y.cpp:2:\n/tmp/tmpybok085y.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpybok085y.cpp:41:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpybok085y.cpp:41:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpybok085y.cpp:41:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpybok085y.cpp:41:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpybok085y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while\
    \ (k > 0) {\n        result.push_back(pq.top());\n        pq.pop();\n        k--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbqqvudk.cpp: In function 'int main()':\n/tmp/tmpzbqqvudk.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzbqqvudk.cpp:2:\n/tmp/tmpzbqqvudk.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzbqqvudk.cpp:33:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzbqqvudk.cpp:33:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzbqqvudk.cpp:33:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzbqqvudk.cpp:33:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzbqqvudk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto &i : arr) {\n        pq.push(i);\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6mc4870.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl6mc4870.cpp:21:16: error: ISO C++ forbids declaration\
    \ of 'i' with no type [-fpermissive]\n     for (auto &i : arr) {\n           \
    \     ^\n/tmp/tmpl6mc4870.cpp:21:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &i : arr) {\n                    ^\n/tmp/tmpl6mc4870.cpp:\
    \ In function 'int main()':\n/tmp/tmpl6mc4870.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = maximum;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl6mc4870.cpp:2:\n/tmp/tmpl6mc4870.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpl6mc4870.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpl6mc4870.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl6mc4870.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl6mc4870.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl6mc4870.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto &i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2d81cr3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpv2d81cr3.cpp:21:16: error: ISO C++ forbids declaration\
    \ of 'i' with no type [-fpermissive]\n     for (auto &i : arr) {\n           \
    \     ^\n/tmp/tmpv2d81cr3.cpp:21:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &i : arr) {\n                    ^\n/tmp/tmpv2d81cr3.cpp:\
    \ In function 'int main()':\n/tmp/tmpv2d81cr3.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = maximum;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv2d81cr3.cpp:2:\n/tmp/tmpv2d81cr3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpv2d81cr3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpv2d81cr3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv2d81cr3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv2d81cr3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv2d81cr3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> q;\n    for (auto\
    \ i : arr) {\n        q.push(i);\n    }\n    while (k--) {\n        res.push_back(q.top());\n\
    \        q.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6cif13t.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpq6cif13t.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpq6cif13t.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpq6cif13t.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpq6cif13t.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpq6cif13t.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpq6cif13t.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpq6cif13t.cpp: In function 'int main()':\n/tmp/tmpq6cif13t.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq6cif13t.cpp:2:\n/tmp/tmpq6cif13t.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpq6cif13t.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpq6cif13t.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq6cif13t.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq6cif13t.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (min_heap.size() < k)\
    \ {\n            min_heap.push(arr[i]);\n        } else {\n            if (arr[i]\
    \ > min_heap.top()) {\n                min_heap.pop();\n                min_heap.push(arr[i]);\n\
    \            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_vn2d_dg.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp_vn2d_dg.cpp:23:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> min_heap;\n                                            \
    \                       ^\n/tmp/tmp_vn2d_dg.cpp: In function 'int main()':\n/tmp/tmp_vn2d_dg.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_vn2d_dg.cpp:2:\n/tmp/tmp_vn2d_dg.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp_vn2d_dg.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp_vn2d_dg.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_vn2d_dg.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_vn2d_dg.cpp:42:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_vn2d_dg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> max_heap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptb4t3cnr.cpp: In function 'int main()':\n/tmp/tmptb4t3cnr.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptb4t3cnr.cpp:2:\n/tmp/tmptb4t3cnr.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmptb4t3cnr.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmptb4t3cnr.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptb4t3cnr.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmptb4t3cnr.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptb4t3cnr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (auto i : arr) {\n     \
    \   if (pq.size() < k) {\n            pq.push(i);\n        } else {\n        \
    \    if (pq.top() < i) {\n                pq.pop();\n                pq.push(i);\n\
    \            }\n        }\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4zidrgkn.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp4zidrgkn.cpp:21:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmp4zidrgkn.cpp:22:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp4zidrgkn.cpp:32:5: error:\
    \ expected ';' before 'while'\n     while (!pq.empty()) {\n     ^\n/tmp/tmp4zidrgkn.cpp:32:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmp4zidrgkn.cpp:32:5:\
    \ error: expected ';' before 'while'\n/tmp/tmp4zidrgkn.cpp:32:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmp4zidrgkn.cpp:32:5: error: expected\
    \ ')' before 'while'\n/tmp/tmp4zidrgkn.cpp: In function 'int main()':\n/tmp/tmp4zidrgkn.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4zidrgkn.cpp:2:\n/tmp/tmp4zidrgkn.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp4zidrgkn.cpp:41:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp4zidrgkn.cpp:41:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4zidrgkn.cpp:41:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code here\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < arr.size(); i++){\n        pq.push(arr[i]);\n  \
    \  }\n    for(int i = 0; i < k; i++){\n        result.push_back(pq.top());\n \
    \       pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kvwprvi.cpp: In function 'int main()':\n/tmp/tmp6kvwprvi.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kvwprvi.cpp:2:\n/tmp/tmp6kvwprvi.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp6kvwprvi.cpp:33:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp6kvwprvi.cpp:33:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kvwprvi.cpp:33:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kvwprvi.cpp:33:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6kvwprvi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) {\n        return res;\n    }\n\
    \    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n   \
    \         pq.push(arr[i]);\n        } else {\n            if (arr[i] > pq.top())\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp27z655g0.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp27z655g0.cpp:23:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmp27z655g0.cpp: In function 'int main()':\n/tmp/tmp27z655g0.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp27z655g0.cpp:2:\n/tmp/tmp27z655g0.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp27z655g0.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp27z655g0.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp27z655g0.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp27z655g0.cpp:42:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp27z655g0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (auto\
    \ i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++) {\n\
    \        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2lbb4j0.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpk2lbb4j0.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpk2lbb4j0.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmpk2lbb4j0.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpk2lbb4j0.cpp: In function 'int main()':\n/tmp/tmpk2lbb4j0.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk2lbb4j0.cpp:2:\n/tmp/tmpk2lbb4j0.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpk2lbb4j0.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpk2lbb4j0.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk2lbb4j0.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk2lbb4j0.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while\
    \ (k > 0) {\n        result.push_back(pq.top());\n        pq.pop();\n        k--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbqqvudk.cpp: In function 'int main()':\n/tmp/tmpzbqqvudk.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzbqqvudk.cpp:2:\n/tmp/tmpzbqqvudk.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzbqqvudk.cpp:33:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzbqqvudk.cpp:33:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzbqqvudk.cpp:33:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzbqqvudk.cpp:33:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzbqqvudk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    for (long\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpixofrgfe.cpp: In function 'int main()':\n/tmp/tmpixofrgfe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixofrgfe.cpp:2:\n/tmp/tmpixofrgfe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpixofrgfe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpixofrgfe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixofrgfe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpixofrgfe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpixofrgfe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvyk16an.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpgvyk16an.cpp:21:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpgvyk16an.cpp: In function 'int main()':\n/tmp/tmpgvyk16an.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgvyk16an.cpp:2:\n/tmp/tmpgvyk16an.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpgvyk16an.cpp:40:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpgvyk16an.cpp:40:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgvyk16an.cpp:40:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgvyk16an.cpp:40:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgvyk16an.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while (k--)\
    \ {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp10sfs8iz.cpp: In function 'int main()':\n/tmp/tmp10sfs8iz.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp10sfs8iz.cpp:2:\n/tmp/tmp10sfs8iz.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp10sfs8iz.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp10sfs8iz.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp10sfs8iz.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp10sfs8iz.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp10sfs8iz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        max_arr.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplncffa3q.cpp: In function 'int main()':\n/tmp/tmplncffa3q.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplncffa3q.cpp:2:\n/tmp/tmplncffa3q.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmplncffa3q.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmplncffa3q.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplncffa3q.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplncffa3q.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplncffa3q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> result;\n    for (long\
    \ i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4975eb3.cpp: In function 'int main()':\n/tmp/tmpa4975eb3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa4975eb3.cpp:2:\n/tmp/tmpa4975eb3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpa4975eb3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpa4975eb3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa4975eb3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpa4975eb3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa4975eb3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (auto\
    \ i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqd8doxzk.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpqd8doxzk.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpqd8doxzk.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpqd8doxzk.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpqd8doxzk.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpqd8doxzk.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpqd8doxzk.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpqd8doxzk.cpp: In function 'int main()':\n/tmp/tmpqd8doxzk.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqd8doxzk.cpp:2:\n/tmp/tmpqd8doxzk.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpqd8doxzk.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpqd8doxzk.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqd8doxzk.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqd8doxzk.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vv0hyvi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp3vv0hyvi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp3vv0hyvi.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp3vv0hyvi.cpp: In function 'int main()':\n/tmp/tmp3vv0hyvi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vv0hyvi.cpp:2:\n/tmp/tmp3vv0hyvi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp3vv0hyvi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp3vv0hyvi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vv0hyvi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vv0hyvi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vv0hyvi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp3vv0hyvi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp3vv0hyvi.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp3vv0hyvi.cpp: In function 'int main()':\n/tmp/tmp3vv0hyvi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vv0hyvi.cpp:2:\n/tmp/tmp3vv0hyvi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp3vv0hyvi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp3vv0hyvi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vv0hyvi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vv0hyvi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (auto\
    \ i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++) {\n\
    \        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2lbb4j0.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpk2lbb4j0.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpk2lbb4j0.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmpk2lbb4j0.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpk2lbb4j0.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpk2lbb4j0.cpp: In function 'int main()':\n/tmp/tmpk2lbb4j0.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk2lbb4j0.cpp:2:\n/tmp/tmpk2lbb4j0.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpk2lbb4j0.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpk2lbb4j0.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk2lbb4j0.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk2lbb4j0.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvyk16an.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpgvyk16an.cpp:21:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpgvyk16an.cpp: In function 'int main()':\n/tmp/tmpgvyk16an.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgvyk16an.cpp:2:\n/tmp/tmpgvyk16an.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpgvyk16an.cpp:40:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpgvyk16an.cpp:40:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgvyk16an.cpp:40:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgvyk16an.cpp:40:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgvyk16an.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (auto i : arr) {\n        pq.push(i);\n        if (pq.size() > k) {\n\
    \            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5irs1o4l.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp5irs1o4l.cpp:23:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmp5irs1o4l.cpp:24:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp5irs1o4l.cpp:30:5: error:\
    \ expected ';' before 'while'\n     while (!pq.empty()) {\n     ^\n/tmp/tmp5irs1o4l.cpp:30:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmp5irs1o4l.cpp:30:5:\
    \ error: expected ';' before 'while'\n/tmp/tmp5irs1o4l.cpp:30:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmp5irs1o4l.cpp:30:5: error: expected\
    \ ')' before 'while'\n/tmp/tmp5irs1o4l.cpp: In function 'int main()':\n/tmp/tmp5irs1o4l.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5irs1o4l.cpp:2:\n/tmp/tmp5irs1o4l.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp5irs1o4l.cpp:39:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp5irs1o4l.cpp:39:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5irs1o4l.cpp:39:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnbloh0y.cpp: In function 'int main()':\n/tmp/tmpmnbloh0y.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmnbloh0y.cpp:2:\n/tmp/tmpmnbloh0y.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpmnbloh0y.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpmnbloh0y.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmnbloh0y.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpmnbloh0y.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmnbloh0y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vv0hyvi.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp3vv0hyvi.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmp3vv0hyvi.cpp:24:5: error:\
    \ expected ';' before 'for'\n     for (int i = 0; i < k; i++) {\n     ^\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp3vv0hyvi.cpp:24:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp3vv0hyvi.cpp: In function 'int main()':\n/tmp/tmp3vv0hyvi.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vv0hyvi.cpp:2:\n/tmp/tmp3vv0hyvi.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp3vv0hyvi.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp3vv0hyvi.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vv0hyvi.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vv0hyvi.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_vo38oe.cpp: In function 'int main()':\n/tmp/tmp9_vo38oe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9_vo38oe.cpp:2:\n/tmp/tmp9_vo38oe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp9_vo38oe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp9_vo38oe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9_vo38oe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9_vo38oe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9_vo38oe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (k == 0) {\n        return result;\n\
    \    }\n    if (k == arr.size()) {\n        return arr;\n    }\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push(arr[i]);\n       \
    \ } else {\n            if (arr[i] > pq.top()) {\n                pq.pop();\n\
    \                pq.push(arr[i]);\n            }\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2eyyu8u.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl2eyyu8u.cpp:26:67: error: '>>' should be '> >' within\
    \ a nested template argument list\n     std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n                                                  \
    \                 ^\n/tmp/tmpl2eyyu8u.cpp: In function 'int main()':\n/tmp/tmpl2eyyu8u.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl2eyyu8u.cpp:2:\n/tmp/tmpl2eyyu8u.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpl2eyyu8u.cpp:45:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpl2eyyu8u.cpp:45:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl2eyyu8u.cpp:45:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl2eyyu8u.cpp:45:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl2eyyu8u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    if (k == 0) return res;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        while (res.size() > 0 && res.back() < arr[i]\
    \ && res.size() + arr.size() - i > k) {\n            res.pop_back();\n       \
    \ }\n        if (res.size() < k) res.push_back(arr[i]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5x0xokzd.cpp: In function 'int main()':\n/tmp/tmp5x0xokzd.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5x0xokzd.cpp:2:\n/tmp/tmp5x0xokzd.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp5x0xokzd.cpp:31:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp5x0xokzd.cpp:31:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5x0xokzd.cpp:31:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5x0xokzd.cpp:31:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5x0xokzd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (auto x : arr) {\n        pq.push(x);\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    std::vector<long>\
    \ ans;\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprt4vqp43.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmprt4vqp43.cpp:20:15: error: 'x' does not name a type\n\
    \     for (auto x : arr) {\n               ^\n/tmp/tmprt4vqp43.cpp:26:5: error:\
    \ expected ';' before 'std'\n     std::vector<long> ans;\n     ^\n/tmp/tmprt4vqp43.cpp:26:23:\
    \ error: expected primary-expression before 'ans'\n     std::vector<long> ans;\n\
    \                       ^\n/tmp/tmprt4vqp43.cpp:26:23: error: expected ';' before\
    \ 'ans'\n/tmp/tmprt4vqp43.cpp:26:23: error: 'ans' was not declared in this scope\n\
    /tmp/tmprt4vqp43.cpp:26:26: error: expected ')' before ';' token\n     std::vector<long>\
    \ ans;\n                          ^\n/tmp/tmprt4vqp43.cpp:28:9: error: 'ans' was\
    \ not declared in this scope\n         ans.push_back(pq.top());\n         ^\n\
    /tmp/tmprt4vqp43.cpp:31:18: error: 'ans' was not declared in this scope\n    \
    \ std::reverse(ans.begin(), ans.end());\n                  ^\n/tmp/tmprt4vqp43.cpp:\
    \ In function 'int main()':\n/tmp/tmprt4vqp43.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = maximum;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprt4vqp43.cpp:2:\n/tmp/tmprt4vqp43.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmprt4vqp43.cpp:36:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmprt4vqp43.cpp:36:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto num : arr) {\n        pq.push(num);\n        if (pq.size() > k) {\n  \
    \          pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(result.begin(), result.end());\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp__bqncnz.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp__bqncnz.cpp:21:15: error: 'num' does not name a\
    \ type\n     for (auto num : arr) {\n               ^\n/tmp/tmp__bqncnz.cpp:27:5:\
    \ error: expected ';' before 'while'\n     while (!pq.empty()) {\n     ^\n/tmp/tmp__bqncnz.cpp:27:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmp__bqncnz.cpp:27:5:\
    \ error: expected ';' before 'while'\n/tmp/tmp__bqncnz.cpp:27:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmp__bqncnz.cpp:27:5: error: expected\
    \ ')' before 'while'\n/tmp/tmp__bqncnz.cpp: In function 'int main()':\n/tmp/tmp__bqncnz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp__bqncnz.cpp:2:\n/tmp/tmp__bqncnz.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp__bqncnz.cpp:36:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp__bqncnz.cpp:36:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp__bqncnz.cpp:36:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp__bqncnz.cpp:36:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (auto i : arr) {\n        pq.push(i);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6a34nh3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpo6a34nh3.cpp:21:15: error: 'i' does not name a type\n\
    \     for (auto i : arr) {\n               ^\n/tmp/tmpo6a34nh3.cpp:24:5: error:\
    \ expected ';' before 'while'\n     while (k--) {\n     ^\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5:\
    \ error: expected ';' before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ primary-expression before 'while'\n/tmp/tmpo6a34nh3.cpp:24:5: error: expected\
    \ ')' before 'while'\n/tmp/tmpo6a34nh3.cpp: In function 'int main()':\n/tmp/tmpo6a34nh3.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo6a34nh3.cpp:2:\n/tmp/tmpo6a34nh3.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpo6a34nh3.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpo6a34nh3.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo6a34nh3.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo6a34nh3.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzo4y88in.cpp: In function 'int main()':\n/tmp/tmpzo4y88in.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzo4y88in.cpp:2:\n/tmp/tmpzo4y88in.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzo4y88in.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzo4y88in.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzo4y88in.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzo4y88in.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzo4y88in.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps5jb8ndt.cpp: In function 'int main()':\n/tmp/tmps5jb8ndt.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5jb8ndt.cpp:2:\n/tmp/tmps5jb8ndt.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmps5jb8ndt.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmps5jb8ndt.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps5jb8ndt.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps5jb8ndt.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps5jb8ndt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    for (long\
    \ i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpixofrgfe.cpp: In function 'int main()':\n/tmp/tmpixofrgfe.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixofrgfe.cpp:2:\n/tmp/tmpixofrgfe.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpixofrgfe.cpp:32:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpixofrgfe.cpp:32:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpixofrgfe.cpp:32:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpixofrgfe.cpp:32:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpixofrgfe.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
