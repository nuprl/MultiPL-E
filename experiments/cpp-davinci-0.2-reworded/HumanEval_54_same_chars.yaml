name: HumanEval_54_same_chars
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the\
  \ same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n\
  // (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"\
  dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"\
  ))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n//\
  \ >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string\
  \ s0, std::string s1) {\n"
tests: "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"\
  ), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\"\
  )) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n\
  \    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"\
  ), (\"aaccc\")) == (false));\n}\n"
completions: ["    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n\
    \    return s0 == s1;", "    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(),\
    \ s1.end());\n    return s0 == s1;", "  std::sort(s0.begin(), s0.end());\n  std::sort(s1.begin(),\
    \ s1.end());\n  return s0 == s1;", "    std::sort(s0.begin(), s0.end());\n   \
    \ std::sort(s1.begin(), s1.end());\n    return s0 == s1;", "    std::sort(s0.begin(),\
    \ s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;", " \
    \   std::map<char, int> m0;\n    std::map<char, int> m1;\n    for (char c : s0)\
    \ {\n        m0[c]++;\n    }\n    for (char c : s1) {\n        m1[c]++;\n    }\n\
    \    return m0 == m1;", "    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(),\
    \ s1.end());\n    return s0 == s1;", "    std::map<char, int> m0;\n    std::map<char,\
    \ int> m1;\n    for (char c : s0) {\n        m0[c]++;\n    }\n    for (char c\
    \ : s1) {\n        m1[c]++;\n    }\n    return m0 == m1;", "    std::sort(s0.begin(),\
    \ s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;", " \
    \   std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n \
    \   return s0 == s1;", "    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(),\
    \ s1.end());\n    return s0 == s1;", "    std::map<char, int> m0;\n    std::map<char,\
    \ int> m1;\n    for (char c : s0) {\n        m0[c]++;\n    }\n    for (char c\
    \ : s1) {\n        m1[c]++;\n    }\n    return m0 == m1;", "  std::map<char, int>\
    \ m0;\n  std::map<char, int> m1;\n  for (auto c : s0) {\n    m0[c]++;\n  }\n \
    \ for (auto c : s1) {\n    m1[c]++;\n  }\n  return m0 == m1;", "    std::map<char,\
    \ int> m0;\n    std::map<char, int> m1;\n    for (int i = 0; i < s0.size(); i++)\
    \ {\n        m0[s0[i]]++;\n    }\n    for (int i = 0; i < s1.size(); i++) {\n\
    \        m1[s1[i]]++;\n    }\n    return m0 == m1;", "    std::sort(s0.begin(),\
    \ s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0 == s1;", " \
    \   std::map<char, int> m0;\n    std::map<char, int> m1;\n    for (char c : s0)\
    \ {\n        m0[c]++;\n    }\n    for (char c : s1) {\n        m1[c]++;\n    }\n\
    \    return m0 == m1;", "    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(),\
    \ s1.end());\n    return s0 == s1;", "    std::map<char, int> m0;\n    std::map<char,\
    \ int> m1;\n    for (char c : s0) {\n        m0[c]++;\n    }\n    for (char c\
    \ : s1) {\n        m1[c]++;\n    }\n    return m0 == m1;", "    // Your code here\n\
    \    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n\
    \    return s0 == s1;", "    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(),\
    \ s1.end());\n    return s0 == s1;"]
stop_tokens:
- "\n}"
