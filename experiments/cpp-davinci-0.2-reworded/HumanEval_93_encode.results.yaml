language: cpp
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'w';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'W';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqjl9tj9.cpp: In function 'int main()':\n/tmp/tmpwqjl9tj9.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwqjl9tj9.cpp:2:\n/tmp/tmpwqjl9tj9.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'A') {\n            result\
    \ += 'c';\n        } else if (message[i] == 'e' || message[i] == 'E') {\n    \
    \        result += 'g';\n        } else if (message[i] == 'i' || message[i] ==\
    \ 'I') {\n            result += 'k';\n        } else if (message[i] == 'o' ||\
    \ message[i] == 'O') {\n            result += 'q';\n        } else if (message[i]\
    \ == 'u' || message[i] == 'U') {\n            result += 'y';\n        } else if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponpanq4_.cpp: In function 'int main()':\n/tmp/tmponpanq4_.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmponpanq4_.cpp:2:\n/tmp/tmponpanq4_.cpp:38:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7ub3qw_.cpp: In function 'int main()':\n/tmp/tmpu7ub3qw_.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7ub3qw_.cpp:2:\n/tmp/tmpu7ub3qw_.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'w';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'W';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqjl9tj9.cpp: In function 'int main()':\n/tmp/tmpwqjl9tj9.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwqjl9tj9.cpp:2:\n/tmp/tmpwqjl9tj9.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        char\
    \ c = result[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            result[i] = 'a' + (c - 'a' + 2) % 26;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8xco95j.cpp: In function 'int main()':\n/tmp/tmpr8xco95j.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr8xco95j.cpp:2:\n/tmp/tmpr8xco95j.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A')\
    \ {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'S';\n        } else if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 's';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_nym7bc.cpp: In function 'int main()':\n/tmp/tmpb_nym7bc.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_nym7bc.cpp:2:\n/tmp/tmpb_nym7bc.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     int index = vowels.find(result[i]);\n            result[i] = vowels[(index\
    \ + 2) % 5];\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnww20lfd.cpp: In function 'int main()':\n/tmp/tmpnww20lfd.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnww20lfd.cpp:2:\n/tmp/tmpnww20lfd.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' ||\
    \ result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i] +\
    \ 2;\n        } else if (result[i] == 'C' || result[\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjfz5t6r.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpgjfz5t6r.cpp:34:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpgjfz5t6r.cpp:34:1: error: expected ']' before '}' token\n/tmp/tmpgjfz5t6r.cpp:34:1:\
    \ error: expected ')' before '}' token\n/tmp/tmpgjfz5t6r.cpp:34:1: error: expected\
    \ primary-expression before '}' token\n/tmp/tmpgjfz5t6r.cpp:34:1: error: expected\
    \ ';' before '}' token\n/tmp/tmpgjfz5t6r.cpp:35:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpgjfz5t6r.cpp:42:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += (char)(message[i] + 32);\n        } else {\n\
    \            encoded += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n            encoded[i]\
    \ = 'c';\n        } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n\
    \        } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n    \
    \    } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        }\
    \ else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n        } else\
    \ if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        } else if (encoded[i]\
    \ == 'E') {\n            encoded[i] = 'G';\n        } else if (encoded[i] == 'I')\
    \ {\n            encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n\
    \            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n    \
    \        encoded[i] = 'W';\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcqm8rzm.cpp: In function 'int main()':\n/tmp/tmpgcqm8rzm.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgcqm8rzm.cpp:2:\n/tmp/tmpgcqm8rzm.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4bq19wet.cpp: In function 'int main()':\n/tmp/tmp4bq19wet.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4bq19wet.cpp:2:\n/tmp/tmp4bq19wet.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     int index = vowels.find(result[i]);\n            index = (index + 2) % 5;\n\
    \            result[i] = vowels[index];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp52tyv1pp.cpp: In function 'int main()':\n/tmp/tmp52tyv1pp.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp52tyv1pp.cpp:2:\n/tmp/tmp52tyv1pp.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6jqp0g.cpp: In function 'int main()':\n/tmp/tmpik6jqp0g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6jqp0g.cpp:2:\n/tmp/tmpik6jqp0g.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_edl_oz.cpp: In function 'int main()':\n/tmp/tmpb_edl_oz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_edl_oz.cpp:2:\n/tmp/tmpb_edl_oz.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_edl_oz.cpp: In function 'int main()':\n/tmp/tmpb_edl_oz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_edl_oz.cpp:2:\n/tmp/tmpb_edl_oz.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char)(c - 32);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += (char)(c + 32);\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkbem1zlx.cpp: In function 'int main()':\n/tmp/tmpkbem1zlx.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkbem1zlx.cpp:2:\n/tmp/tmpkbem1zlx.cpp:29:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3gil5ae.cpp: In function 'int main()':\n/tmp/tmpl3gil5ae.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3gil5ae.cpp:2:\n/tmp/tmpl3gil5ae.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'y') {\n            result[i] = 'a';\n\
    \        } else if (result[i] == 'z') {\n            result[i] = 'b';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84a8dm0w.cpp: In function 'int main()':\n/tmp/tmp84a8dm0w.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp84a8dm0w.cpp:2:\n/tmp/tmp84a8dm0w.cpp:37:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n  std::string result;\n  std::string vowels = \"aeiou\";\n  for\
    \ (int i = 0; i < message.length(); i++) {\n    char c = message[i];\n    if (c\
    \ >= 'a' && c <= 'z') {\n      c -= 32;\n    }\n    if (vowels.find(c) != std::string::npos)\
    \ {\n      c += 2;\n      if (c > 'Z') {\n        c -= 26;\n      }\n    }\n \
    \   result += c;\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ndggf7z.cpp: In function 'int main()':\n/tmp/tmp7ndggf7z.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7ndggf7z.cpp:2:\n/tmp/tmp7ndggf7z.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        result += c;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp72alxnsu.cpp: In function 'int main()':\n/tmp/tmp72alxnsu.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp72alxnsu.cpp:2:\n/tmp/tmp72alxnsu.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (isupper(message[i])) {\n         \
    \   result += tolower(message[i]);\n        } else if (islower(message[i])) {\n\
    \            result += toupper(message[i]);\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = alphabet[(alphabet.find(result[i]) + 2) % alphabet.length()];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgfl6905.cpp: In function 'int main()':\n/tmp/tmptgfl6905.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptgfl6905.cpp:2:\n/tmp/tmptgfl6905.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (vowels.find(c) != std::string::npos) {\n            int index = vowels.find(c);\n\
    \            index = (index + 2) % vowels.length();\n            encoded += vowels[index];\n\
    \        } else {\n            encoded += c;\n        }\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpirzbnn0c.cpp: In function 'int main()':\n/tmp/tmpirzbnn0c.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpirzbnn0c.cpp:2:\n/tmp/tmpirzbnn0c.cpp:30:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded += toupper(message[i]);\n \
    \       } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += tolower(message[i]);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        for\
    \ (int j = 0; j < encoded.length(); j++) {\n            if (encoded[j] == vowels[i])\
    \ {\n                encoded[j] = vowels[(i + 2) % vowels.length()];\n       \
    \     }\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8t3l7gz2.cpp: In function 'int main()':\n/tmp/tmp8t3l7gz2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8t3l7gz2.cpp:2:\n/tmp/tmp8t3l7gz2.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += (char)(c - 'a' + 'A');\n   \
    \     } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c - 'A'\
    \ + 'a');\n        } else {\n            result += c;\n        }\n    }\n    for\
    \ (int i = 0; i < result.size(); i++) {\n        switch (result[i]) {\n      \
    \      case 'a':\n            case 'A':\n                result[i] = 'c';\n  \
    \              break;\n            case 'e':\n            case 'E':\n        \
    \        result[i] = 'g';\n                break;\n            case 'i':\n   \
    \         case 'I':\n                result[i] = 'k';\n                break;\n\
    \            case 'o':\n            case 'O':\n                result[i] = 'q';\n\
    \                break;\n            case 'u':\n            case 'U':\n      \
    \          result[i] = 's';\n                break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizw47v2_.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpizw47v2_.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpizw47v2_.cpp:\
    \ In function 'int main()':\n/tmp/tmpizw47v2_.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpizw47v2_.cpp:2:\n/tmp/tmpizw47v2_.cpp:52:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] >= 'a' && encoded[i] <= 'z') {\n            for (int j = 0; j <\
    \ vowels.length(); j++) {\n                if (encoded[i] == vowels[j]) {\n  \
    \                  encoded[i] = vowels[(j + 2) % vowels.length()];\n         \
    \           break;\n                }\n            }\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7h0_t4yp.cpp: In function 'int main()':\n/tmp/tmp7h0_t4yp.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7h0_t4yp.cpp:2:\n/tmp/tmp7h0_t4yp.cpp:39:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        if (vowels.find(encoded_message[i])\
    \ != std::string::npos) {\n            encoded_message[i] = (char)(encoded_message[i]\
    \ + 2);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9v5ozvwf.cpp: In function 'int main()':\n/tmp/tmp9v5ozvwf.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9v5ozvwf.cpp:2:\n/tmp/tmp9v5ozvwf.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n        }\
    \ else {\n            result += c;\n        }\n    }\n    for (int i = 0; i <\
    \ result.size(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'w';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'W';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4xkwba2.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpd4xkwba2.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpd4xkwba2.cpp:\
    \ In function 'int main()':\n/tmp/tmpd4xkwba2.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd4xkwba2.cpp:2:\n/tmp/tmpd4xkwba2.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += toupper(message[i]);\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tstd::string vowels =\
    \ \"aeiou\";\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tfor (int j =\
    \ 0; j < vowels.length(); j++) {\n\t\t\tif (result[i] == vowels[j]) {\n\t\t\t\t\
    result[i] = vowels[(j + 2) % vowels.length()];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeiqun_sm.cpp: In function 'int main()':\n/tmp/tmpeiqun_sm.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeiqun_sm.cpp:2:\n/tmp/tmpeiqun_sm.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        result += c;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp72alxnsu.cpp: In function 'int main()':\n/tmp/tmp72alxnsu.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp72alxnsu.cpp:2:\n/tmp/tmp72alxnsu.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I'\
    \ || result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'Y') {\n            result[i] = 'A';\n\
    \        } else if (result[i] == 'Z') {\n            result[i] = 'B';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr5pd27j9.cpp: In function 'int main()':\n/tmp/tmpr5pd27j9.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr5pd27j9.cpp:2:\n/tmp/tmpr5pd27j9.cpp:37:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        for\
    \ (int j = 0; j < encoded_message.length(); j++) {\n            if (encoded_message[j]\
    \ == vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11r809s4.cpp: In function 'int main()':\n/tmp/tmp11r809s4.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11r809s4.cpp:2:\n/tmp/tmp11r809s4.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'y') {\n            result[i] = 'a';\n\
    \        } else if (result[i] == 'z') {\n            result[i] = 'b';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84a8dm0w.cpp: In function 'int main()':\n/tmp/tmp84a8dm0w.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp84a8dm0w.cpp:2:\n/tmp/tmp84a8dm0w.cpp:37:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i]\
    \ - 'a' + 'A');\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\
    \tresult += (char)(message[i] - 'A' + 'a');\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = (char)(result[i] + 2);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j1krgu1.cpp: In function 'int main()':\n/tmp/tmp2j1krgu1.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j1krgu1.cpp:2:\n/tmp/tmp2j1krgu1.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a'\
    \ && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c = c +\
    \ 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            c = c + 2;\n        }\n        encoded_message += c;\n \
    \   }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprc6qcn4j.cpp: In function 'int main()':\n/tmp/tmprc6qcn4j.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprc6qcn4j.cpp:2:\n/tmp/tmprc6qcn4j.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (char c : message) {\n        if (isupper(c)) {\n            encoded\
    \ += tolower(c);\n        } else if (islower(c)) {\n            encoded += toupper(c);\n\
    \        } else {\n            encoded += c;\n        }\n    }\n    for (int i\
    \ = 0; i < encoded.length(); i++) {\n        if (vowels.find(encoded[i]) != std::string::npos)\
    \ {\n            encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.length()];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4evyrwqd.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp4evyrwqd.cpp:16:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp4evyrwqd.cpp:\
    \ In function 'int main()':\n/tmp/tmp4evyrwqd.cpp:33:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4evyrwqd.cpp:2:\n/tmp/tmp4evyrwqd.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += message[i] -\
    \ 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n        \
    \    encoded_message += message[i] + 32;\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn55cx1x9.cpp: In function 'int main()':\n/tmp/tmpn55cx1x9.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn55cx1x9.cpp:2:\n/tmp/tmpn55cx1x9.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        result.push_back(c);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgepabqeh.cpp: In function 'int main()':\n/tmp/tmpgepabqeh.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgepabqeh.cpp:2:\n/tmp/tmpgepabqeh.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        encoded += c;\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2oze3kly.cpp: In function 'int main()':\n/tmp/tmp2oze3kly.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2oze3kly.cpp:2:\n/tmp/tmp2oze3kly.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp00e1u1dh.cpp: In function 'int main()':\n/tmp/tmp00e1u1dh.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp00e1u1dh.cpp:2:\n/tmp/tmp00e1u1dh.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += toupper(message[i]);\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] >= 'a' && result[i] <= 'z') {\n            for (int j = 0; j < vowels.length();\
    \ j++) {\n                if (result[i] == vowels[j]) {\n                    result[i]\
    \ = vowels[(j + 2) % vowels.length()];\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2cvz_7f.cpp: In function 'int main()':\n/tmp/tmpn2cvz_7f.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn2cvz_7f.cpp:2:\n/tmp/tmpn2cvz_7f.cpp:39:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c))\
    \ {\n            c = toupper(c);\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            c = vowels[(vowels.find(c) + 2) % vowels.length()];\n       \
    \ }\n        encoded += c;\n    }\n    return encoded;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1g1siha.cpp: In function 'int main()':\n/tmp/tmpv1g1siha.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv1g1siha.cpp:2:\n/tmp/tmpv1g1siha.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7ub3qw_.cpp: In function 'int main()':\n/tmp/tmpu7ub3qw_.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7ub3qw_.cpp:2:\n/tmp/tmpu7ub3qw_.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        for\
    \ (int j = 0; j < vowels.length(); j++) {\n            if (result[i] == vowels[j])\
    \ {\n                result[i] = vowels[(j + 2) % vowels.length()];\n        \
    \    }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ulambqf.cpp: In function 'int main()':\n/tmp/tmp6ulambqf.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ulambqf.cpp:2:\n/tmp/tmp6ulambqf.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65ere2tb.cpp: In function 'int main()':\n/tmp/tmp65ere2tb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65ere2tb.cpp:2:\n/tmp/tmp65ere2tb.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a' || encoded[i]\
    \ == 'e' || encoded[i] == 'i' || encoded[i] == 'o' || encoded[i] == 'u') {\n \
    \           encoded[i] = (char)(encoded[i] + 2);\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08p97lhv.cpp: In function 'int main()':\n/tmp/tmp08p97lhv.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp08p97lhv.cpp:2:\n/tmp/tmp08p97lhv.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == ' ') {\n            result += ' ';\n     \
    \   } else if (message[i] == 'a' || message[i] == 'A') {\n            result +=\
    \ 'c';\n        } else if (message[i] == 'e' || message[i] == 'E') {\n       \
    \     result += 'g';\n        } else if (message[i] == 'i' || message[i] == 'I')\
    \ {\n            result += 'k';\n        } else if (message[i] == 'o' || message[i]\
    \ == 'O') {\n            result += 'q';\n        } else if (message[i] == 'u'\
    \ || message[i] == 'U') {\n            result += 'y';\n        } else if (message[i]\
    \ == 'y' || message[i] == 'Y') {\n            result += 'a';\n        } else if\
    \ (message[i] == 'b' || message[i] == 'B') {\n            result += 'd';\n   \
    \     } else if (message[i] == 'c' || message[i] == 'C') {\n            result\
    \ += 'e';\n        } else if (message[i] == 'd' || message[i] == 'D') {\n    \
    \        result += 'f';\n        } else if (message[i] == 'f' || message[i] ==\
    \ 'F') {\n            result += 'h';\n        } else if (message[i] == 'g' ||\
    \ message[i] == 'G') {\n            result += 'i';\n        } else if (message[i]\
    \ == 'h' || message[i] == 'H') {\n            result += 'j';\n        } else if\
    \ (message[i] == 'j' || message[i] == 'J') {\n            result += 'l';\n   \
    \     } else if (message[i] == 'k' || message[i] == 'K') {\n            result\
    \ += 'm';\n        } else if (message[i] == 'l' || message[i] == 'L') {\n    \
    \        result += 'n';\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfktg39l.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmprfktg39l.cpp:49:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmprfktg39l.cpp:56:1: error: expected\
    \ '}' at end of input\n }\n ^\n/tmp/tmprfktg39l.cpp:56:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c))\
    \ {\n            c = toupper(c);\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            int index = vowels.find(c);\n            c = vowels[(index +\
    \ 2) % vowels.length()];\n        }\n        result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2arkqlgc.cpp: In function 'int main()':\n/tmp/tmp2arkqlgc.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2arkqlgc.cpp:2:\n/tmp/tmp2arkqlgc.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n \
    \       char c = result[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            result[i] = 'a' + (c - 'a' + 2) % 26;\n \
    \       } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \            result[i] = 'A' + (c - 'A' + 2) % 26;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1j0izi1r.cpp: In function 'int main()':\n/tmp/tmp1j0izi1r.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1j0izi1r.cpp:2:\n/tmp/tmp1j0izi1r.cpp:37:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tstd::string vowels = \"aeiou\";\n\tfor\
    \ (int i = 0; i < message.length(); i++) {\n\t\tif (isupper(message[i])) {\n\t\
    \t\tresult += tolower(message[i]);\n\t\t} else if (islower(message[i])) {\n\t\t\
    \tresult += toupper(message[i]);\n\t\t} else {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (vowels.find(result[i])\
    \ != std::string::npos) {\n\t\t\tresult[i] = vowels[(vowels.find(result[i]) +\
    \ 2) % vowels.length()];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyqfhazo.cpp: In function 'int main()':\n/tmp/tmpdyqfhazo.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdyqfhazo.cpp:2:\n/tmp/tmpdyqfhazo.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += toupper(c);\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            result += tolower(c);\n        } else\
    \ {\n            result += c;\n        }\n    }\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < result.size(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.size()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwnzm61k.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpkwnzm61k.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpkwnzm61k.cpp:\
    \ In function 'int main()':\n/tmp/tmpkwnzm61k.cpp:33:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwnzm61k.cpp:2:\n/tmp/tmpkwnzm61k.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_hehtf.cpp: In function 'int main()':\n/tmp/tmpoc_hehtf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoc_hehtf.cpp:2:\n/tmp/tmpoc_hehtf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += toupper(message[i]);\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsnxmaen.cpp: In function 'int main()':\n/tmp/tmpwsnxmaen.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwsnxmaen.cpp:2:\n/tmp/tmpwsnxmaen.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = (c - 'a' + 2) % 26 + 'a';\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05j1dspr.cpp: In function 'int main()':\n/tmp/tmp05j1dspr.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp05j1dspr.cpp:2:\n/tmp/tmp05j1dspr.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    result += message[i] + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu0djzxvw.cpp: In function 'int main()':\n/tmp/tmpu0djzxvw.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu0djzxvw.cpp:2:\n/tmp/tmpu0djzxvw.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93yqujke.cpp: In function 'int main()':\n/tmp/tmp93yqujke.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp93yqujke.cpp:2:\n/tmp/tmp93yqujke.cpp:27:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded += tolower(message[i]) + 2;\n \
    \       } else {\n            encoded += tolower(message[i]);\n        }\n   \
    \ }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxjshcqpb.cpp: In function 'int main()':\n/tmp/tmpxjshcqpb.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxjshcqpb.cpp:2:\n/tmp/tmpxjshcqpb.cpp:27:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (std::isupper(message[i]))\
    \ {\n            result += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            result += std::toupper(message[i]);\n        } else {\n     \
    \       result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk29bxmvi.cpp: In function 'int main()':\n/tmp/tmpk29bxmvi.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk29bxmvi.cpp:2:\n/tmp/tmpk29bxmvi.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i]\
    \ - 'a' + 'A');\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\
    \tresult += (char)(message[i] - 'A' + 'a');\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n\t\t\tresult[i] = (char)(result[i] + 2);\n\t\t} else if (result[i]\
    \ == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = (char)(result[i] + 2);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqp5vxl37.cpp: In function 'int main()':\n/tmp/tmpqp5vxl37.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqp5vxl37.cpp:2:\n/tmp/tmpqp5vxl37.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i]\
    \ - 'a' + 'A');\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\
    \tresult += (char)(message[i] - 'A' + 'a');\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n\t\t\tresult[i] = (char)(result[i] + 2);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgog663q9.cpp: In function 'int main()':\n/tmp/tmpgog663q9.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgog663q9.cpp:2:\n/tmp/tmpgog663q9.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message;\n    for (char &c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            c = c + 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            c = c + 2;\n        }\n        encoded_message\
    \ += c;\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzw8_tpy4.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpzw8_tpy4.cpp:15:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char &c : message) {\n                    ^\n/tmp/tmpzw8_tpy4.cpp:\
    \ In function 'int main()':\n/tmp/tmpzw8_tpy4.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzw8_tpy4.cpp:2:\n/tmp/tmpzw8_tpy4.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpewffyoq2.cpp: In function 'int main()':\n/tmp/tmpewffyoq2.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpewffyoq2.cpp:2:\n/tmp/tmpewffyoq2.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (char c : message) {\n        if (isupper(c)) {\n            result\
    \ += tolower(c);\n        } else if (islower(c)) {\n            result += toupper(c);\n\
    \        } else {\n            result += c;\n        }\n        if (vowels.find(tolower(c))\
    \ != std::string::npos) {\n            result.pop_back();\n            int index\
    \ = vowels.find(tolower(c));\n            index = (index + 2) % 5;\n         \
    \   result += toupper(vowels[index]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04681mw1.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp04681mw1.cpp:16:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp04681mw1.cpp:25:20:\
    \ error: 'std::string' has no member named 'pop_back'\n             result.pop_back();\n\
    \                    ^\n/tmp/tmp04681mw1.cpp: In function 'int main()':\n/tmp/tmp04681mw1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04681mw1.cpp:2:\n/tmp/tmp04681mw1.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (std::isupper(message[i]))\
    \ {\n            result += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            result += std::toupper(message[i]);\n        } else {\n     \
    \       result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcs57l5l.cpp: In function 'int main()':\n/tmp/tmphcs57l5l.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcs57l5l.cpp:2:\n/tmp/tmphcs57l5l.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' ||\
    \ result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i] +\
    \ 2;\n        } else if (result[i] == 'C' || result[\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjfz5t6r.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpgjfz5t6r.cpp:34:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpgjfz5t6r.cpp:34:1: error: expected ']' before '}' token\n/tmp/tmpgjfz5t6r.cpp:34:1:\
    \ error: expected ')' before '}' token\n/tmp/tmpgjfz5t6r.cpp:34:1: error: expected\
    \ primary-expression before '}' token\n/tmp/tmpgjfz5t6r.cpp:34:1: error: expected\
    \ ';' before '}' token\n/tmp/tmpgjfz5t6r.cpp:35:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpgjfz5t6r.cpp:42:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += c - 32;\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            result += c + 32;\n        } else {\n   \
    \         result += c;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59twjx1m.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp59twjx1m.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp59twjx1m.cpp:\
    \ In function 'int main()':\n/tmp/tmp59twjx1m.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp59twjx1m.cpp:2:\n/tmp/tmp59twjx1m.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkh182zg3.cpp: In function 'int main()':\n/tmp/tmpkh182zg3.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkh182zg3.cpp:2:\n/tmp/tmpkh182zg3.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        if (vowels.find(c) != std::string::npos) {\n            c = vowels[(vowels.find(c)\
    \ + 2) % vowels.length()];\n        }\n        result += c;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8sr63axw.cpp: In function 'int main()':\n/tmp/tmp8sr63axw.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8sr63axw.cpp:2:\n/tmp/tmp8sr63axw.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = (result[i] + 2 - 'a') % 26 + 'a';\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo426j0xc.cpp: In function 'int main()':\n/tmp/tmpo426j0xc.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo426j0xc.cpp:2:\n/tmp/tmpo426j0xc.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char)(c - 'a' + 'A');\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            result += (char)(c - 'A' + 'a');\n        } else {\n\
    \            result += c;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0mnciez.cpp: In function 'int main()':\n/tmp/tmpm0mnciez.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm0mnciez.cpp:2:\n/tmp/tmpm0mnciez.cpp:29:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        int\
    \ pos = encoded_message.find(vowels[i]);\n        while (pos != std::string::npos)\
    \ {\n            encoded_message[pos] = vowels[(i + 2) % vowels.length()];\n \
    \           pos = encoded_message.find(vowels[i], pos + 1);\n        }\n    }\n\
    \    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8es73w3e.cpp: In function 'int main()':\n/tmp/tmp8es73w3e.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8es73w3e.cpp:2:\n/tmp/tmp8es73w3e.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        int\
    \ index = encoded_message.find(vowels[i]);\n        while (index != std::string::npos)\
    \ {\n            encoded_message[index] = vowels[(i + 2) % vowels.length()];\n\
    \            index = encoded_message.find(vowels[i], index + 1);\n        }\n\
    \    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9bt5q4qj.cpp: In function 'int main()':\n/tmp/tmp9bt5q4qj.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9bt5q4qj.cpp:2:\n/tmp/tmp9bt5q4qj.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string encoded_message;\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tencoded_message\
    \ += message[i] - 32;\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n\t\t\tencoded_message += message[i] + 32;\n\t\t} else {\n\t\t\tencoded_message\
    \ += message[i];\n\t\t}\n\t}\n\tstd::string vowels = \"aeiou\";\n\tfor (int i\
    \ = 0; i < vowels.length(); i++) {\n\t\tfor (int j = 0; j < encoded_message.length();\
    \ j++) {\n\t\t\tif (encoded_message[j] == vowels[i]) {\n\t\t\t\tencoded_message[j]\
    \ = vowels[(i + 2) % 5];\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp200o4ktv.cpp: In function 'int main()':\n/tmp/tmp200o4ktv.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp200o4ktv.cpp:2:\n/tmp/tmp200o4ktv.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += toupper(message[i]);\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        for\
    \ (int j = 0; j < vowels.length(); j++) {\n            if (result[i] == vowels[j])\
    \ {\n                result[i] = vowels[(j + 2) % vowels.length()];\n        \
    \    }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpak55b3fe.cpp: In function 'int main()':\n/tmp/tmpak55b3fe.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpak55b3fe.cpp:2:\n/tmp/tmpak55b3fe.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i] +\
    \ 32;\n        } else {\n            encoded_message += message[i];\n        }\n\
    \    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'S';\n        } else if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 's';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkmtbgwu.cpp: In function 'int main()':\n/tmp/tmpbkmtbgwu.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbkmtbgwu.cpp:2:\n/tmp/tmpbkmtbgwu.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6jqp0g.cpp: In function 'int main()':\n/tmp/tmpik6jqp0g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6jqp0g.cpp:2:\n/tmp/tmpik6jqp0g.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65ere2tb.cpp: In function 'int main()':\n/tmp/tmp65ere2tb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65ere2tb.cpp:2:\n/tmp/tmp65ere2tb.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += toupper(message[i]);\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tif (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' ||\
    \ result[i] == 'o' || result[i] == 'u') {\n\t\t\tresult[i] = result[i] + 2;\n\t\
    \t} else if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i]\
    \ == 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t} else if (result[i] == 'b')\
    \ {\n\t\t\tresult[i] = 'd';\n\t\t} else if (result[i] == 'B') {\n\t\t\tresult[i]\
    \ = 'D';\n\t\t} else if (result[i] == 'z') {\n\t\t\tresult[i] = 'b';\n\t\t} else\
    \ if (result[i] == 'Z') {\n\t\t\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcx3ibxgn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpskn0xg3r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 1;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnirl61m8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx1sm3siw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string encoded_message = \"\";\n\tstd::string vowels = \"\
    aeiou\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n\t\t\tencoded_message += toupper(message[i]);\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded_message\
    \ += tolower(message[i]);\n\t\t} else {\n\t\t\tencoded_message += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < encoded_message.length(); i++) {\n\t\tif (encoded_message[i]\
    \ >= 'a' && encoded_message[i] <= 'z') {\n\t\t\tfor (int j = 0; j < vowels.length();\
    \ j++) {\n\t\t\t\tif (encoded_message[i] == vowels[j]) {\n\t\t\t\t\tif (j + 2\
    \ >= vowels.length()) {\n\t\t\t\t\t\tencoded_message[i] = vowels[j + 2 - vowels.length()];\n\
    \t\t\t\t\t} else {\n\t\t\t\t\t\tencoded_message[i] = vowels[j + 2];\n\t\t\t\t\t\
    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ooxqemw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\
    \tfor (int i = 0; i < message.length(); i++) {\n\t\tif (isupper(message[i])) {\n\
    \t\t\tresult += tolower(message[i]);\n\t\t} else if (islower(message[i])) {\n\t\
    \t\tresult += toupper(message[i]);\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tfor (int j = 0;\
    \ j < vowels.length(); j++) {\n\t\t\tif (result[i] == vowels[j]) {\n\t\t\t\tresult[i]\
    \ = vowels[(j + 2) % vowels.length()];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkpnqfi98.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    std::string vowels =\
    \ \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encodedMessage += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encodedMessage\
    \ += tolower(message[i]);\n        } else {\n            encodedMessage += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        for\
    \ (int j = 0; j < encodedMessage.length(); j++) {\n            if (encodedMessage[j]\
    \ == vowels[i]) {\n                encodedMessage[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpncnscdc8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += tolower(message[i]);\n        } else {\n \
    \           encoded += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n            encoded[i]\
    \ = 'c';\n        } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n\
    \        } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n    \
    \    } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        }\
    \ else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n        } else\
    \ if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        } else if (encoded[i]\
    \ == 'E') {\n            encoded[i] = 'G';\n        } else if (encoded[i] == 'I')\
    \ {\n            encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n\
    \            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n    \
    \        encoded[i] = 'W';\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvz1iu57p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult\
    \ += message[i] + 32;\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\
    \tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'A' || result[i]\
    \ == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n\t\t\t\
    result[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n  \
    \  auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppwpb9df2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'A' || result[i] == 'E' ||\
    \ result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i]\
    \ = (char)(result[i] + 2);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4fyk2vdz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c += 32;\n        }\n        for (int\
    \ j = 0; j < vowels.length(); j++) {\n            if (c == vowels[j]) {\n    \
    \            c = vowels[(j + 2) % vowels.length()];\n                break;\n\
    \            }\n        }\n        result += c;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6sqhuhyu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += tolower(message[i]);\n        } else {\n \
    \           encoded += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n            encoded[i]\
    \ = 'c';\n        } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n\
    \        } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n    \
    \    } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        }\
    \ else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n        } else\
    \ if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        } else if (encoded[i]\
    \ == 'E') {\n            encoded[i] = 'G';\n        } else if (encoded[i] == 'I')\
    \ {\n            encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n\
    \            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n    \
    \        encoded[i] = 'W';\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvz1iu57p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n          \
    \  result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n       \
    \     result += tolower(c);\n        } else {\n            result += c;\n    \
    \    }\n    }\n    for (int i = 0; i < result.size(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.size()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvt0z954.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4_6mx4o0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < result.length(); i++) {\n\
    \        if (vowels.find(result[i]) != std::string::npos) {\n            if (result[i]\
    \ == 'U') {\n                result[i] = 'A';\n            } else if (result[i]\
    \ == 'u') {\n                result[i] = 'a';\n            } else {\n        \
    \        result[i] += 2;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphem97up9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpewffyoq2.cpp: In function 'int main()':\n/tmp/tmpewffyoq2.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpewffyoq2.cpp:2:\n/tmp/tmpewffyoq2.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx1sm3siw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65ere2tb.cpp: In function 'int main()':\n/tmp/tmp65ere2tb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65ere2tb.cpp:2:\n/tmp/tmp65ere2tb.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    result += message[i] + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu0djzxvw.cpp: In function 'int main()':\n/tmp/tmpu0djzxvw.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu0djzxvw.cpp:2:\n/tmp/tmpu0djzxvw.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93yqujke.cpp: In function 'int main()':\n/tmp/tmp93yqujke.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp93yqujke.cpp:2:\n/tmp/tmp93yqujke.cpp:27:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result = \"\";\n\tstd::string vowels = \"aeiou\";\n\
    \tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n\t\t\tresult += message[i] - 32;\n\t\t} else if (message[i] >= 'A'\
    \ && message[i] <= 'Z') {\n\t\t\tresult += message[i] + 32;\n\t\t} else {\n\t\t\
    \tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++)\
    \ {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (result[i] == vowels[j])\
    \ {\n\t\t\t\tresult[i] = vowels[(j + 2) % vowels.length()];\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp52yj48_1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a' || encoded[i]\
    \ == 'e' || encoded[i] == 'i' || encoded[i] == 'o' || encoded[i] == 'u') {\n \
    \           encoded[i] = (char)(encoded[i] + 2);\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08p97lhv.cpp: In function 'int main()':\n/tmp/tmp08p97lhv.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp08p97lhv.cpp:2:\n/tmp/tmp08p97lhv.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(message[i])\
    \ != std::string::npos) {\n            encoded += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpizgqhq0q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string vowels = \"aeiou\";\n\tstd::string encoded_message\
    \ = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n\t\t\tencoded_message += (char)(message[i] + 2);\n\t\
    \t} else {\n\t\t\tencoded_message += (char)(message[i] - 32);\n\t\t}\n\t}\n\t\
    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptjx96rrw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7ub3qw_.cpp: In function 'int main()':\n/tmp/tmpu7ub3qw_.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7ub3qw_.cpp:2:\n/tmp/tmpu7ub3qw_.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8pvv_e76.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n    \
    \        result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     int index = vowels.find(result[i]);\n            result[i] = vowels[(index\
    \ + 2) % 5];\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu6oi_tof.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (vowels.find(c) != std::string::npos) {\n            int index = vowels.find(c);\n\
    \            encoded += vowels[(index + 2) % vowels.length()];\n        } else\
    \ {\n            encoded += c;\n        }\n    }\n    return encoded;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcyw6qwy5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded;\n    for (char c : message) {\n       \
    \ if (c >= 'a' && c <= 'z') {\n            encoded += toupper(c);\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            encoded += tolower(c);\n        } else\
    \ {\n            encoded += c;\n        }\n    }\n    for (int i = 0; i < encoded.size();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3g_137ax.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpojiah07e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a' || encoded_message[i] == 'e' ||\
    \ encoded_message[i] == 'i' || encoded_message[i] == 'o' || encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = (char)(encoded_message[i] + 2);\n\
    \        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppejmwgz7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n        } else {\n            encoded += message[i];\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyqp2lfil.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string encoded = \"\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tencoded +=\
    \ (char)(message[i] - 32);\n\t\t} else if (message[i] >= 'A' && message[i] <=\
    \ 'Z') {\n\t\t\tencoded += (char)(message[i] + 32);\n\t\t} else {\n\t\t\tencoded\
    \ += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < encoded.length(); i++) {\n\
    \t\tif (encoded[i] == 'a') {\n\t\t\tencoded[i] = 'c';\n\t\t} else if (encoded[i]\
    \ == 'e') {\n\t\t\tencoded[i] = 'g';\n\t\t} else if (encoded[i] == 'i') {\n\t\t\
    \tencoded[i] = 'k';\n\t\t} else if (encoded[i] == 'o') {\n\t\t\tencoded[i] = 'q';\n\
    \t\t} else if (encoded[i] == 'u') {\n\t\t\tencoded[i] = 'w';\n\t\t} else if (encoded[i]\
    \ == 'A') {\n\t\t\tencoded[i] = 'C';\n\t\t} else if (encoded[i] == 'E') {\n\t\t\
    \tencoded[i] = 'G';\n\t\t} else if (encoded[i] == 'I') {\n\t\t\tencoded[i] = 'K';\n\
    \t\t} else if (encoded[i] == 'O') {\n\t\t\tencoded[i] = 'Q';\n\t\t} else if (encoded[i]\
    \ == 'U') {\n\t\t\tencoded[i] = 'W';\n\t\t}\n\t}\n\treturn encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl1erheoq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_hehtf.cpp: In function 'int main()':\n/tmp/tmpoc_hehtf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoc_hehtf.cpp:2:\n/tmp/tmpoc_hehtf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 1;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'B') {\n            result[i] = 'D';\n      \
    \  } else if (result[i] == 'A') {\n            result[i] = 'C';\n        } else\
    \ if (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk62dh8hu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2215kpcq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6jqp0g.cpp: In function 'int main()':\n/tmp/tmpik6jqp0g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6jqp0g.cpp:2:\n/tmp/tmpik6jqp0g.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   std::string alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string alpha_upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      int index = alpha.find(message[i]);\n            result += alpha[(index\
    \ + 2) % 26];\n        } else if (alpha.find(message[i]) != std::string::npos)\
    \ {\n            int index = alpha.find(message[i]);\n            result += alpha_upper[index];\n\
    \        } else {\n            int index = alpha_upper.find(message[i]);\n   \
    \         result += alpha[index];\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1o2ndvsd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (char c : message) {\n        if (vowels.find(tolower(c)) != std::string::npos)\
    \ {\n            result += (char)((tolower(c) - 'a' + 2) % 26 + 'a');\n      \
    \  } else {\n            result += (char)((tolower(c) - 'a' + 13) % 26 + 'a');\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwys5ybxd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'b') {\n            result[i] = 'd';\n        } else\
    \ if (result[i] == 'B') {\n            result[i] = 'D';\n        } else if (result[i]\
    \ == 'z') {\n            result[i] = 'b';\n        } else if (result[i] == 'Z')\
    \ {\n            result[i] = 'B';\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv1bchf5e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkh182zg3.cpp: In function 'int main()':\n/tmp/tmpkh182zg3.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkh182zg3.cpp:2:\n/tmp/tmpkh182zg3.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n\
    \        }\n        if (vowels.find(c) != std::string::npos) {\n            c\
    \ += 2;\n            if (c > 'Z') {\n                c -= 26;\n            }\n\
    \        }\n        encoded_message += c;\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvuq_r3bb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_hehtf.cpp: In function 'int main()':\n/tmp/tmpoc_hehtf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoc_hehtf.cpp:2:\n/tmp/tmpoc_hehtf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_edl_oz.cpp: In function 'int main()':\n/tmp/tmpb_edl_oz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_edl_oz.cpp:2:\n/tmp/tmpb_edl_oz.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx1sm3siw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message;\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        int\
    \ j = 0;\n        while (j < encoded_message.length()) {\n            if (encoded_message[j]\
    \ == vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n            j++;\n        }\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnsgqnzzc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n      \
    \  switch (c) {\n            case 'A':\n                c = 'C';\n           \
    \     break;\n            case 'E':\n                c = 'G';\n              \
    \  break;\n            case 'I':\n                c = 'K';\n                break;\n\
    \            case 'O':\n                c = 'Q';\n                break;\n   \
    \         case 'U':\n                c = 'S';\n                break;\n      \
    \      case 'a':\n                c = 'c';\n                break;\n         \
    \   case 'e':\n                c = 'g';\n                break;\n            case\
    \ 'i':\n                c = 'k';\n                break;\n            case 'o':\n\
    \                c = 'q';\n                break;\n            case 'u':\n   \
    \             c = 's';\n                break;\n        }\n        result += c;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm56leuse.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] == '\
    \ ') {\n            encoded_message += ' ';\n            continue;\n        }\n\
    \        if (std::islower(message[i])) {\n            int index = alphabet.find(message[i]);\n\
    \            if (vowels.find(message[i]) != std::string::npos) {\n           \
    \     encoded_message += std::toupper(alphabet[(index + 2) % 26]);\n         \
    \   } else {\n                encoded_message += std::toupper(message[i]);\n \
    \           }\n        } else {\n            int index = alphabet.find(std::tolower(message[i]));\n\
    \            if (vowels.find(std::tolower(message[i])) != std::string::npos) {\n\
    \                encoded_message += alphabet[(index + 2) % 26];\n            }\
    \ else {\n                encoded_message += message[i];\n            }\n    \
    \    }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6djwp_pc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (char c : message) {\n        if (isupper(c)) {\n            result +=\
    \ tolower(c);\n        } else if (islower(c)) {\n            result += toupper(c);\n\
    \        } else {\n            result += c;\n        }\n        if (vowels.find(tolower(c))\
    \ != std::string::npos) {\n            result.pop_back();\n            int index\
    \ = vowels.find(tolower(c));\n            index = (index + 2) % vowels.size();\n\
    \            result += vowels[index];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyn84cxaj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_n6e3yb1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65ere2tb.cpp: In function 'int main()':\n/tmp/tmp65ere2tb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65ere2tb.cpp:2:\n/tmp/tmp65ere2tb.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 1;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnirl61m8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    result += message[i] + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu0djzxvw.cpp: In function 'int main()':\n/tmp/tmpu0djzxvw.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu0djzxvw.cpp:2:\n/tmp/tmpu0djzxvw.cpp:35:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            encoded += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            encoded += toupper(message[i]);\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n\
    \            encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n    \
    \        encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n        \
    \    encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i]\
    \ = 'q';\n        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpte1qp3hd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkh182zg3.cpp: In function 'int main()':\n/tmp/tmpkh182zg3.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkh182zg3.cpp:2:\n/tmp/tmpkh182zg3.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       encoded_message += (char)(message[i] + 32);\n        } else {\n      \
    \      encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i\
    \ < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplr2au27q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < encoded_message.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encoded_message[i] == vowels[j]) {\n               \
    \ encoded_message[i] = vowels[(j + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpapyj1xbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += (char)((message[i] - 'a' + 2)\
    \ % 26 + 'a');\n        } else {\n            result += (char)(message[i] ^ 32);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpchdc53qv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6jqp0g.cpp: In function 'int main()':\n/tmp/tmpik6jqp0g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6jqp0g.cpp:2:\n/tmp/tmpik6jqp0g.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'A' || encoded[i]\
    \ == 'E' || encoded[i] == 'I' || encoded[i] == 'O' || encoded[i] == 'U') {\n \
    \           encoded[i] = (char)(encoded[i] + 2);\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8xuo7g7w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 1;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnirl61m8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0wqzx_cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3gil5ae.cpp: In function 'int main()':\n/tmp/tmpl3gil5ae.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3gil5ae.cpp:2:\n/tmp/tmpl3gil5ae.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (vowels.find(encoded_message[i]) != std::string::npos) {\n       \
    \     if (encoded_message[i] == 'u') {\n                encoded_message[i] = 'a';\n\
    \            } else if (encoded_message[i] == 'U') {\n                encoded_message[i]\
    \ = 'A';\n            } else {\n                encoded_message[i] += 2;\n   \
    \         }\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpid5kzoaw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65ere2tb.cpp: In function 'int main()':\n/tmp/tmp65ere2tb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65ere2tb.cpp:2:\n/tmp/tmp65ere2tb.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     int index = vowels.find(result[i]);\n            if (index == 4) {\n   \
    \             result[i] = 'a';\n            } else {\n                result[i]\
    \ = vowels[index + 2];\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd0c3xi5b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6jqp0g.cpp: In function 'int main()':\n/tmp/tmpik6jqp0g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6jqp0g.cpp:2:\n/tmp/tmpik6jqp0g.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpojiah07e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n            c = (c - 'A' + 2) % 26 + 'A';\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            c = (c - 'a' + 2) % 26 + 'a';\n        }\n        result += c;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpca8df8ph.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] >= 'a' && result[i] <= 'z') {\n            for (int j = 0; j < vowels.length();\
    \ j++) {\n                if (result[i] == vowels[j]) {\n                    result[i]\
    \ = vowels[(j + 2) % vowels.length()];\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1hexaib3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpik6jqp0g.cpp: In function 'int main()':\n/tmp/tmpik6jqp0g.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpik6jqp0g.cpp:2:\n/tmp/tmpik6jqp0g.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char)(c - 'a' + 'A');\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            result += (char)(c - 'A' + 'a');\n        } else {\n\
    \            result += c;\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        char c = result[i];\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            result[i] = (char)(c + 2);\n   \
    \     } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \            result[i] = (char)(c + 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpunl5wpcv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % 5];\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7v2yb95b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx1sm3siw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   c = c + 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = c + 2;\n        }\n        result += c;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7nh6a2z6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        result += c;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp72alxnsu.cpp: In function 'int main()':\n/tmp/tmp72alxnsu.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp72alxnsu.cpp:2:\n/tmp/tmp72alxnsu.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3gil5ae.cpp: In function 'int main()':\n/tmp/tmpl3gil5ae.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3gil5ae.cpp:2:\n/tmp/tmpl3gil5ae.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n          \
    \  c -= 32;\n        }\n        if (vowels.find(c) != std::string::npos) {\n \
    \           c += 2;\n            if (c > 'Z') {\n                c -= 26;\n  \
    \          }\n        }\n        result += c;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfzlgi2c8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += tolower(message[i]) + 2;\n  \
    \      } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4e5hqiwb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7ub3qw_.cpp: In function 'int main()':\n/tmp/tmpu7ub3qw_.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7ub3qw_.cpp:2:\n/tmp/tmpu7ub3qw_.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded += message[i] + 32;\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8pvv_e76.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += (char)(message[i] + 2);\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgfylctjm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7ub3qw_.cpp: In function 'int main()':\n/tmp/tmpu7ub3qw_.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7ub3qw_.cpp:2:\n/tmp/tmpu7ub3qw_.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'w';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'W';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqjl9tj9.cpp: In function 'int main()':\n/tmp/tmpwqjl9tj9.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwqjl9tj9.cpp:2:\n/tmp/tmpwqjl9tj9.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded;\n    std::string vowels = \"aeiou\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += toupper(message[i]);\n     \
    \   } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += tolower(message[i]);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (vowels.find(encoded[i]) != std::string::npos) {\n            int index = vowels.find(encoded[i]);\n\
    \            encoded[i] = vowels[(index + 2) % 5];\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfeb085yt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpftwvvts6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 32;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        for (int j = 0; j <\
    \ vowels.length(); j++) {\n            if (result[i] == vowels[j]) {\n       \
    \         result[i] = vowels[(j + 2) % vowels.length()];\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo_ze8b5n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        switch (c) {\n           \
    \ case 'A':\n                c = 'C';\n                break;\n            case\
    \ 'E':\n                c = 'G';\n                break;\n            case 'I':\n\
    \                c = 'K';\n                break;\n            case 'O':\n   \
    \             c = 'Q';\n                break;\n            case 'U':\n      \
    \          c = 'S';\n                break;\n            case 'a':\n         \
    \       c = 'c';\n                break;\n            case 'e':\n            \
    \    c = 'g';\n                break;\n            case 'i':\n               \
    \ c = 'k';\n                break;\n            case 'o':\n                c =\
    \ 'q';\n                break;\n            case 'u':\n                c = 's';\n\
    \                break;\n        }\n        result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1gvda07_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a' || encoded_message[i] == 'e' ||\
    \ encoded_message[i] == 'i' || encoded_message[i] == 'o' || encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = (char)(encoded_message[i] + 2);\n\
    \        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppejmwgz7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    std::string vowels_encoded = \"cgjln\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels_encoded[j];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpftr2sopa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(message[i])\
    \ != std::string::npos) {\n            encoded += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpizgqhq0q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(message[i])\
    \ != std::string::npos) {\n            encoded += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpizgqhq0q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_hehtf.cpp: In function 'int main()':\n/tmp/tmpoc_hehtf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoc_hehtf.cpp:2:\n/tmp/tmpoc_hehtf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx1sm3siw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    std::string vowels = \"aeiou\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += toupper(message[i]);\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsnxmaen.cpp: In function 'int main()':\n/tmp/tmpwsnxmaen.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwsnxmaen.cpp:2:\n/tmp/tmpwsnxmaen.cpp:34:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'B') {\n            result[i] = 'D';\n      \
    \  } else if (result[i] == 'z') {\n            result[i] = 'b';\n        } else\
    \ if (result[i] == 'Z') {\n            result[i] = 'B';\n        }\n    }\n  \
    \  return\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsyg466vi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65ere2tb.cpp: In function 'int main()':\n/tmp/tmp65ere2tb.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65ere2tb.cpp:2:\n/tmp/tmp65ere2tb.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0zoulev6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxlpuluhn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += tolower(message[i]);\n        } else {\n \
    \           encoded += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n            encoded[i]\
    \ = 'c';\n        } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n\
    \        } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n    \
    \    } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        }\
    \ else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n        } else\
    \ if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        } else if (encoded[i]\
    \ == 'E') {\n            encoded[i] = 'G';\n        } else if (encoded[i] == 'I')\
    \ {\n            encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n\
    \            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n    \
    \        encoded[i] = 'W';\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvz1iu57p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747128
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6r9czs8v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_hehtf.cpp: In function 'int main()':\n/tmp/tmpoc_hehtf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoc_hehtf.cpp:2:\n/tmp/tmpoc_hehtf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 32);\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += (char)(message[i]\
    \ + 32);\n        } else {\n            encoded_message += message[i];\n     \
    \   }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n     \
    \   if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;\n}\nint main() {\n   \
    \ auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4bq19wet.cpp: In function 'int main()':\n/tmp/tmp4bq19wet.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4bq19wet.cpp:2:\n/tmp/tmp4bq19wet.cpp:51:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'A') {\n            result\
    \ += 'c';\n        } else if (message[i] == 'e' || message[i] == 'E') {\n    \
    \        result += 'g';\n        } else if (message[i] == 'i' || message[i] ==\
    \ 'I') {\n            result += 'k';\n        } else if (message[i] == 'o' ||\
    \ message[i] == 'O') {\n            result += 'q';\n        } else if (message[i]\
    \ == 'u' || message[i] == 'U') {\n            result += 'y';\n        } else if\
    \ (message[i] == ' ') {\n            result += ' ';\n        } else {\n      \
    \      result += message[i] + 2;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp48wc5c6w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded += (char)(tolower(message[i]) +\
    \ 2);\n        } else {\n            encoded += (char)(tolower(message[i]));\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm2gx_bkz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded_message += (char)(message[i] +\
    \ 2);\n        } else {\n            encoded_message += (char)(message[i] - 32);\n\
    \        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgim_fqev.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpftwvvts6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7di2xskf.cpp: In function 'int main()':\n/tmp/tmp7di2xskf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7di2xskf.cpp:2:\n/tmp/tmp7di2xskf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i] ==\
    \ 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'C' || result[i] == 'D' || result[i] ==\
    \ 'F' || result[i] == 'G' ||\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1vthw9t9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encodedMessage = \"\";\n    std::string vowels =\
    \ \"aeiou\";\n    std::string newVowels = \"cgjkqsxz\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (isupper(message[i])) {\n           \
    \ encodedMessage += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encodedMessage += toupper(message[i]);\n        } else {\n  \
    \          encodedMessage += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encodedMessage.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encodedMessage[i] == vowels[j]) {\n                encodedMessage[i]\
    \ = newVowels[j];\n            }\n        }\n    }\n    return encodedMessage;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr7dmnvl1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            encoded_message += toupper(c);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            encoded_message += tolower(c);\n\
    \        } else {\n            encoded_message += c;\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.size(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjxn8rad1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc_hehtf.cpp: In function 'int main()':\n/tmp/tmpoc_hehtf.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoc_hehtf.cpp:2:\n/tmp/tmpoc_hehtf.cpp:33:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded_message = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_edl_oz.cpp: In function 'int main()':\n/tmp/tmpb_edl_oz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb_edl_oz.cpp:2:\n/tmp/tmpb_edl_oz.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (isupper(c)) {\n          \
    \  result += tolower(c);\n        } else if (islower(c)) {\n            result\
    \ += toupper(c);\n        } else {\n            result += c;\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        char c = result[i];\n\
    \        if (c == 'a') {\n            result[i] = 'c';\n        } else if (c ==\
    \ 'e') {\n            result[i] = 'g';\n        } else if (c == 'i') {\n     \
    \       result[i] = 'k';\n        } else if (c == 'o') {\n            result[i]\
    \ = 'q';\n        } else if (c == 'u') {\n            result[i] = 'y';\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaatl99w9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    result += message[i] + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] += 2;\n\t\t}\n\t\telse if (result[i] == 'Y') {\n\t\
    \t\tresult[i] = 'A';\n\t\t}\n\t\telse if (result[i] == 'Z') {\n\t\t\tresult[i]\
    \ = 'B';\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7496r1bz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        if (vowels.find(c) != std::string::npos) {\n            c = vowels[(vowels.find(c)\
    \ + 2) % vowels.length()];\n        }\n        encoded += c;\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7rwgcnoe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747129
