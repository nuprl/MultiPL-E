language: cpp
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(long i = 0; i < q.size()/2; i++) {\n  \
    \      if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptlimfe20.cpp: In function 'int main()':\n/tmp/tmptlimfe20.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptlimfe20.cpp:2:\n/tmp/tmptlimfe20.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmptlimfe20.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmptlimfe20.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmptlimfe20.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptlimfe20.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptlimfe20.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptlimfe20.cpp:2:\n/tmp/tmptlimfe20.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q)\n        sum += i;\n    if(sum > w)\n        return false;\n    for(int\
    \ i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-1-i])\n         \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0xzap9_.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpg0xzap9_.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q)\n              ^\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected\
    \ ';' before 'if'\n     if(sum > w)\n     ^\n/tmp/tmpg0xzap9_.cpp:22:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected ')' before 'if'\n/tmp/tmpg0xzap9_.cpp:\
    \ In function 'int main()':\n/tmp/tmpg0xzap9_.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg0xzap9_.cpp:2:\n/tmp/tmpg0xzap9_.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpg0xzap9_.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpg0xzap9_.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpg0xzap9_.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg0xzap9_.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg0xzap9_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  // your code here\n  long sum\
    \ = 0;\n  for(int i = 0; i < q.size(); i++){\n    sum += q[i];\n  }\n  if(sum\
    \ > w){\n    return false;\n  }\n  else{\n    for(int i = 0; i < q.size()/2; i++){\n\
    \      if(q[i] != q[q.size()-1-i]){\n        return false;\n      }\n    }\n \
    \   return true;\n  }\n}\nint main() {\n    auto candidate = will_it_fly;\n  \
    \  assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9atdb9f2.cpp: In function 'int main()':\n/tmp/tmp9atdb9f2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9atdb9f2.cpp:2:\n/tmp/tmp9atdb9f2.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp9atdb9f2.cpp:38:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp9atdb9f2.cpp:38:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9atdb9f2.cpp:38:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9atdb9f2.cpp:38:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9atdb9f2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9atdb9f2.cpp:2:\n/tmp/tmp9atdb9f2.cpp:38:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    int i = 0;\n    int j = q.size() - 1;\n   \
    \ while(i < j) {\n        if(q[i] != q[j]) {\n            return false;\n    \
    \    }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cpke_83.cpp: In function 'int main()':\n/tmp/tmp7cpke_83.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7cpke_83.cpp:2:\n/tmp/tmp7cpke_83.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp7cpke_83.cpp:39:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp7cpke_83.cpp:39:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp7cpke_83.cpp:39:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7cpke_83.cpp:39:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7cpke_83.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7cpke_83.cpp:2:\n/tmp/tmp7cpke_83.cpp:39:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q)\n        sum += i;\n    if(sum > w)\n        return false;\n    int i\
    \ = 0, j = q.size() - 1;\n    while(i < j) {\n        if(q[i] != q[j])\n     \
    \       return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputsymaom.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmputsymaom.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q)\n              ^\n/tmp/tmputsymaom.cpp:22:5: error: expected\
    \ ';' before 'if'\n     if(sum > w)\n     ^\n/tmp/tmputsymaom.cpp:22:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmputsymaom.cpp:22:5: error: expected\
    \ ';' before 'if'\n/tmp/tmputsymaom.cpp:22:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmputsymaom.cpp:22:5: error: expected ')' before 'if'\n/tmp/tmputsymaom.cpp:\
    \ In function 'int main()':\n/tmp/tmputsymaom.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmputsymaom.cpp:2:\n/tmp/tmputsymaom.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmputsymaom.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmputsymaom.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmputsymaom.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmputsymaom.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmputsymaom.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n    {\n        sum += q[i];\n    }\n    if(sum >\
    \ w)\n    {\n        return false;\n    }\n    else\n    {\n        for(int i\
    \ = 0; i < q.size()/2; i++)\n        {\n            if(q[i] != q[q.size()-1-i])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_roxctdi.cpp: In function 'int main()':\n/tmp/tmp_roxctdi.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_roxctdi.cpp:2:\n/tmp/tmp_roxctdi.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp_roxctdi.cpp:42:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp_roxctdi.cpp:42:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_roxctdi.cpp:42:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_roxctdi.cpp:42:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_roxctdi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_roxctdi.cpp:2:\n/tmp/tmp_roxctdi.cpp:42:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    else {\n        for(int i = 0; i < q.size()/2;\
    \ i++) {\n            if(q[i] != q[q.size()-1-i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplmylohos.cpp: In function 'int main()':\n/tmp/tmplmylohos.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplmylohos.cpp:2:\n/tmp/tmplmylohos.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmplmylohos.cpp:37:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmplmylohos.cpp:37:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmplmylohos.cpp:37:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplmylohos.cpp:37:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplmylohos.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplmylohos.cpp:2:\n/tmp/tmplmylohos.cpp:37:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q)\n        sum += i;\n    if(sum > w)\n        return false;\n    bool\
    \ flag = true;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-1-i])\n\
    \            flag = false;\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40ypn_td.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp40ypn_td.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q)\n              ^\n/tmp/tmp40ypn_td.cpp:22:5: error: expected\
    \ ';' before 'if'\n     if(sum > w)\n     ^\n/tmp/tmp40ypn_td.cpp:22:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmp40ypn_td.cpp:22:5: error: expected\
    \ ';' before 'if'\n/tmp/tmp40ypn_td.cpp:22:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmp40ypn_td.cpp:22:5: error: expected ')' before 'if'\n/tmp/tmp40ypn_td.cpp:\
    \ In function 'int main()':\n/tmp/tmp40ypn_td.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp40ypn_td.cpp:2:\n/tmp/tmp40ypn_td.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp40ypn_td.cpp:32:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp40ypn_td.cpp:32:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp40ypn_td.cpp:32:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp40ypn_td.cpp:32:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp40ypn_td.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // your code here\n    long\
    \ sum = 0;\n    for(auto i : q)\n    {\n        sum += i;\n    }\n    if(sum >\
    \ w)\n    {\n        return false;\n    }\n    else\n    {\n        int i = 0;\n\
    \        int j = q.size() - 1;\n        while(i < j)\n        {\n            if(q[i]\
    \ != q[j])\n            {\n                return false;\n            }\n    \
    \        i++;\n            j--;\n        }\n        return true;\n    }\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5s97v5j.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpy5s97v5j.cpp:21:14: error: 'i' does not name a type\n \
    \    for(auto i : q)\n              ^\n/tmp/tmpy5s97v5j.cpp:25:5: error: expected\
    \ ';' before 'if'\n     if(sum > w)\n     ^\n/tmp/tmpy5s97v5j.cpp:25:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpy5s97v5j.cpp:25:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpy5s97v5j.cpp:25:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpy5s97v5j.cpp:25:5: error: expected ')' before 'if'\n/tmp/tmpy5s97v5j.cpp:\
    \ In function 'int main()':\n/tmp/tmpy5s97v5j.cpp:46:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy5s97v5j.cpp:2:\n/tmp/tmpy5s97v5j.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpy5s97v5j.cpp:47:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpy5s97v5j.cpp:47:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpy5s97v5j.cpp:47:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy5s97v5j.cpp:47:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy5s97v5j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum > w) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < q.size() / 2; i++) {\n\t\tif (q[i] != q[q.size()\
    \ - 1 - i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph12ir95k.cpp: In function 'int main()':\n/tmp/tmph12ir95k.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph12ir95k.cpp:2:\n/tmp/tmph12ir95k.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmph12ir95k.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmph12ir95k.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmph12ir95k.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmph12ir95k.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmph12ir95k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph12ir95k.cpp:2:\n/tmp/tmph12ir95k.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q) {\n        sum += i;\n    }\n    if(sum > w) {\n        return false;\n\
    \    }\n    int i = 0;\n    int j = q.size() - 1;\n    while(i < j) {\n      \
    \  if(q[i] != q[j]) {\n            return false;\n        }\n        i++;\n  \
    \      j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_any3mt0.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp_any3mt0.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q) {\n              ^\n/tmp/tmp_any3mt0.cpp:23:5: error: expected\
    \ ';' before 'if'\n     if(sum > w) {\n     ^\n/tmp/tmp_any3mt0.cpp:23:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmp_any3mt0.cpp:23:5: error: expected\
    \ ';' before 'if'\n/tmp/tmp_any3mt0.cpp:23:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmp_any3mt0.cpp:23:5: error: expected ')' before 'if'\n/tmp/tmp_any3mt0.cpp:\
    \ In function 'int main()':\n/tmp/tmp_any3mt0.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_any3mt0.cpp:2:\n/tmp/tmp_any3mt0.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp_any3mt0.cpp:39:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp_any3mt0.cpp:39:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_any3mt0.cpp:39:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_any3mt0.cpp:39:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_any3mt0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    std::vector<long> q_copy = q;\n    std::reverse(q_copy.begin(),\
    \ q_copy.end());\n    if(q_copy == q) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbxo5qv8o.cpp: In function 'int main()':\n/tmp/tmpbxo5qv8o.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbxo5qv8o.cpp:2:\n/tmp/tmpbxo5qv8o.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpbxo5qv8o.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpbxo5qv8o.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbxo5qv8o.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbxo5qv8o.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbxo5qv8o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbxo5qv8o.cpp:2:\n/tmp/tmpbxo5qv8o.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    int i = 0;\n    int j = q.size() - 1;\n   \
    \ while(i < j) {\n        if(q[i] != q[j]) {\n            return false;\n    \
    \    }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cpke_83.cpp: In function 'int main()':\n/tmp/tmp7cpke_83.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7cpke_83.cpp:2:\n/tmp/tmp7cpke_83.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp7cpke_83.cpp:39:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp7cpke_83.cpp:39:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp7cpke_83.cpp:39:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7cpke_83.cpp:39:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7cpke_83.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7cpke_83.cpp:2:\n/tmp/tmp7cpke_83.cpp:39:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n    {\n        sum += q[i];\n    }\n    if(sum >\
    \ w)\n    {\n        return false;\n    }\n    else\n    {\n        for(int i\
    \ = 0; i < q.size()/2; i++)\n        {\n            if(q[i] != q[q.size()-1-i])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_roxctdi.cpp: In function 'int main()':\n/tmp/tmp_roxctdi.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_roxctdi.cpp:2:\n/tmp/tmp_roxctdi.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp_roxctdi.cpp:42:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp_roxctdi.cpp:42:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_roxctdi.cpp:42:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_roxctdi.cpp:42:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_roxctdi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_roxctdi.cpp:2:\n/tmp/tmp_roxctdi.cpp:42:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    int i = 0, j = q.size() - 1;\n    while(i < j) {\n        if(q[i]\
    \ != q[j])\n            return false;\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nuw37jk.cpp: In function 'int main()':\n/tmp/tmp4nuw37jk.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nuw37jk.cpp:2:\n/tmp/tmp4nuw37jk.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp4nuw37jk.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp4nuw37jk.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4nuw37jk.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4nuw37jk.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4nuw37jk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nuw37jk.cpp:2:\n/tmp/tmp4nuw37jk.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    int i\
    \ = 0;\n    int j = q.size() - 1;\n    while (i < j) {\n        if (q[i] != q[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if\
    \ (sum <= w) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvkfo4i6.cpp: In function 'int main()':\n/tmp/tmprvkfo4i6.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprvkfo4i6.cpp:2:\n/tmp/tmprvkfo4i6.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprvkfo4i6.cpp:39:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprvkfo4i6.cpp:39:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprvkfo4i6.cpp:39:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprvkfo4i6.cpp:39:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprvkfo4i6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprvkfo4i6.cpp:2:\n/tmp/tmprvkfo4i6.cpp:39:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n    {\n        sum += q[i];\n    }\n    if(sum >\
    \ w)\n    {\n        return false;\n    }\n    else\n    {\n        for(int i\
    \ = 0; i < q.size()/2; i++)\n        {\n            if(q[i] != q[q.size()-1-i])\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_roxctdi.cpp: In function 'int main()':\n/tmp/tmp_roxctdi.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_roxctdi.cpp:2:\n/tmp/tmp_roxctdi.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp_roxctdi.cpp:42:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp_roxctdi.cpp:42:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_roxctdi.cpp:42:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_roxctdi.cpp:42:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_roxctdi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_roxctdi.cpp:2:\n/tmp/tmp_roxctdi.cpp:42:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n    {\n        sum += q[i];\n    }\n    if(sum <=\
    \ w)\n    {\n        for(int i = 0; i < q.size()/2; i++)\n        {\n        \
    \    if(q[i] != q[q.size()-1-i])\n            {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_lynd7u5.cpp: In function 'int main()':\n/tmp/tmp_lynd7u5.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_lynd7u5.cpp:2:\n/tmp/tmp_lynd7u5.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp_lynd7u5.cpp:39:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp_lynd7u5.cpp:39:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_lynd7u5.cpp:39:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_lynd7u5.cpp:39:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_lynd7u5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_lynd7u5.cpp:2:\n/tmp/tmp_lynd7u5.cpp:39:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    int n = q.size();\n    long\
    \ sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += q[i];\n    }\n  \
    \  if(sum > w) {\n        return false;\n    }\n    for(int i = 0; i < n/2; i++)\
    \ {\n        if(q[i] != q[n-i-1]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqlzou6d.cpp: In function 'int main()':\n/tmp/tmpeqlzou6d.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeqlzou6d.cpp:2:\n/tmp/tmpeqlzou6d.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpeqlzou6d.cpp:36:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpeqlzou6d.cpp:36:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpeqlzou6d.cpp:36:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpeqlzou6d.cpp:36:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeqlzou6d.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeqlzou6d.cpp:2:\n/tmp/tmpeqlzou6d.cpp:36:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i: q) sum += i;\n    if(sum > w) return false;\n    int i = 0, j = q.size()\
    \ - 1;\n    while(i < j) {\n        if(q[i] != q[j]) return false;\n        i++;\n\
    \        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjy9ldvk.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmppjy9ldvk.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i: q) sum += i;\n              ^\n/tmp/tmppjy9ldvk.cpp:21:5: error:\
    \ expected ';' before 'if'\n     if(sum > w) return false;\n     ^\n/tmp/tmppjy9ldvk.cpp:21:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error:\
    \ expected ';' before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error: expected ')' before 'if'\n/tmp/tmppjy9ldvk.cpp:\
    \ In function 'int main()':\n/tmp/tmppjy9ldvk.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppjy9ldvk.cpp:2:\n/tmp/tmppjy9ldvk.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmppjy9ldvk.cpp:32:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmppjy9ldvk.cpp:32:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmppjy9ldvk.cpp:32:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppjy9ldvk.cpp:32:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppjy9ldvk.cpp:2:\n/usr/include/c++/4.8.2/bits/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i: q) sum += i;\n    if(sum > w) return false;\n    int i = 0, j = q.size()\
    \ - 1;\n    while(i < j) {\n        if(q[i] != q[j]) return false;\n        i++;\n\
    \        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjy9ldvk.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmppjy9ldvk.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i: q) sum += i;\n              ^\n/tmp/tmppjy9ldvk.cpp:21:5: error:\
    \ expected ';' before 'if'\n     if(sum > w) return false;\n     ^\n/tmp/tmppjy9ldvk.cpp:21:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error:\
    \ expected ';' before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error: expected ')' before 'if'\n/tmp/tmppjy9ldvk.cpp:\
    \ In function 'int main()':\n/tmp/tmppjy9ldvk.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppjy9ldvk.cpp:2:\n/tmp/tmppjy9ldvk.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmppjy9ldvk.cpp:32:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmppjy9ldvk.cpp:32:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmppjy9ldvk.cpp:32:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppjy9ldvk.cpp:32:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppjy9ldvk.cpp:2:\n/usr/include/c++/4.8.2/bits/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q) {\n        sum += i;\n    }\n    if(sum > w) {\n        return false;\n\
    \    }\n    std::vector<long> q_copy = q;\n    std::reverse(q_copy.begin(), q_copy.end());\n\
    \    if(q_copy == q) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb99be4lg.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpb99be4lg.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q) {\n              ^\n/tmp/tmpb99be4lg.cpp:23:5: error: expected\
    \ ';' before 'if'\n     if(sum > w) {\n     ^\n/tmp/tmpb99be4lg.cpp:23:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpb99be4lg.cpp:23:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpb99be4lg.cpp:23:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpb99be4lg.cpp:23:5: error: expected ')' before 'if'\n/tmp/tmpb99be4lg.cpp:\
    \ In function 'int main()':\n/tmp/tmpb99be4lg.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb99be4lg.cpp:2:\n/tmp/tmpb99be4lg.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpb99be4lg.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpb99be4lg.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb99be4lg.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb99be4lg.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb99be4lg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (long\
    \ i = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (long i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph3cwzntn.cpp: In function 'int main()':\n/tmp/tmph3cwzntn.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph3cwzntn.cpp:2:\n/tmp/tmph3cwzntn.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmph3cwzntn.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmph3cwzntn.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmph3cwzntn.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmph3cwzntn.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmph3cwzntn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph3cwzntn.cpp:2:\n/tmp/tmph3cwzntn.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q)\n        sum += i;\n    if(sum > w)\n        return false;\n    for(int\
    \ i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-1-i])\n         \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0xzap9_.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpg0xzap9_.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q)\n              ^\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected\
    \ ';' before 'if'\n     if(sum > w)\n     ^\n/tmp/tmpg0xzap9_.cpp:22:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected ')' before 'if'\n/tmp/tmpg0xzap9_.cpp:\
    \ In function 'int main()':\n/tmp/tmpg0xzap9_.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg0xzap9_.cpp:2:\n/tmp/tmpg0xzap9_.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpg0xzap9_.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpg0xzap9_.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpg0xzap9_.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg0xzap9_.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg0xzap9_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // your code here\n    long\
    \ sum = 0;\n    for(int i = 0; i < q.size(); i++){\n        sum += q[i];\n   \
    \ }\n    if(sum > w){\n        return false;\n    }\n    for(int i = 0; i < q.size()/2;\
    \ i++){\n        if(q[i] != q[q.size()-1-i]){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4z95wjkg.cpp: In function 'int main()':\n/tmp/tmp4z95wjkg.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4z95wjkg.cpp:2:\n/tmp/tmp4z95wjkg.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp4z95wjkg.cpp:36:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp4z95wjkg.cpp:36:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4z95wjkg.cpp:36:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4z95wjkg.cpp:36:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4z95wjkg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4z95wjkg.cpp:2:\n/tmp/tmp4z95wjkg.cpp:36:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(long i = 0; i < q.size()/2; i++) {\n  \
    \      if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptlimfe20.cpp: In function 'int main()':\n/tmp/tmptlimfe20.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptlimfe20.cpp:2:\n/tmp/tmptlimfe20.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmptlimfe20.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmptlimfe20.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmptlimfe20.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptlimfe20.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptlimfe20.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptlimfe20.cpp:2:\n/tmp/tmptlimfe20.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i : q)\n        sum += i;\n    if(sum > w)\n        return false;\n    for(int\
    \ i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-1-i])\n         \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0xzap9_.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpg0xzap9_.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i : q)\n              ^\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected\
    \ ';' before 'if'\n     if(sum > w)\n     ^\n/tmp/tmpg0xzap9_.cpp:22:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpg0xzap9_.cpp:22:5: error: expected ')' before 'if'\n/tmp/tmpg0xzap9_.cpp:\
    \ In function 'int main()':\n/tmp/tmpg0xzap9_.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg0xzap9_.cpp:2:\n/tmp/tmpg0xzap9_.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpg0xzap9_.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpg0xzap9_.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpg0xzap9_.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg0xzap9_.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg0xzap9_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i: q) sum += i;\n    if(sum > w) return false;\n    for(int i = 0; i < q.size()/2;\
    \ i++) {\n        if(q[i] != q[q.size()-1-i]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsgupex5z.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpsgupex5z.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i: q) sum += i;\n              ^\n/tmp/tmpsgupex5z.cpp:21:5: error:\
    \ expected ';' before 'if'\n     if(sum > w) return false;\n     ^\n/tmp/tmpsgupex5z.cpp:21:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpsgupex5z.cpp:21:5: error:\
    \ expected ';' before 'if'\n/tmp/tmpsgupex5z.cpp:21:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpsgupex5z.cpp:21:5: error: expected ')' before 'if'\n/tmp/tmpsgupex5z.cpp:\
    \ In function 'int main()':\n/tmp/tmpsgupex5z.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsgupex5z.cpp:2:\n/tmp/tmpsgupex5z.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpsgupex5z.cpp:29:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpsgupex5z.cpp:29:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsgupex5z.cpp:29:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsgupex5z.cpp:29:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsgupex5z.cpp:2:\n/usr/include/c++/4.8.2/bits/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(auto\
    \ i: q) sum += i;\n    if(sum > w) return false;\n    int i = 0, j = q.size()\
    \ - 1;\n    while(i < j) {\n        if(q[i] != q[j]) return false;\n        i++;\n\
    \        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjy9ldvk.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmppjy9ldvk.cpp:20:14: error: 'i' does not name a type\n \
    \    for(auto i: q) sum += i;\n              ^\n/tmp/tmppjy9ldvk.cpp:21:5: error:\
    \ expected ';' before 'if'\n     if(sum > w) return false;\n     ^\n/tmp/tmppjy9ldvk.cpp:21:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error:\
    \ expected ';' before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmppjy9ldvk.cpp:21:5: error: expected ')' before 'if'\n/tmp/tmppjy9ldvk.cpp:\
    \ In function 'int main()':\n/tmp/tmppjy9ldvk.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppjy9ldvk.cpp:2:\n/tmp/tmppjy9ldvk.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmppjy9ldvk.cpp:32:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmppjy9ldvk.cpp:32:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmppjy9ldvk.cpp:32:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppjy9ldvk.cpp:32:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppjy9ldvk.cpp:2:\n/usr/include/c++/4.8.2/bits/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  // your code here\n  long sum\
    \ = 0;\n  for(int i = 0; i < q.size(); i++){\n    sum += q[i];\n  }\n  if(sum\
    \ > w){\n    return false;\n  }\n  for(int i = 0; i < q.size()/2; i++){\n    if(q[i]\
    \ != q[q.size()-1-i]){\n      return false;\n    }\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvw13m7xt.cpp: In function 'int main()':\n/tmp/tmpvw13m7xt.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvw13m7xt.cpp:2:\n/tmp/tmpvw13m7xt.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpvw13m7xt.cpp:36:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpvw13m7xt.cpp:36:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpvw13m7xt.cpp:36:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvw13m7xt.cpp:36:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvw13m7xt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvw13m7xt.cpp:2:\n/tmp/tmpvw13m7xt.cpp:36:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  int i = 0;\n  int j = q.size() - 1;\n  while (i < j) {\n    if\
    \ (q[i] != q[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsvdnkm8.cpp: In function 'int main()':\n/tmp/tmpqsvdnkm8.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsvdnkm8.cpp:2:\n/tmp/tmpqsvdnkm8.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpqsvdnkm8.cpp:39:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpqsvdnkm8.cpp:39:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpqsvdnkm8.cpp:39:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqsvdnkm8.cpp:39:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqsvdnkm8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsvdnkm8.cpp:2:\n/tmp/tmpqsvdnkm8.cpp:39:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyqhsf_m.cpp: In function 'int main()':\n/tmp/tmpuyqhsf_m.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuyqhsf_m.cpp:2:\n/tmp/tmpuyqhsf_m.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpuyqhsf_m.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpuyqhsf_m.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpuyqhsf_m.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpuyqhsf_m.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuyqhsf_m.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuyqhsf_m.cpp:2:\n/tmp/tmpuyqhsf_m.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    int i = 0, j = q.size() - 1;\n    while(i < j) {\n        if(q[i]\
    \ != q[j])\n            return false;\n        i++;\n        j--;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nuw37jk.cpp: In function 'int main()':\n/tmp/tmp4nuw37jk.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nuw37jk.cpp:2:\n/tmp/tmp4nuw37jk.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp4nuw37jk.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp4nuw37jk.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4nuw37jk.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4nuw37jk.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4nuw37jk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4nuw37jk.cpp:2:\n/tmp/tmp4nuw37jk.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n  long sum = 0;\n  for (int i\
    \ = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return\
    \ false;\n  }\n  for (int i = 0; i < q.size() / 2; i++) {\n    if (q[i] != q[q.size()\
    \ - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgz_e0ah.cpp: In function 'int main()':\n/tmp/tmpfgz_e0ah.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfgz_e0ah.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfgz_e0ah.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfgz_e0ah.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfgz_e0ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfgz_e0ah.cpp:2:\n/tmp/tmpfgz_e0ah.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // Write your code here\n\
    \    long sum = 0;\n    for(int i = 0; i < q.size(); i++)\n    {\n        sum\
    \ += q[i];\n    }\n    if(sum > w)\n    {\n        return false;\n    }\n    for(int\
    \ i = 0; i < q.size()/2; i++)\n    {\n        if(q[i] != q[q.size()-1-i])\n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05s_5ytl.cpp: In function 'int main()':\n/tmp/tmp05s_5ytl.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp05s_5ytl.cpp:2:\n/tmp/tmp05s_5ytl.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp05s_5ytl.cpp:40:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp05s_5ytl.cpp:40:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp05s_5ytl.cpp:40:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp05s_5ytl.cpp:40:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp05s_5ytl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp05s_5ytl.cpp:2:\n/tmp/tmp05s_5ytl.cpp:40:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++)\n        sum += q[i];\n    if(sum > w)\n        return\
    \ false;\n    for(int i = 0; i < q.size()/2; i++)\n        if(q[i] != q[q.size()-i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq3j_aiv.cpp: In function 'int main()':\n/tmp/tmprq3j_aiv.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmprq3j_aiv.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprq3j_aiv.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprq3j_aiv.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq3j_aiv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq3j_aiv.cpp:2:\n/tmp/tmprq3j_aiv.cpp:31:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the object q will fly, and false otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic vector) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if(sum > w) {\n\
    \        return false;\n    }\n    for(int i = 0; i < q.size()/2; i++) {\n   \
    \     if(q[i] != q[q.size()-1-i]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n \
    \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ahyife1.cpp: In function 'int main()':\n/tmp/tmp6ahyife1.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp6ahyife1.cpp:35:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6ahyife1.cpp:35:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ahyife1.cpp:35:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ahyife1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ahyife1.cpp:2:\n/tmp/tmp6ahyife1.cpp:35:68: note:\
    \   candidat"
  stdout: ''
