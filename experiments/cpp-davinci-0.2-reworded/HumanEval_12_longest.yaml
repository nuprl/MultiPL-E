name: HumanEval_12_longest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
  \ return the longest one. Return the first one in case of multiple\n// strings of\
  \ the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
  // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
  b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
  \ longest(std::vector<std::string> strings) {\n"
tests: "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
  kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
completions: ["    if (strings.empty()) {\n        return std::nullopt;\n    }\n \
    \   std::string longest = strings[0];\n    for (auto s : strings) {\n        if\
    \ (s.size() > longest.size()) {\n            longest = s;\n        }\n    }\n\
    \    return longest;", "    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    std::string longest = strings[0];\n    for (auto& s : strings) {\n\
    \        if (s.size() > longest.size()) {\n            longest = s;\n        }\n\
    \    }\n    return longest;", "    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    std::sort(strings.begin(), strings.end(), [](std::string a, std::string\
    \ b) {\n        return a.size() > b.size();\n    });\n    return strings[0];",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto string : strings) {\n        if\
    \ (string.length() > longest_string.length()) {\n            longest_string =\
    \ string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto &string : strings) {\n        if (string.length() > longest_string.length())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest = strings[0];\n    for (auto str : strings) {\n        if (str.length()\
    \ > longest.length()) {\n            longest = str;\n        }\n    }\n    return\
    \ longest;", "    if (strings.empty()) {\n        return std::nullopt;\n    }\n\
    \    std::string longest_string = strings[0];\n    for (int i = 1; i < strings.size();\
    \ i++) {\n        if (strings[i].size() > longest_string.size()) {\n         \
    \   longest_string = strings[i];\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (std::string s : strings) {\n        if\
    \ (s.length() > longest_string.length()) {\n            longest_string = s;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) {\n\
    \        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (std::string s : strings) {\n        if (s.length() > longest_string.length())\
    \ {\n            longest_string = s;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (std::string string : strings) {\n   \
    \     if (string.length() > longest_string.length()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest = strings[0];\n    for (const auto& s : strings) {\n        if (s.size()\
    \ > longest.size()) {\n            longest = s;\n        }\n    }\n    return\
    \ longest;", "  if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string\
    \ longest_string = strings[0];\n  for (auto string : strings) {\n    if (string.length()\
    \ > longest_string.length()) {\n      longest_string = string;\n    }\n  }\n \
    \ return longest_string;", "    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    std::string longest_string = strings[0];\n    for (std::string string\
    \ : strings) {\n        if (string.length() > longest_string.length()) {\n   \
    \         longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (std::string string : strings) {\n   \
    \     if (string.length() > longest_string.length()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest = strings[0];\n\
    \    for (std::string s : strings) {\n        if (s.length() > longest.length())\
    \ {\n            longest = s;\n        }\n    }\n    return longest;", "    if\
    \ (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string longest_string\
    \ = strings[0];\n    for (std::string string : strings) {\n        if (string.length()\
    \ > longest_string.length()) {\n            longest_string = string;\n       \
    \ }\n    }\n    return longest_string;", "    if (strings.empty()) {\n       \
    \ return std::nullopt;\n    }\n    std::string longest = strings[0];\n    for\
    \ (auto& s : strings) {\n        if (s.size() > longest.size()) {\n          \
    \  longest = s;\n        }\n    }\n    return longest;"]
stop_tokens:
- "\n}"
