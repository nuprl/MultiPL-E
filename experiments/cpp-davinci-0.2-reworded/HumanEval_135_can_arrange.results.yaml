language: cpp
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppktahxym.cpp: In function 'int main()':\n/tmp/tmppktahxym.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/tmppktahxym.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppktahxym.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmppktahxym.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppktahxym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(long\
    \ i = 0; i < arr.size() - 1; i++){\n        if(arr[i] >= arr[i+1]){\n        \
    \    if(i > max){\n                max = i;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28q4061i.cpp: In function 'int main()':\n/tmp/tmp28q4061i.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28q4061i.cpp:2:\n/tmp/tmp28q4061i.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp28q4061i.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp28q4061i.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp28q4061i.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp28q4061i.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp28q4061i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28q4061i.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = arr[0];\n  long\
    \ max_index = 0;\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] <\
    \ max) {\n      return max_index;\n    }\n    if (arr[i] > max) {\n      max =\
    \ arr[i];\n      max_index = i;\n    }\n  }\n  return -1;\n}\nint main() {\n \
    \   auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi282ywc7.cpp: In function 'int main()':\n/tmp/tmpi282ywc7.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi282ywc7.cpp:2:\n/tmp/tmpi282ywc7.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpi282ywc7.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpi282ywc7.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpi282ywc7.cpp:28:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpi282ywc7.cpp:28:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi282ywc7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi282ywc7.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i]\
    \ >= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp102hl_04.cpp: In function 'int main()':\n/tmp/tmp102hl_04.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/tmp102hl_04.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp102hl_04.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp102hl_04.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp102hl_04.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long max_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] <= max) {\n            return max_index;\n        }\n        max\
    \ = arr[i];\n        max_index = i;\n    }\n    return -1;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0__2btr4.cpp: In function 'int main()':\n/tmp/tmp0__2btr4.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0__2btr4.cpp:2:\n/tmp/tmp0__2btr4.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp0__2btr4.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp0__2btr4.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0__2btr4.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0__2btr4.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0__2btr4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0__2btr4.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = -1;\n  for(int i = 0; i < arr.size()-1; i++){\n    if(arr[i] >= arr[i+1]){\n\
    \      if(i > max){\n        max = i;\n      }\n    }\n  }\n  return max;\n}\n\
    int main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk35dt4cv.cpp: In function 'int main()':\n/tmp/tmpk35dt4cv.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk35dt4cv.cpp:2:\n/tmp/tmpk35dt4cv.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpk35dt4cv.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpk35dt4cv.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk35dt4cv.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk35dt4cv.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk35dt4cv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk35dt4cv.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long max_index = n-1;\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] > max){\n            max = arr[i];\n        \
    \    max_index = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp31awzg9y.cpp: In function 'int main()':\n/tmp/tmp31awzg9y.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp31awzg9y.cpp:2:\n/tmp/tmp31awzg9y.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp31awzg9y.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp31awzg9y.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp31awzg9y.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp31awzg9y.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp31awzg9y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp31awzg9y.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    long\
    \ max_index = -1;\n    for (long i = arr.size() - 1; i >= 0; i--) {\n        if\
    \ (arr[i] >= max) {\n            max = arr[i];\n            max_index = i;\n \
    \       }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp62257kgu.cpp: In function 'int main()':\n/tmp/tmp62257kgu.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp62257kgu.cpp:2:\n/tmp/tmp62257kgu.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp62257kgu.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp62257kgu.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp62257kgu.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp62257kgu.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp62257kgu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp62257kgu.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    for(long i = n-2; i >= 0; i--){\n        if(arr[i]\
    \ <= max){\n            max = arr[i];\n        }\n        else{\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vhqyvt5.cpp: In function 'int main()':\n/tmp/tmp3vhqyvt5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/tmp3vhqyvt5.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vhqyvt5.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vhqyvt5.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3vhqyvt5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long max_index = n-1;\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] <= max){\n            max = arr[i];\n       \
    \     max_index = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr7hzd57.cpp: In function 'int main()':\n/tmp/tmpkr7hzd57.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr7hzd57.cpp:2:\n/tmp/tmpkr7hzd57.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpkr7hzd57.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpkr7hzd57.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkr7hzd57.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkr7hzd57.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkr7hzd57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr7hzd57.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long max_index = n-1;\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] <= max){\n            max = arr[i];\n       \
    \     max_index = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr7hzd57.cpp: In function 'int main()':\n/tmp/tmpkr7hzd57.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr7hzd57.cpp:2:\n/tmp/tmpkr7hzd57.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpkr7hzd57.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpkr7hzd57.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkr7hzd57.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkr7hzd57.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkr7hzd57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr7hzd57.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = arr.size()-1; i > 0; i--){\n        if(arr[i] <= arr[i-1]){\n          \
    \  max = i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiflhoh2_.cpp: In function 'int main()':\n/tmp/tmpiflhoh2_.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiflhoh2_.cpp:2:\n/tmp/tmpiflhoh2_.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpiflhoh2_.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpiflhoh2_.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiflhoh2_.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiflhoh2_.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpiflhoh2_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiflhoh2_.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long n = arr.size();\n    long max_index = -1;\n    for(long i = 0; i < n-1;\
    \ i++){\n        if(arr[i] >= arr[i+1]){\n            max_index = i;\n       \
    \ }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqsf8hgk.cpp: In function 'int main()':\n/tmp/tmpfqsf8hgk.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfqsf8hgk.cpp:2:\n/tmp/tmpfqsf8hgk.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpfqsf8hgk.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpfqsf8hgk.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfqsf8hgk.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpfqsf8hgk.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfqsf8hgk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfqsf8hgk.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = -1;\n    for(long i = 0; i < n-1; i++){\n        if(arr[i] >=\
    \ arr[i+1]){\n            if(i > max){\n                max = i;\n           \
    \ }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wvcc49z.cpp: In function 'int main()':\n/tmp/tmp7wvcc49z.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7wvcc49z.cpp:2:\n/tmp/tmp7wvcc49z.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp7wvcc49z.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp7wvcc49z.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7wvcc49z.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7wvcc49z.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7wvcc49z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7wvcc49z.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max_index = -1;\n\
    \    long max_value = -1;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] <= max_value) {\n            max_index = i;\n        }\n      \
    \  max_value = std::max(max_value, arr[i]);\n    }\n    return max_index;\n}\n\
    int main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr5j2v9l.cpp: In function 'int main()':\n/tmp/tmpkr5j2v9l.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr5j2v9l.cpp:2:\n/tmp/tmpkr5j2v9l.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpkr5j2v9l.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpkr5j2v9l.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkr5j2v9l.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkr5j2v9l.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkr5j2v9l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr5j2v9l.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long res = -1;\n  for (int\
    \ i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] <= arr[i - 1]) {\n      res\
    \ = i;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwazgxkm4.cpp: In function 'int main()':\n/tmp/tmpwazgxkm4.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwazgxkm4.cpp:2:\n/tmp/tmpwazgxkm4.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpwazgxkm4.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpwazgxkm4.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwazgxkm4.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwazgxkm4.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwazgxkm4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwazgxkm4.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = arr[0];\n  long\
    \ index = -1;\n  for (int i = 1; i < arr.size(); i++) {\n    if (arr[i] <= max)\
    \ {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9vejl0j2.cpp: In function 'int main()':\n/tmp/tmp9vejl0j2.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9vejl0j2.cpp:2:\n/tmp/tmp9vejl0j2.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp9vejl0j2.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp9vejl0j2.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9vejl0j2.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9vejl0j2.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9vejl0j2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9vejl0j2.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    if(n == 1) return -1;\n    long max_index = -1;\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] >= arr[i+1]){\n            max_index = i;\n \
    \       }\n        else{\n            break;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hcghxrt.cpp: In function 'int main()':\n/tmp/tmp6hcghxrt.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hcghxrt.cpp:2:\n/tmp/tmp6hcghxrt.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp6hcghxrt.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp6hcghxrt.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6hcghxrt.cpp:28:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6hcghxrt.cpp:28:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6hcghxrt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6hcghxrt.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppktahxym.cpp: In function 'int main()':\n/tmp/tmppktahxym.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/tmppktahxym.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppktahxym.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmppktahxym.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppktahxym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = -1;\n  long index\
    \ = -1;\n  for (long i = arr.size() - 1; i >= 0; i--) {\n    if (arr[i] >= max)\
    \ {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu14sg50.cpp: In function 'int main()':\n/tmp/tmpqu14sg50.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqu14sg50.cpp:2:\n/tmp/tmpqu14sg50.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpqu14sg50.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpqu14sg50.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqu14sg50.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqu14sg50.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqu14sg50.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqu14sg50.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max_index = -1;\n\
    \    long max_value = -1;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n \
    \       if (arr[i] >= max_value) {\n            max_value = arr[i];\n        \
    \    max_index = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo07j2_nt.cpp: In function 'int main()':\n/tmp/tmpo07j2_nt.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo07j2_nt.cpp:2:\n/tmp/tmpo07j2_nt.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpo07j2_nt.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpo07j2_nt.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpo07j2_nt.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpo07j2_nt.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpo07j2_nt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo07j2_nt.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = 0;\n  long index\
    \ = -1;\n  for (int i = 0; i < arr.size() - 1; i++) {\n    if (arr[i] <= arr[i\
    \ + 1]) {\n      if (arr[i + 1] > max) {\n        max = arr[i + 1];\n        index\
    \ = i + 1;\n      }\n    }\n  }\n  return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpua6kzike.cpp: In function 'int main()':\n/tmp/tmpua6kzike.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpua6kzike.cpp:2:\n/tmp/tmpua6kzike.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpua6kzike.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpua6kzike.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpua6kzike.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpua6kzike.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpua6kzike.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpua6kzike.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long index = -1;\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ <= max) {\n            max = arr[i];\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp602im_q3.cpp: In function 'int main()':\n/tmp/tmp602im_q3.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp602im_q3.cpp:2:\n/tmp/tmp602im_q3.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp602im_q3.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp602im_q3.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp602im_q3.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp602im_q3.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp602im_q3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp602im_q3.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max_index = -1;\n \
    \ for (long i = 0; i < arr.size() - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n\
    \      max_index = i;\n    }\n  }\n  return max_index;\n}\nint main() {\n    auto\
    \ candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65mfpq38.cpp: In function 'int main()':\n/tmp/tmp65mfpq38.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65mfpq38.cpp:2:\n/tmp/tmp65mfpq38.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp65mfpq38.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp65mfpq38.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp65mfpq38.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp65mfpq38.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp65mfpq38.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65mfpq38.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = arr[0];\n  long index = -1;\n  for(long i = 1; i < arr.size(); i++){\n\
    \    if(arr[i] <= max){\n      index = i;\n    }\n    else{\n      max = arr[i];\n\
    \    }\n  }\n  return index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp896_wbxb.cpp: In function 'int main()':\n/tmp/tmp896_wbxb.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp896_wbxb.cpp:2:\n/tmp/tmp896_wbxb.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp896_wbxb.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp896_wbxb.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp896_wbxb.cpp:28:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp896_wbxb.cpp:28:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp896_wbxb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp896_wbxb.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = arr[0];\n  long\
    \ index = -1;\n  for (int i = 1; i < arr.size(); i++) {\n    if (arr[i] <= max)\
    \ {\n      index = i;\n    } else {\n      max = arr[i];\n    }\n  }\n  return\
    \ index;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpok9ivs_x.cpp: In function 'int main()':\n/tmp/tmpok9ivs_x.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpok9ivs_x.cpp:2:\n/tmp/tmpok9ivs_x.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpok9ivs_x.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpok9ivs_x.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpok9ivs_x.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpok9ivs_x.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpok9ivs_x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpok9ivs_x.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = 0; i < arr.size() - 1; i++){\n        if(arr[i] >= arr[i+1]){\n        \
    \    if(i > max){\n                max = i;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1c61epxo.cpp: In function 'int main()':\n/tmp/tmp1c61epxo.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/tmp1c61epxo.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1c61epxo.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1c61epxo.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1c61epxo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max_index = -1;\n \
    \ for (long i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] <= arr[i - 1]) {\n\
    \      max_index = i;\n    }\n  }\n  return max_index;\n}\nint main() {\n    auto\
    \ candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x3slxdc.cpp: In function 'int main()':\n/tmp/tmp0x3slxdc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/tmp0x3slxdc.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0x3slxdc.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0x3slxdc.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0x3slxdc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppktahxym.cpp: In function 'int main()':\n/tmp/tmppktahxym.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/tmppktahxym.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppktahxym.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmppktahxym.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppktahxym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max_index = -1;\n  for(long i = 0; i < arr.size()-1; i++){\n    if(arr[i] >=\
    \ arr[i+1]){\n      max_index = i;\n    }\n  }\n  return max_index;\n}\nint main()\
    \ {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq7b19_a.cpp: In function 'int main()':\n/tmp/tmprq7b19_a.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq7b19_a.cpp:2:\n/tmp/tmprq7b19_a.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmprq7b19_a.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmprq7b19_a.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprq7b19_a.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprq7b19_a.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprq7b19_a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq7b19_a.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = arr[0];\n  long\
    \ max_index = 0;\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] <=\
    \ max) {\n      return max_index;\n    }\n    max = arr[i];\n    max_index = i;\n\
    \  }\n  return -1;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputky1ez0.cpp: In function 'int main()':\n/tmp/tmputky1ez0.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmputky1ez0.cpp:2:\n/tmp/tmputky1ez0.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmputky1ez0.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmputky1ez0.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmputky1ez0.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmputky1ez0.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmputky1ez0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmputky1ez0.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    if(n == 1) return -1;\n    long max = arr[n-1];\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] <= max) return i;\n        else max = arr[i];\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = can_arrange;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7,\
    \ (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5zzlot_.cpp: In function 'int main()':\n/tmp/tmpe5zzlot_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5zzlot_.cpp:2:\n/tmp/tmpe5zzlot_.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpe5zzlot_.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpe5zzlot_.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5zzlot_.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpe5zzlot_.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe5zzlot_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5zzlot_.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long n = arr.size();\n \
    \ long max = arr[n-1];\n  long max_index = n-1;\n  for(long i = n-2; i >= 0; i--){\n\
    \    if(arr[i] <= max){\n      max = arr[i];\n      max_index = i;\n    }\n  }\n\
    \  return max_index;\n}\nint main() {\n    auto candidate = can_arrange;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7,\
    \ (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp49fa3fas.cpp: In function 'int main()':\n/tmp/tmp49fa3fas.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp49fa3fas.cpp:2:\n/tmp/tmp49fa3fas.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp49fa3fas.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp49fa3fas.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp49fa3fas.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp49fa3fas.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp49fa3fas.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp49fa3fas.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max_index = -1;\n \
    \ for (long i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] <= arr[i - 1]) {\n\
    \      max_index = i;\n    }\n  }\n  return max_index;\n}\nint main() {\n    auto\
    \ candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x3slxdc.cpp: In function 'int main()':\n/tmp/tmp0x3slxdc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/tmp0x3slxdc.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0x3slxdc.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0x3slxdc.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0x3slxdc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i > 0; i--){\n        if(arr[i]\
    \ <= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphls580xa.cpp: In function 'int main()':\n/tmp/tmphls580xa.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphls580xa.cpp:2:\n/tmp/tmphls580xa.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphls580xa.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphls580xa.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphls580xa.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphls580xa.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphls580xa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphls580xa.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i]\
    \ >= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp102hl_04.cpp: In function 'int main()':\n/tmp/tmp102hl_04.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/tmp102hl_04.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp102hl_04.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp102hl_04.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp102hl_04.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i > 0; i--){\n        if(arr[i] <=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz3jxrq32.cpp: In function 'int main()':\n/tmp/tmpz3jxrq32.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz3jxrq32.cpp:2:\n/tmp/tmpz3jxrq32.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpz3jxrq32.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpz3jxrq32.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpz3jxrq32.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpz3jxrq32.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpz3jxrq32.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz3jxrq32.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max_index = -1;\n \
    \ for (long i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] <= arr[i - 1]) {\n\
    \      max_index = i;\n    }\n  }\n  return max_index;\n}\nint main() {\n    auto\
    \ candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x3slxdc.cpp: In function 'int main()':\n/tmp/tmp0x3slxdc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/tmp0x3slxdc.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0x3slxdc.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0x3slxdc.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0x3slxdc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max_index = -1;\n \
    \ for (long i = arr.size() - 1; i > 0; i--) {\n    if (arr[i] <= arr[i - 1]) {\n\
    \      max_index = i;\n    }\n  }\n  return max_index;\n}\nint main() {\n    auto\
    \ candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x3slxdc.cpp: In function 'int main()':\n/tmp/tmp0x3slxdc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/tmp0x3slxdc.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp0x3slxdc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0x3slxdc.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0x3slxdc.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0x3slxdc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0x3slxdc.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppktahxym.cpp: In function 'int main()':\n/tmp/tmppktahxym.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/tmppktahxym.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppktahxym.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmppktahxym.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppktahxym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = arr[0];\n  long index = -1;\n  for(int i = 1; i < arr.size(); i++){\n\
    \    if(arr[i] <= max){\n      index = i;\n    }\n    else{\n      max = arr[i];\n\
    \    }\n  }\n  return index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwv8kxu_y.cpp: In function 'int main()':\n/tmp/tmpwv8kxu_y.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwv8kxu_y.cpp:2:\n/tmp/tmpwv8kxu_y.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpwv8kxu_y.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpwv8kxu_y.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwv8kxu_y.cpp:28:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwv8kxu_y.cpp:28:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwv8kxu_y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwv8kxu_y.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = arr[0];\n  long\
    \ index = -1;\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] <= max)\
    \ {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_zlypls.cpp: In function 'int main()':\n/tmp/tmp8_zlypls.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8_zlypls.cpp:2:\n/tmp/tmp8_zlypls.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp8_zlypls.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp8_zlypls.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8_zlypls.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8_zlypls.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8_zlypls.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8_zlypls.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = 0; i < arr.size() - 1; i++){\n        if(arr[i] <= arr[i+1]){\n        \
    \    if(i > max){\n                max = i;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm31lqy84.cpp: In function 'int main()':\n/tmp/tmpm31lqy84.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm31lqy84.cpp:2:\n/tmp/tmpm31lqy84.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpm31lqy84.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpm31lqy84.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm31lqy84.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm31lqy84.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpm31lqy84.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm31lqy84.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i]\
    \ >= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp102hl_04.cpp: In function 'int main()':\n/tmp/tmp102hl_04.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/tmp102hl_04.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp102hl_04.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp102hl_04.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp102hl_04.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max_index = -1;\n\
    \    for (long i = arr.size() - 1; i > 0; i--) {\n        if (arr[i] < arr[i -\
    \ 1]) {\n            max_index = i - 1;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4xtv72p.cpp: In function 'int main()':\n/tmp/tmpg4xtv72p.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg4xtv72p.cpp:2:\n/tmp/tmpg4xtv72p.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpg4xtv72p.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpg4xtv72p.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg4xtv72p.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpg4xtv72p.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg4xtv72p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg4xtv72p.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = arr[0];\n  long index = -1;\n  for(int i = 1; i < arr.size(); i++){\n\
    \    if(arr[i] <= max){\n      index = i;\n    }\n    else{\n      max = arr[i];\n\
    \    }\n  }\n  return index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwv8kxu_y.cpp: In function 'int main()':\n/tmp/tmpwv8kxu_y.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwv8kxu_y.cpp:2:\n/tmp/tmpwv8kxu_y.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpwv8kxu_y.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpwv8kxu_y.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwv8kxu_y.cpp:28:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwv8kxu_y.cpp:28:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwv8kxu_y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwv8kxu_y.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i]\
    \ >= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp102hl_04.cpp: In function 'int main()':\n/tmp/tmp102hl_04.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/tmp102hl_04.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp102hl_04.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp102hl_04.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp102hl_04.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = -1;\n  for(int i = 0; i < arr.size()-1; i++){\n    if(arr[i] >= arr[i+1]){\n\
    \      if(i > max){\n        max = i;\n      }\n    }\n  }\n  return max;\n}\n\
    int main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk35dt4cv.cpp: In function 'int main()':\n/tmp/tmpk35dt4cv.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk35dt4cv.cpp:2:\n/tmp/tmpk35dt4cv.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpk35dt4cv.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpk35dt4cv.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk35dt4cv.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk35dt4cv.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk35dt4cv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk35dt4cv.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    for(long i = n-2; i >= 0; i--){\n        if(arr[i]\
    \ <= max){\n            max = arr[i];\n        }\n        else{\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vhqyvt5.cpp: In function 'int main()':\n/tmp/tmp3vhqyvt5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/tmp3vhqyvt5.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vhqyvt5.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vhqyvt5.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3vhqyvt5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    if(arr.size()==1)\n  \
    \      return -1;\n    long max=arr[arr.size()-1];\n    for(long i=arr.size()-2;i>=0;i--)\n\
    \    {\n        if(arr[i]<=max)\n            return i;\n        else\n       \
    \     max=arr[i];\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpopn09pam.cpp: In function 'int main()':\n/tmp/tmpopn09pam.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpopn09pam.cpp:2:\n/tmp/tmpopn09pam.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpopn09pam.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpopn09pam.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpopn09pam.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpopn09pam.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpopn09pam.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpopn09pam.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    for(long i = n-2; i >= 0; i--){\n        if(arr[i]\
    \ <= max){\n            return i;\n        }\n        max = arr[i];\n    }\n \
    \   return -1;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3if3re4k.cpp: In function 'int main()':\n/tmp/tmp3if3re4k.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3if3re4k.cpp:2:\n/tmp/tmp3if3re4k.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3if3re4k.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3if3re4k.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3if3re4k.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3if3re4k.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3if3re4k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3if3re4k.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long n = arr.size();\n \
    \ long max = arr[n-1];\n  long index = -1;\n  for(long i = n-2; i >= 0; i--){\n\
    \    if(arr[i] <= max){\n      index = i;\n      max = arr[i];\n    }\n  }\n \
    \ return index;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbj0vcum5.cpp: In function 'int main()':\n/tmp/tmpbj0vcum5.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbj0vcum5.cpp:2:\n/tmp/tmpbj0vcum5.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpbj0vcum5.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpbj0vcum5.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbj0vcum5.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbj0vcum5.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbj0vcum5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbj0vcum5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long max_index = n-1;\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] <= max){\n            max = arr[i];\n       \
    \     max_index = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr7hzd57.cpp: In function 'int main()':\n/tmp/tmpkr7hzd57.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr7hzd57.cpp:2:\n/tmp/tmpkr7hzd57.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpkr7hzd57.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpkr7hzd57.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkr7hzd57.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkr7hzd57.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkr7hzd57.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkr7hzd57.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = -1;\n  for (long\
    \ i = arr.size() - 1; i >= 0; i--) {\n    if (arr[i] >= max) {\n      max = arr[i];\n\
    \    } else {\n      return i;\n    }\n  }\n  return -1;\n}\nint main() {\n  \
    \  auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3k8y502a.cpp: In function 'int main()':\n/tmp/tmp3k8y502a.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3k8y502a.cpp:2:\n/tmp/tmp3k8y502a.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3k8y502a.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3k8y502a.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3k8y502a.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3k8y502a.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3k8y502a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3k8y502a.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = 0; i < n - 1; i++) {\n        if(arr[i]\
    \ >= arr[i + 1]) {\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_l50pyl.cpp: In function 'int main()':\n/tmp/tmp6_l50pyl.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6_l50pyl.cpp:2:\n/tmp/tmp6_l50pyl.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp6_l50pyl.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp6_l50pyl.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6_l50pyl.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6_l50pyl.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6_l50pyl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6_l50pyl.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(long\
    \ i = arr.size()-1; i >= 0; i--){\n        if(arr[i] >= max){\n            max\
    \ = arr[i];\n        }\n        else{\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzprr44s6.cpp: In function 'int main()':\n/tmp/tmpzprr44s6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzprr44s6.cpp:2:\n/tmp/tmpzprr44s6.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpzprr44s6.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpzprr44s6.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzprr44s6.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzprr44s6.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzprr44s6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzprr44s6.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i]\
    \ >= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp102hl_04.cpp: In function 'int main()':\n/tmp/tmp102hl_04.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/tmp102hl_04.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp102hl_04.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp102hl_04.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp102hl_04.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long i = n - 1;\n    while(i > 0 && arr[i] >= arr[i - 1])\n        i--;\n\
    \    return i - 1;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegt29w6f.cpp: In function 'int main()':\n/tmp/tmpegt29w6f.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpegt29w6f.cpp:2:\n/tmp/tmpegt29w6f.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpegt29w6f.cpp:21:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpegt29w6f.cpp:21:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpegt29w6f.cpp:21:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpegt29w6f.cpp:21:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpegt29w6f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpegt29w6f.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    for(long i = n-2; i >= 0; i--){\n        if(arr[i]\
    \ <= max){\n            max = arr[i];\n        }\n        else{\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vhqyvt5.cpp: In function 'int main()':\n/tmp/tmp3vhqyvt5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/tmp3vhqyvt5.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vhqyvt5.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vhqyvt5.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3vhqyvt5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ max){\n            max = arr[i];\n        }\n        else{\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64wqbfb8.cpp: In function 'int main()':\n/tmp/tmp64wqbfb8.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64wqbfb8.cpp:2:\n/tmp/tmp64wqbfb8.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp64wqbfb8.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp64wqbfb8.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp64wqbfb8.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp64wqbfb8.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp64wqbfb8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64wqbfb8.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long index = -1;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ <= max){\n            index = i;\n        }\n        else{\n            max\
    \ = arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphb0lhh_r.cpp: In function 'int main()':\n/tmp/tmphb0lhh_r.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb0lhh_r.cpp:2:\n/tmp/tmphb0lhh_r.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphb0lhh_r.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphb0lhh_r.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphb0lhh_r.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphb0lhh_r.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphb0lhh_r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb0lhh_r.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = arr.size()-1; i >= 0; i--){\n        if(arr[i] >= max){\n            max\
    \ = arr[i];\n        }\n        else{\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__g26jan.cpp: In function 'int main()':\n/tmp/tmp__g26jan.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp__g26jan.cpp:2:\n/tmp/tmp__g26jan.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp__g26jan.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp__g26jan.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp__g26jan.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp__g26jan.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp__g26jan.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp__g26jan.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppktahxym.cpp: In function 'int main()':\n/tmp/tmppktahxym.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/tmppktahxym.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppktahxym.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmppktahxym.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppktahxym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    if(n == 1) return -1;\n    long max_index = 0;\n    for(long i = 1; i < n;\
    \ i++) {\n        if(arr[i] <= arr[i-1]) {\n            max_index = i;\n     \
    \   }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvi4pu2h5.cpp: In function 'int main()':\n/tmp/tmpvi4pu2h5.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvi4pu2h5.cpp:2:\n/tmp/tmpvi4pu2h5.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpvi4pu2h5.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpvi4pu2h5.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvi4pu2h5.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvi4pu2h5.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvi4pu2h5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvi4pu2h5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i > 0; i--){\n        if(arr[i]\
    \ <= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphls580xa.cpp: In function 'int main()':\n/tmp/tmphls580xa.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphls580xa.cpp:2:\n/tmp/tmphls580xa.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphls580xa.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphls580xa.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphls580xa.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphls580xa.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphls580xa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphls580xa.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // your code here\n  \
    \  long max = -1;\n    for(int i = arr.size()-1; i > 0; i--){\n        if(arr[i]\
    \ < arr[i-1]){\n            max = i-1;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3lht5n1.cpp: In function 'int main()':\n/tmp/tmpn3lht5n1.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn3lht5n1.cpp:2:\n/tmp/tmpn3lht5n1.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpn3lht5n1.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpn3lht5n1.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpn3lht5n1.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpn3lht5n1.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpn3lht5n1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn3lht5n1.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = -1;\n  for (long\
    \ i = arr.size() - 1; i >= 0; i--) {\n    if (arr[i] >= max) {\n      max = arr[i];\n\
    \    } else {\n      return i;\n    }\n  }\n  return -1;\n}\nint main() {\n  \
    \  auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3k8y502a.cpp: In function 'int main()':\n/tmp/tmp3k8y502a.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3k8y502a.cpp:2:\n/tmp/tmp3k8y502a.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3k8y502a.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3k8y502a.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3k8y502a.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3k8y502a.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3k8y502a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3k8y502a.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long index = -1;\n   \
    \ for(long i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] >= arr[i + 1])\
    \ {\n            index = i;\n        }\n    }\n    return index;\n}\nint main()\
    \ {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6uibqkc.cpp: In function 'int main()':\n/tmp/tmpj6uibqkc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj6uibqkc.cpp:2:\n/tmp/tmpj6uibqkc.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpj6uibqkc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpj6uibqkc.cpp:23:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj6uibqkc.cpp:23:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj6uibqkc.cpp:23:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj6uibqkc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj6uibqkc.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // your code here\n  \
    \  long n = arr.size();\n    long max = arr[n-1];\n    long max_index = n-1;\n\
    \    for(long i = n-2; i >= 0; i--){\n        if(arr[i] <= max){\n           \
    \ max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxc3uh4iv.cpp: In function 'int main()':\n/tmp/tmpxc3uh4iv.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxc3uh4iv.cpp:2:\n/tmp/tmpxc3uh4iv.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpxc3uh4iv.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpxc3uh4iv.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxc3uh4iv.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxc3uh4iv.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxc3uh4iv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxc3uh4iv.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long index = -1;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ <= max){\n            index = i;\n        }\n        else{\n            max\
    \ = arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphb0lhh_r.cpp: In function 'int main()':\n/tmp/tmphb0lhh_r.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb0lhh_r.cpp:2:\n/tmp/tmphb0lhh_r.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphb0lhh_r.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphb0lhh_r.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphb0lhh_r.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphb0lhh_r.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphb0lhh_r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb0lhh_r.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long max_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] <= max) {\n            max = arr[i];\n            max_index = i;\n\
    \        }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuafyznt1.cpp: In function 'int main()':\n/tmp/tmpuafyznt1.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuafyznt1.cpp:2:\n/tmp/tmpuafyznt1.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpuafyznt1.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpuafyznt1.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuafyznt1.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuafyznt1.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuafyznt1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuafyznt1.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max_index = -1;\n\
    \    long max_value = -1;\n    for (long i = arr.size() - 1; i >= 0; i--) {\n\
    \        if (arr[i] >= max_value) {\n            max_value = arr[i];\n       \
    \     max_index = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2etwr_y.cpp: In function 'int main()':\n/tmp/tmpt2etwr_y.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt2etwr_y.cpp:2:\n/tmp/tmpt2etwr_y.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpt2etwr_y.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpt2etwr_y.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt2etwr_y.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt2etwr_y.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt2etwr_y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt2etwr_y.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long n = arr.size();\n \
    \ long max_index = -1;\n  for (long i = n - 1; i >= 0; i--) {\n    if (arr[i]\
    \ >= arr[i - 1]) {\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n\
    int main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaojn8hch.cpp: In function 'int main()':\n/tmp/tmpaojn8hch.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaojn8hch.cpp:2:\n/tmp/tmpaojn8hch.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpaojn8hch.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpaojn8hch.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaojn8hch.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaojn8hch.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaojn8hch.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaojn8hch.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long index = -1;\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ <= max) {\n            max = arr[i];\n            index = i;\n        }\n  \
    \  }\n    return index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp602im_q3.cpp: In function 'int main()':\n/tmp/tmp602im_q3.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp602im_q3.cpp:2:\n/tmp/tmp602im_q3.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp602im_q3.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp602im_q3.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp602im_q3.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp602im_q3.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp602im_q3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp602im_q3.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    if(n == 1)\n        return 0;\n    long max_index = 0;\n    for(long i =\
    \ 1; i < n; i++) {\n        if(arr[i] <= arr[i-1])\n            max_index = i;\n\
    \    }\n    return max_index;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr5h4ndc.cpp: In function 'int main()':\n/tmp/tmplr5h4ndc.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplr5h4ndc.cpp:2:\n/tmp/tmplr5h4ndc.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmplr5h4ndc.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmplr5h4ndc.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplr5h4ndc.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplr5h4ndc.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplr5h4ndc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplr5h4ndc.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = 0; i < arr.size() - 1; i++){\n        if(arr[i] >= arr[i+1]){\n        \
    \    if(i > max){\n                max = i;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1c61epxo.cpp: In function 'int main()':\n/tmp/tmp1c61epxo.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/tmp1c61epxo.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1c61epxo.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1c61epxo.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1c61epxo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = 0; i < arr.size() - 1; i++){\n        if(arr[i] >= arr[i+1]){\n        \
    \    if(i > max){\n                max = i;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1c61epxo.cpp: In function 'int main()':\n/tmp/tmp1c61epxo.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/tmp1c61epxo.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1c61epxo.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1c61epxo.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1c61epxo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = arr[0];\n  long index = 0;\n  for(int i = 1; i < arr.size(); i++){\n \
    \   if(arr[i] <= max){\n      max = arr[i];\n      index = i;\n    }\n  }\n  return\
    \ index;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzeo1xes.cpp: In function 'int main()':\n/tmp/tmpuzeo1xes.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzeo1xes.cpp:2:\n/tmp/tmpuzeo1xes.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpuzeo1xes.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpuzeo1xes.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuzeo1xes.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuzeo1xes.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpuzeo1xes.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzeo1xes.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long max_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            max_index = i;\n  \
    \      }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89l5iaem.cpp: In function 'int main()':\n/tmp/tmp89l5iaem.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89l5iaem.cpp:2:\n/tmp/tmp89l5iaem.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp89l5iaem.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp89l5iaem.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp89l5iaem.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp89l5iaem.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp89l5iaem.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89l5iaem.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    if(arr.size()==1)\n  \
    \      return -1;\n    long max=arr[0];\n    long index=0;\n    for(long i=1;i<arr.size();i++)\n\
    \    {\n        if(arr[i]<=max)\n        {\n            max=arr[i];\n        \
    \    index=i;\n        }\n    }\n    if(index==0)\n        return -1;\n    return\
    \ index;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxcfqc3t.cpp: In function 'int main()':\n/tmp/tmpdxcfqc3t.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxcfqc3t.cpp:2:\n/tmp/tmpdxcfqc3t.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpdxcfqc3t.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpdxcfqc3t.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxcfqc3t.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxcfqc3t.cpp:31:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxcfqc3t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxcfqc3t.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long n = arr.size();\n \
    \ long max_index = -1;\n  for (long i = n - 1; i >= 0; i--) {\n    if (arr[i]\
    \ >= arr[i - 1]) {\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n\
    int main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaojn8hch.cpp: In function 'int main()':\n/tmp/tmpaojn8hch.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaojn8hch.cpp:2:\n/tmp/tmpaojn8hch.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpaojn8hch.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpaojn8hch.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaojn8hch.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaojn8hch.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaojn8hch.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaojn8hch.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i]\
    \ >= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp102hl_04.cpp: In function 'int main()':\n/tmp/tmp102hl_04.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/tmp102hl_04.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp102hl_04.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp102hl_04.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp102hl_04.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp102hl_04.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp102hl_04.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    for(long i = n-2; i >= 0; i--){\n        if(arr[i]\
    \ <= max){\n            max = arr[i];\n        }\n        else{\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vhqyvt5.cpp: In function 'int main()':\n/tmp/tmp3vhqyvt5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/tmp3vhqyvt5.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3vhqyvt5.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3vhqyvt5.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3vhqyvt5.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3vhqyvt5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vhqyvt5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i > 0; i--){\n        if(arr[i]\
    \ <= arr[i-1]){\n            max_index = i;\n        }\n    }\n    return max_index;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphls580xa.cpp: In function 'int main()':\n/tmp/tmphls580xa.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphls580xa.cpp:2:\n/tmp/tmphls580xa.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphls580xa.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphls580xa.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphls580xa.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphls580xa.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphls580xa.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphls580xa.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = arr[0];\n  long index = 0;\n  for(long i = 1; i < arr.size(); i++){\n\
    \    if(arr[i] <= max){\n      index = i;\n    }\n    else{\n      max = arr[i];\n\
    \    }\n  }\n  if(index == 0){\n    return -1;\n  }\n  return index;\n}\nint main()\
    \ {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjqrpjlzn.cpp: In function 'int main()':\n/tmp/tmpjqrpjlzn.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjqrpjlzn.cpp:2:\n/tmp/tmpjqrpjlzn.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpjqrpjlzn.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpjqrpjlzn.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjqrpjlzn.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpjqrpjlzn.cpp:31:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjqrpjlzn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjqrpjlzn.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  long max = -1;\n  for (long\
    \ i = arr.size() - 1; i >= 0; i--) {\n    if (arr[i] >= max) {\n      max = arr[i];\n\
    \    } else {\n      return i;\n    }\n  }\n  return -1;\n}\nint main() {\n  \
    \  auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3k8y502a.cpp: In function 'int main()':\n/tmp/tmp3k8y502a.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3k8y502a.cpp:2:\n/tmp/tmp3k8y502a.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp3k8y502a.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp3k8y502a.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp3k8y502a.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp3k8y502a.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3k8y502a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3k8y502a.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ max){\n            max = arr[i];\n        }\n        else{\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64wqbfb8.cpp: In function 'int main()':\n/tmp/tmp64wqbfb8.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64wqbfb8.cpp:2:\n/tmp/tmp64wqbfb8.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp64wqbfb8.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp64wqbfb8.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp64wqbfb8.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp64wqbfb8.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp64wqbfb8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64wqbfb8.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n  // your code here\n  long\
    \ max = arr[0];\n  long index = 0;\n  for(long i = 1; i < arr.size(); i++){\n\
    \    if(arr[i] <= max){\n      max = arr[i];\n      index = i;\n    }\n  }\n \
    \ return index;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jj1j4j2.cpp: In function 'int main()':\n/tmp/tmp5jj1j4j2.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5jj1j4j2.cpp:2:\n/tmp/tmp5jj1j4j2.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp5jj1j4j2.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp5jj1j4j2.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5jj1j4j2.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5jj1j4j2.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5jj1j4j2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5jj1j4j2.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max_index = -1;\n    for(long i = n-1; i > 0; i--){\n        if(arr[i]\
    \ < arr[i-1]){\n            max_index = i-1;\n        }\n        else{\n     \
    \       arr[i-1] = arr[i];\n        }\n    }\n    return max_index;\n}\nint main()\
    \ {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplx243ize.cpp: In function 'int main()':\n/tmp/tmplx243ize.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx243ize.cpp:2:\n/tmp/tmplx243ize.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmplx243ize.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmplx243ize.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplx243ize.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplx243ize.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplx243ize.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx243ize.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = arr[0];\n \
    \   long index = -1;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ <= max){\n            index = i;\n        }\n        else{\n            max\
    \ = arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphb0lhh_r.cpp: In function 'int main()':\n/tmp/tmphb0lhh_r.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb0lhh_r.cpp:2:\n/tmp/tmphb0lhh_r.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphb0lhh_r.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphb0lhh_r.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphb0lhh_r.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphb0lhh_r.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphb0lhh_r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb0lhh_r.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long max = -1;\n    for(int\
    \ i = 0; i < arr.size() - 1; i++){\n        if(arr[i] >= arr[i+1]){\n        \
    \    if(i > max){\n                max = i;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1c61epxo.cpp: In function 'int main()':\n/tmp/tmp1c61epxo.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/tmp1c61epxo.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp1c61epxo.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1c61epxo.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1c61epxo.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1c61epxo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1c61epxo.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long max = arr[n-1];\n    long index = -1;\n    for(long i = n-2; i >= 0;\
    \ i--){\n        if(arr[i] <= max){\n            index = i;\n            max =\
    \ arr[i];\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli6dpihd.cpp: In function 'int main()':\n/tmp/tmpli6dpihd.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/tmpli6dpihd.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpli6dpihd.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpli6dpihd.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpli6dpihd.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpli6dpihd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpli6dpihd.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long ans = -1;\n    for(long i = n-1; i >= 0; i--){\n        if(arr[i] >=\
    \ arr[i-1]){\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppktahxym.cpp: In function 'int main()':\n/tmp/tmppktahxym.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/tmppktahxym.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmppktahxym.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppktahxym.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmppktahxym.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppktahxym.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppktahxym.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    if(n == 1) return -1;\n    long max_index = -1;\n    for(long i = n-2; i\
    \ >= 0; i--){\n        if(arr[i] >= arr[i+1]){\n            max_index = i;\n \
    \       }\n        else{\n            return max_index;\n        }\n    }\n  \
    \  return max_index;\n}\nint main() {\n    auto candidate = can_arrange;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7,\
    \ (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9nc8h5f.cpp: In function 'int main()':\n/tmp/tmpv9nc8h5f.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv9nc8h5f.cpp:2:\n/tmp/tmpv9nc8h5f.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpv9nc8h5f.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpv9nc8h5f.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpv9nc8h5f.cpp:28:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpv9nc8h5f.cpp:28:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv9nc8h5f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv9nc8h5f.cpp:2:\n/tmp/t"
  stdout: ''
