name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
  \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==\
  \ (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
  }\n"
completions: ["    std::vector<long> s;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin()) {\n \
    \           s.push_back(*i);\n        } else {\n            if (*i != *(i - 1))\
    \ {\n                s.push_back(*i);\n            }\n        }\n    }\n    return\
    \ s;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto i : l) {\n        if (res.size() == 0 || res.back() != i) {\n        \
    \    res.push_back(i);\n        }\n    }\n    return res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() || *i\
    \ != *(i - 1)) {\n            ret.push_back(*i);\n        }\n    }\n    return\
    \ ret;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n  return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() ||\
    \ *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() ||\
    \ *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto x : l) {\n        if (ret.size() == 0 || ret.back()\
    \ != x) {\n            ret.push_back(x);\n        }\n    }\n    return ret;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (auto i\
    \ : l) {\n        if (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> s;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin()) {\n            s.push_back(*i);\n        } else {\n          \
    \  if (*i != *(i - 1)) {\n                s.push_back(*i);\n            }\n  \
    \      }\n    }\n    return s;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 ||\
    \ l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n  \
    \  return res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (auto i : l) {\n        if (res.size() == 0 || res.back() != i) {\n \
    \           res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (ret.size() == 0 || ret.back() != i) {\n            ret.push_back(i);\n    \
    \    }\n    }\n    return ret;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "  std::vector<long> res;\n  std::sort(l.begin(), l.end());\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (i == 0 || l[i] != l[i - 1]) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0) {\n            res.push_back(l[i]);\n\
    \        } else {\n            if (l[i] != l[i - 1]) {\n                res.push_back(l[i]);\n\
    \            }\n        }\n    }\n    return res;", "    std::vector<long> res;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ s;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i != l.end();\
    \ i++) {\n        if (i == l.begin()) {\n            s.push_back(*i);\n      \
    \  } else {\n            if (*i != *(i - 1)) {\n                s.push_back(*i);\n\
    \            }\n        }\n    }\n    return s;", "    std::vector<long> res;\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "  std::vector<long> res;\n  std::sort(l.begin(), l.end());\n  for (auto\
    \ i : l) {\n    if (res.size() == 0 || res.back() != i) {\n      res.push_back(i);\n\
    \    }\n  }\n  return res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 ||\
    \ l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n  \
    \  return res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long> ans;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       ans.push_back(l[i]);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (auto\
    \ i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() || *i != *(i\
    \ - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return res;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ r;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i != l.end();\
    \ i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n            r.push_back(*i);\n\
    \        }\n    }\n    return r;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (ret.size() == 0 || ret.back()\
    \ != i) {\n            ret.push_back(i);\n        }\n    }\n    return ret;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (auto i\
    \ = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() || *i != *(i -\
    \ 1)) {\n            res.push_back(*i);\n        }\n    }\n    return res;", " \
    \   std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (res.size() == 0 || res.back()\
    \ != i) {\n            res.push_back(i);\n        }\n    }\n    return res;",
  "    std::vector<long> res;\n    for (auto i : l) {\n        if (std::find(res.begin(),\
    \ res.end(), i) == res.end()) {\n            res.push_back(i);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n         \
    \   res.push_back(*i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (res.size() == 0 || res.back()\
    \ != i) {\n            res.push_back(i);\n        }\n    }\n    return res;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (auto i\
    \ : l) {\n        if (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            ret.push_back(*i);\n        }\n\
    \    }\n    return ret;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::sort(l.begin(), l.end());\n   \
    \ l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n         \
    \   ret.push_back(*i);\n        }\n    }\n    return ret;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        if (i == l.begin() || *i != *(i - 1)) {\n         \
    \   res.push_back(*i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "  std::vector<long> res;\n  std::sort(l.begin(),\
    \ l.end());\n  for (auto i : l) {\n    if (res.size() == 0 || res.back() != i)\
    \ {\n      res.push_back(i);\n    }\n  }\n  return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (res.size() == 0 || res.back()\
    \ != i) {\n            res.push_back(i);\n        }\n    }\n    return res;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (auto i\
    \ : l) {\n        if (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::sort(l.begin(), l.end());\n   \
    \ l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> v;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            v.push_back(*i);\n        }\n\
    \    }\n    return v;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 ||\
    \ l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n  \
    \  return res;", "    std::sort(l.begin(), l.end());\n    auto it = std::unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;", "  \
    \  std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i = l.begin(); i !=\
    \ l.end(); ++i) {\n        if (i == l.begin() || *i != *(i - 1)) {\n         \
    \   res.push_back(*i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> s;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin()) {\n            s.push_back(*i);\n        } else {\n          \
    \  if (*i != *(i - 1)) {\n                s.push_back(*i);\n            }\n  \
    \      }\n    }\n    return s;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() ||\
    \ *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() ||\
    \ *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;"]
stop_tokens:
- "\n}"
