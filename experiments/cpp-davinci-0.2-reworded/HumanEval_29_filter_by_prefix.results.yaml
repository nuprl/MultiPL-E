language: cpp
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yxfbh2s.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp3yxfbh2s.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp3yxfbh2s.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp3yxfbh2s.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmp3yxfbh2s.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp3yxfbh2s.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbmgrozv.cpp: In function 'int main()':\n/tmp/tmpqbmgrozv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbmgrozv.cpp:2:\n/tmp/tmpqbmgrozv.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpqbmgrozv.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> ret;\n  for (auto\
    \ s : strings) {\n    if (s.find(prefix) == 0) {\n      ret.push_back(s);\n  \
    \  }\n  }\n  return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1z84_bf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpo1z84_bf.cpp:10:13:\
    \ error: 's' does not name a type\n   for (auto s : strings) {\n             ^\n\
    /tmp/tmpo1z84_bf.cpp:15:3: error: expected ';' before 'return'\n   return ret;\n\
    \   ^\n/tmp/tmpo1z84_bf.cpp:15:3: error: expected primary-expression before 'return'\n\
    /tmp/tmpo1z84_bf.cpp:15:3: error: expected ';' before 'return'\n/tmp/tmpo1z84_bf.cpp:15:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpo1z84_bf.cpp:15:3:\
    \ error: expected ')' before 'return'\n/tmp/tmpo1z84_bf.cpp: In function 'int\
    \ main()':\n/tmp/tmpo1z84_bf.cpp:18:10: error: 'candidate' does not name a type\n\
    \     auto candidate = filter_by_prefix;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo1z84_bf.cpp:2:\n/tmp/tmpo1z84_bf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpo1z84_bf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpo1z84_bf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnc4p8er2.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnc4p8er2.cpp:10:15:\
    \ error: 'str' does not name a type\n     for (auto str : strings) {\n       \
    \        ^\n/tmp/tmpnc4p8er2.cpp:15:5: error: expected ';' before 'return'\n \
    \    return result;\n     ^\n/tmp/tmpnc4p8er2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpnc4p8er2.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpnc4p8er2.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpnc4p8er2.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpnc4p8er2.cpp:\
    \ In function 'int main()':\n/tmp/tmpnc4p8er2.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnc4p8er2.cpp:2:\n/tmp/tmpnc4p8er2.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnc4p8er2.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnc4p8er2.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::stri"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40xjyz4r.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp40xjyz4r.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto& s : strings) {\n                ^\n/tmp/tmp40xjyz4r.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto& s : strings)\
    \ {\n                    ^\n/tmp/tmp40xjyz4r.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp40xjyz4r.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp40xjyz4r.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp40xjyz4r.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp40xjyz4r.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40xjyz4r.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp40xjyz4r.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto& s : strings) {\n                ^\n/tmp/tmp40xjyz4r.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto& s : strings)\
    \ {\n                    ^\n/tmp/tmp40xjyz4r.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp40xjyz4r.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp40xjyz4r.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp40xjyz4r.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp40xjyz4r.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbmgrozv.cpp: In function 'int main()':\n/tmp/tmpqbmgrozv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbmgrozv.cpp:2:\n/tmp/tmpqbmgrozv.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpqbmgrozv.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      res.push_back(s);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_ihldr4.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpi_ihldr4.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpi_ihldr4.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ res;\n     ^\n/tmp/tmpi_ihldr4.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpi_ihldr4.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpi_ihldr4.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpi_ihldr4.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpi_ihldr4.cpp:\
    \ In function 'int main()':\n/tmp/tmpi_ihldr4.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi_ihldr4.cpp:2:\n/tmp/tmpi_ihldr4.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpi_ihldr4.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpi_ihldr4.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(prefix)\
    \ == 0) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp897638vz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp897638vz.cpp:10:15:\
    \ error: 'i' does not name a type\n     for (auto i = strings.begin(); i != strings.end();\
    \ i++) {\n               ^\n/tmp/tmp897638vz.cpp:10:36: error: expected ';' before\
    \ 'i'\n     for (auto i = strings.begin(); i != strings.end(); i++) {\n      \
    \                              ^\n/tmp/tmp897638vz.cpp:10:36: error: 'i' was not\
    \ declared in this scope\n/tmp/tmp897638vz.cpp: In function 'int main()':\n/tmp/tmp897638vz.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp897638vz.cpp:2:\n/tmp/tmp897638vz.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp897638vz.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp897638vz.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                      "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqqfckfae.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpqqfckfae.cpp:10:15:\
    \ error: 'string' does not name a type\n     for (auto string : strings) {\n \
    \              ^\n/tmp/tmpqqfckfae.cpp:15:5: error: expected ';' before 'return'\n\
    \     return result;\n     ^\n/tmp/tmpqqfckfae.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpqqfckfae.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpqqfckfae.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpqqfckfae.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpqqfckfae.cpp:\
    \ In function 'int main()':\n/tmp/tmpqqfckfae.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqqfckfae.cpp:2:\n/tmp/tmpqqfckfae.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpqqfckfae.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpqqfckfae.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbmgrozv.cpp: In function 'int main()':\n/tmp/tmpqbmgrozv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbmgrozv.cpp:2:\n/tmp/tmpqbmgrozv.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpqbmgrozv.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknga9ng0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpknga9ng0.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto& s : strings) {\n                ^\n/tmp/tmpknga9ng0.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto& s : strings)\
    \ {\n                    ^\n/tmp/tmpknga9ng0.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmpknga9ng0.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpknga9ng0.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpknga9ng0.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpknga9ng0.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yxfbh2s.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp3yxfbh2s.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp3yxfbh2s.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp3yxfbh2s.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmp3yxfbh2s.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp3yxfbh2s.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnc4p8er2.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnc4p8er2.cpp:10:15:\
    \ error: 'str' does not name a type\n     for (auto str : strings) {\n       \
    \        ^\n/tmp/tmpnc4p8er2.cpp:15:5: error: expected ';' before 'return'\n \
    \    return result;\n     ^\n/tmp/tmpnc4p8er2.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpnc4p8er2.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpnc4p8er2.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpnc4p8er2.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpnc4p8er2.cpp:\
    \ In function 'int main()':\n/tmp/tmpnc4p8er2.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnc4p8er2.cpp:2:\n/tmp/tmpnc4p8er2.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnc4p8er2.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnc4p8er2.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::stri"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp612wcdtp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(prefix)\
    \ == 0) {\n            result.push_back(*i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp897638vz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp897638vz.cpp:10:15:\
    \ error: 'i' does not name a type\n     for (auto i = strings.begin(); i != strings.end();\
    \ i++) {\n               ^\n/tmp/tmp897638vz.cpp:10:36: error: expected ';' before\
    \ 'i'\n     for (auto i = strings.begin(); i != strings.end(); i++) {\n      \
    \                              ^\n/tmp/tmp897638vz.cpp:10:36: error: 'i' was not\
    \ declared in this scope\n/tmp/tmp897638vz.cpp: In function 'int main()':\n/tmp/tmp897638vz.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp897638vz.cpp:2:\n/tmp/tmp897638vz.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp897638vz.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp897638vz.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                      "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret;\n    for (auto\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            ret.push_back(s);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8fxbb3am.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->find(prefix)\
    \ == 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybc2fe15.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (std::string\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpneym0m2j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yxfbh2s.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp3yxfbh2s.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp3yxfbh2s.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp3yxfbh2s.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmp3yxfbh2s.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp3yxfbh2s.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbmgrozv.cpp: In function 'int main()':\n/tmp/tmpqbmgrozv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbmgrozv.cpp:2:\n/tmp/tmpqbmgrozv.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpqbmgrozv.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yxfbh2s.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp3yxfbh2s.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp3yxfbh2s.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp3yxfbh2s.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmp3yxfbh2s.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp3yxfbh2s.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqbmgrozv.cpp: In function 'int main()':\n/tmp/tmpqbmgrozv.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = filter_by_prefix;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqbmgrozv.cpp:2:\n/tmp/tmpqbmgrozv.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpqbmgrozv.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpqbmgrozv.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqbmgrozv.cpp:20:176:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            res.push_back(s);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf6ni4xwv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.compare(0, prefix.size(), prefix) == 0)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp93omzyan.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.rfind(prefix, 0) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwbeimqjp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yxfbh2s.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp3yxfbh2s.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp3yxfbh2s.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp3yxfbh2s.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmp3yxfbh2s.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp3yxfbh2s.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3yxfbh2s.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w3tzzei.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp_w3tzzei.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto &s : strings) {\n                ^\n/tmp/tmp_w3tzzei.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &s : strings)\
    \ {\n                    ^\n/tmp/tmp_w3tzzei.cpp:11:15: error: request for member\
    \ 'find' in 's', which is of non-class type 'int'\n         if (s.find(prefix)\
    \ == 0) {\n               ^\n/tmp/tmp_w3tzzei.cpp:12:31: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(s);\n                        \
    \       ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n       \
    \          from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp_w3tzzei.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_w3tzzei.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _Char"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(strings[i]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz9b4dcid.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknga9ng0.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpknga9ng0.cpp:10:16:\
    \ error: ISO C++ forbids declaration of 's' with no type [-fpermissive]\n    \
    \ for (auto& s : strings) {\n                ^\n/tmp/tmpknga9ng0.cpp:10:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto& s : strings)\
    \ {\n                    ^\n/tmp/tmpknga9ng0.cpp:11:15: error: request for member\
    \ 'substr' in 's', which is of non-class type 'int'\n         if (s.substr(0,\
    \ prefix.size()) == prefix) {\n               ^\n/tmp/tmpknga9ng0.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpknga9ng0.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpknga9ng0.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpknga9ng0.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->find(prefix)\
    \ == 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybc2fe15.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (std::string\
    \ s : strings) {\n\t\tif (s.find(prefix) == 0) {\n\t\t\tresult.push_back(s);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgxip2et3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->find(prefix)\
    \ == 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybc2fe15.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747311
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp6tytnb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpjp6tytnb.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpjp6tytnb.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpjp6tytnb.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmpjp6tytnb.cpp:\
    \ In function 'int main()':\n/tmp/tmpjp6tytnb.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp6tytnb.cpp:2:\n/tmp/tmpjp6tytnb.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpjp6tytnb.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpjp6tytnb.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yvbqta8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp7yvbqta8.cpp:10:15:\
    \ error: 's' does not name a type\n     for (auto s : strings) {\n           \
    \    ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp7yvbqta8.cpp:15:5: error: expected ';' before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp7yvbqta8.cpp:15:5: error: expected ')' before 'return'\n/tmp/tmp7yvbqta8.cpp:\
    \ In function 'int main()':\n/tmp/tmp7yvbqta8.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7yvbqta8.cpp:2:\n/tmp/tmp7yvbqta8.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp7yvbqta8.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp7yvbqta8.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvntwbyt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmpnvntwbyt.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmpnvntwbyt.cpp: In function\
    \ 'int main()':\n/tmp/tmpnvntwbyt.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnvntwbyt.cpp:2:\n/tmp/tmpnvntwbyt.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmpnvntwbyt.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmpnvntwbyt.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector\
    \ of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kn_yynf.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::basic_string<char> >, std::string)':\n/tmp/tmp1kn_yynf.cpp:10:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (std::string\
    \ s : strings) {\n                          ^\n/tmp/tmp1kn_yynf.cpp: In function\
    \ 'int main()':\n/tmp/tmp1kn_yynf.cpp:18:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = filter_by_prefix;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kn_yynf.cpp:2:\n/tmp/tmp1kn_yynf.cpp:19:60: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n                            \
    \                                ^\n/tmp/tmp1kn_yynf.cpp:20:47: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                             ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"xxx\"\
    , (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
    xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n                  \
    \                                                                            \
    \                                                                            \
    \      ^\n/tmp/tmp1kn_yynf.cpp:20:176: warning: extended initializer lists only\
    \ available with -std=c++1"
  stdout: ''
