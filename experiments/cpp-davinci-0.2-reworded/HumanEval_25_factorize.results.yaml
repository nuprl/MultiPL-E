language: cpp
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n\tstd::vector<long> factors;\n\tfor (long\
    \ i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6zwr5bf.cpp: In function 'int main()':\n/tmp/tmps6zwr5bf.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps6zwr5bf.cpp:2:\n/tmp/tmps6zwr5bf.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmps6zwr5bf.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmps6zwr5bf.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmps6zwr5bf.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps6zwr5bf.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmps6zwr5bf.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmps6zwr5bf.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps6zwr5bf.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long d = 2; d * d <= n; d++) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv6963k5.cpp: In function 'int main()':\n/tmp/tmpkv6963k5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkv6963k5.cpp:2:\n/tmp/tmpkv6963k5.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpkv6963k5.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpkv6963k5.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpkv6963k5.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkv6963k5.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpkv6963k5.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpkv6963k5.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkv6963k5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmxy93f6.cpp: In function 'int main()':\n/tmp/tmpxmxy93f6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxmxy93f6.cpp:2:\n/tmp/tmpxmxy93f6.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpxmxy93f6.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpxmxy93f6.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpxmxy93f6.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpxmxy93f6.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpxmxy93f6.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae0f5hzj.cpp: In function 'int main()':\n/tmp/tmpae0f5hzj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpae0f5hzj.cpp:2:\n/tmp/tmpae0f5hzj.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpae0f5hzj.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpae0f5hzj.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpae0f5hzj.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpae0f5hzj.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpae0f5hzj.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibpyhqn7.cpp: In function 'int main()':\n/tmp/tmpibpyhqn7.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibpyhqn7.cpp:2:\n/tmp/tmpibpyhqn7.cpp:25:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibpyhqn7.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibpyhqn7.cpp:25:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibpyhqn7.cpp:25:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibpyhqn7.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibpyhqn7.cpp:26:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibpyhqn7.cpp:26:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibpyhqn7.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d = d + 1;\n        if (d * d > n) {\n\
    \            if (n > 1) {\n                factors.push_back(n);\n           \
    \ }\n            break;\n        }\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7ys82ii.cpp: In function 'int main()':\n/tmp/tmpb7ys82ii.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb7ys82ii.cpp:2:\n/tmp/tmpb7ys82ii.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpb7ys82ii.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpb7ys82ii.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpb7ys82ii.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb7ys82ii.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpb7ys82ii.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpb7ys82ii.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb7ys82ii.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae0f5hzj.cpp: In function 'int main()':\n/tmp/tmpae0f5hzj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpae0f5hzj.cpp:2:\n/tmp/tmpae0f5hzj.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpae0f5hzj.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpae0f5hzj.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpae0f5hzj.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpae0f5hzj.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpae0f5hzj.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmxy93f6.cpp: In function 'int main()':\n/tmp/tmpxmxy93f6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxmxy93f6.cpp:2:\n/tmp/tmpxmxy93f6.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpxmxy93f6.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpxmxy93f6.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpxmxy93f6.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpxmxy93f6.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpxmxy93f6.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjaxrs8v.cpp: In function 'int main()':\n/tmp/tmpcjaxrs8v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcjaxrs8v.cpp:2:\n/tmp/tmpcjaxrs8v.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpcjaxrs8v.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpcjaxrs8v.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpcjaxrs8v.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcjaxrs8v.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpcjaxrs8v.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpcjaxrs8v.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcjaxrs8v.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long d = 2; d * d <= n; d++) {\n        while (n % d == 0)\
    \ {\n            factors.push_back(d);\n            n /= d;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmqplyp4.cpp: In function 'int main()':\n/tmp/tmpvmqplyp4.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmqplyp4.cpp:2:\n/tmp/tmpvmqplyp4.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpvmqplyp4.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpvmqplyp4.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpvmqplyp4.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmqplyp4.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpvmqplyp4.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpvmqplyp4.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmqplyp4.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehe7f9ev.cpp: In function 'int main()':\n/tmp/tmpehe7f9ev.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpehe7f9ev.cpp:2:\n/tmp/tmpehe7f9ev.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpehe7f9ev.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpehe7f9ev.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpehe7f9ev.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpehe7f9ev.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpehe7f9ev.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpehe7f9ev.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpehe7f9ev.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long d = 2; d * d <= n; d++) {\n        while (n % d == 0)\
    \ {\n            factors.push_back(d);\n            n /= d;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmqplyp4.cpp: In function 'int main()':\n/tmp/tmpvmqplyp4.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmqplyp4.cpp:2:\n/tmp/tmpvmqplyp4.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpvmqplyp4.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpvmqplyp4.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpvmqplyp4.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmqplyp4.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpvmqplyp4.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpvmqplyp4.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmqplyp4.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n\tstd::vector<long> factors;\n\tfor (long\
    \ i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6zwr5bf.cpp: In function 'int main()':\n/tmp/tmps6zwr5bf.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps6zwr5bf.cpp:2:\n/tmp/tmps6zwr5bf.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmps6zwr5bf.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmps6zwr5bf.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmps6zwr5bf.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps6zwr5bf.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmps6zwr5bf.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmps6zwr5bf.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps6zwr5bf.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibpyhqn7.cpp: In function 'int main()':\n/tmp/tmpibpyhqn7.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibpyhqn7.cpp:2:\n/tmp/tmpibpyhqn7.cpp:25:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpibpyhqn7.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpibpyhqn7.cpp:25:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpibpyhqn7.cpp:25:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibpyhqn7.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpibpyhqn7.cpp:26:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpibpyhqn7.cpp:26:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpibpyhqn7.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n    }\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptep2r08h.cpp: In function 'int main()':\n/tmp/tmptep2r08h.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptep2r08h.cpp:2:\n/tmp/tmptep2r08h.cpp:25:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmptep2r08h.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmptep2r08h.cpp:25:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmptep2r08h.cpp:25:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptep2r08h.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmptep2r08h.cpp:26:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmptep2r08h.cpp:26:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptep2r08h.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmxy93f6.cpp: In function 'int main()':\n/tmp/tmpxmxy93f6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxmxy93f6.cpp:2:\n/tmp/tmpxmxy93f6.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpxmxy93f6.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpxmxy93f6.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpxmxy93f6.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpxmxy93f6.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpxmxy93f6.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjr3xzh_.cpp: In function 'int main()':\n/tmp/tmptjr3xzh_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptjr3xzh_.cpp:2:\n/tmp/tmptjr3xzh_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmptjr3xzh_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmptjr3xzh_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmptjr3xzh_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptjr3xzh_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmptjr3xzh_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmptjr3xzh_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptjr3xzh_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long d = 2; d * d <= n; d++) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv6963k5.cpp: In function 'int main()':\n/tmp/tmpkv6963k5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkv6963k5.cpp:2:\n/tmp/tmpkv6963k5.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpkv6963k5.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpkv6963k5.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpkv6963k5.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkv6963k5.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpkv6963k5.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpkv6963k5.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkv6963k5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjr3xzh_.cpp: In function 'int main()':\n/tmp/tmptjr3xzh_.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptjr3xzh_.cpp:2:\n/tmp/tmptjr3xzh_.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmptjr3xzh_.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmptjr3xzh_.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmptjr3xzh_.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptjr3xzh_.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmptjr3xzh_.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmptjr3xzh_.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptjr3xzh_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d = d + 1;\n        if (d * d > n) {\n\
    \            if (n > 1) factors.push_back(n);\n            break;\n        }\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1t4q2f3.cpp: In function 'int main()':\n/tmp/tmp_1t4q2f3.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_1t4q2f3.cpp:2:\n/tmp/tmp_1t4q2f3.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_1t4q2f3.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_1t4q2f3.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_1t4q2f3.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_1t4q2f3.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_1t4q2f3.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_1t4q2f3.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_1t4q2f3.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ res;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n\
    \            res.push_back(i);\n            n /= i;\n        }\n    }\n    if\
    \ (n > 1) {\n        res.push_back(n);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkaej26n0.cpp: In function 'int main()':\n/tmp/tmpkaej26n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkaej26n0.cpp:2:\n/tmp/tmpkaej26n0.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpkaej26n0.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpkaej26n0.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpkaej26n0.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkaej26n0.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpkaej26n0.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpkaej26n0.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkaej26n0.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d = d + 1;\n        if (d * d > n) {\n\
    \            if (n > 1) factors.push_back(n);\n            break;\n        }\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1t4q2f3.cpp: In function 'int main()':\n/tmp/tmp_1t4q2f3.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_1t4q2f3.cpp:2:\n/tmp/tmp_1t4q2f3.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_1t4q2f3.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_1t4q2f3.cpp:30:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_1t4q2f3.cpp:30:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_1t4q2f3.cpp:31:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_1t4q2f3.cpp:31:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_1t4q2f3.cpp:31:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_1t4q2f3.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpub66a20t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehe7f9ev.cpp: In function 'int main()':\n/tmp/tmpehe7f9ev.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpehe7f9ev.cpp:2:\n/tmp/tmpehe7f9ev.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpehe7f9ev.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpehe7f9ev.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpehe7f9ev.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpehe7f9ev.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpehe7f9ev.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpehe7f9ev.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpehe7f9ev.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    if\
    \ (n == 1) {\n        factors.push_back(1);\n        return factors;\n    }\n\
    \    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n         \
    \   factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprvr4sq5v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long divisor = 2; divisor <= n; divisor++) {\n        while (n % divisor ==\
    \ 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n \
    \       }\n    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpflsfccd9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0nubph9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        res.push_back(n);\n\
    \    return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpimpkm74l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5ao0q45q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n\tstd::vector<long> factors;\n\tfor (long\
    \ i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors.push_back(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6zwr5bf.cpp: In function 'int main()':\n/tmp/tmps6zwr5bf.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps6zwr5bf.cpp:2:\n/tmp/tmps6zwr5bf.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmps6zwr5bf.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmps6zwr5bf.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmps6zwr5bf.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps6zwr5bf.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmps6zwr5bf.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmps6zwr5bf.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps6zwr5bf.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    while\
    \ (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n \
    \   for (long i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n = n / i;\n        }\n    }\n\
    \    if (n > 2)\n        factors.push_back(n);\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1el3xag9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ result;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            result.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        result.push_back(n);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpinfebw8a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ divisor = 2;\n    while (n > 1) {\n        while (n % divisor == 0) {\n    \
    \        factors.push_back(divisor);\n            n /= divisor;\n        }\n \
    \       divisor++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk4txm27e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae0f5hzj.cpp: In function 'int main()':\n/tmp/tmpae0f5hzj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpae0f5hzj.cpp:2:\n/tmp/tmpae0f5hzj.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpae0f5hzj.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpae0f5hzj.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpae0f5hzj.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpae0f5hzj.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpae0f5hzj.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long d = 2; d * d <= n; d++) {\n        while (n % d == 0)\
    \ {\n            factors.push_back(d);\n            n /= d;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmqplyp4.cpp: In function 'int main()':\n/tmp/tmpvmqplyp4.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmqplyp4.cpp:2:\n/tmp/tmpvmqplyp4.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpvmqplyp4.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpvmqplyp4.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpvmqplyp4.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmqplyp4.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpvmqplyp4.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpvmqplyp4.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmqplyp4.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    if\
    \ (n == 1) {\n        factors.push_back(1);\n        return factors;\n    }\n\
    \    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n  \
    \  }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpimkdl40t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    if\
    \ (n == 1) {\n        factors.push_back(1);\n        return factors;\n    }\n\
    \    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n        \
    \    factors.push_back(i);\n            n /= i;\n        }\n        i++;\n   \
    \ }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmposzy_42u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae0f5hzj.cpp: In function 'int main()':\n/tmp/tmpae0f5hzj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpae0f5hzj.cpp:2:\n/tmp/tmpae0f5hzj.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpae0f5hzj.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpae0f5hzj.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpae0f5hzj.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpae0f5hzj.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpae0f5hzj.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmxy93f6.cpp: In function 'int main()':\n/tmp/tmpxmxy93f6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxmxy93f6.cpp:2:\n/tmp/tmpxmxy93f6.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpxmxy93f6.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpxmxy93f6.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpxmxy93f6.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpxmxy93f6.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpxmxy93f6.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxmxy93f6.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n        d = d + 1;\n        if (d * d > n) {\n\
    \            if (n > 1) {\n                factors.push_back(n);\n           \
    \ }\n            break;\n        }\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7ys82ii.cpp: In function 'int main()':\n/tmp/tmpb7ys82ii.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb7ys82ii.cpp:2:\n/tmp/tmpb7ys82ii.cpp:32:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpb7ys82ii.cpp:32:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpb7ys82ii.cpp:32:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpb7ys82ii.cpp:32:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb7ys82ii.cpp:33:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpb7ys82ii.cpp:33:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpb7ys82ii.cpp:33:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb7ys82ii.cpp:34:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1)\n        factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae0f5hzj.cpp: In function 'int main()':\n/tmp/tmpae0f5hzj.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpae0f5hzj.cpp:2:\n/tmp/tmpae0f5hzj.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpae0f5hzj.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpae0f5hzj.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpae0f5hzj.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpae0f5hzj.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpae0f5hzj.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpae0f5hzj.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ei6ym57.cpp: In function 'int main()':\n/tmp/tmp5ei6ym57.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ei6ym57.cpp:2:\n/tmp/tmp5ei6ym57.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp5ei6ym57.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp5ei6ym57.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp5ei6ym57.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp5ei6ym57.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp5ei6ym57.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ei6ym57.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long d = 2; d * d <= n; d++) {\n        while (n % d == 0) {\n            factors.push_back(d);\n\
    \            n /= d;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv6963k5.cpp: In function 'int main()':\n/tmp/tmpkv6963k5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkv6963k5.cpp:2:\n/tmp/tmpkv6963k5.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpkv6963k5.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpkv6963k5.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpkv6963k5.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkv6963k5.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpkv6963k5.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpkv6963k5.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkv6963k5.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpprh1v6j_.cpp: In function 'int main()':\n/tmp/tmpprh1v6j_.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpprh1v6j_.cpp:2:\n/tmp/tmpprh1v6j_.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpprh1v6j_.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpprh1v6j_.cpp:26:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpprh1v6j_.cpp:26:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpprh1v6j_.cpp:27:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpprh1v6j_.cpp:27:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpprh1v6j_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    long\
    \ divisor = 2;\n    while (n > 1) {\n        while (n % divisor == 0) {\n    \
    \        factors.push_back(divisor);\n            n /= divisor;\n        }\n \
    \       divisor += 1;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcb7tbxru.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> result;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprk0cp40_.cpp: In function 'int main()':\n/tmp/tmprk0cp40_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprk0cp40_.cpp:2:\n/tmp/tmprk0cp40_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmprk0cp40_.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmprk0cp40_.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmprk0cp40_.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmprk0cp40_.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmprk0cp40_.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprk0cp40_.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> res;\n    for (long\
    \ i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            res.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2,\
    \ (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3,\
    \ (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_augti2u.cpp: In function 'int main()':\n/tmp/tmp_augti2u.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_augti2u.cpp:2:\n/tmp/tmp_augti2u.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmp_augti2u.cpp:27:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmp_augti2u.cpp:27:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmp_augti2u.cpp:27:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmp_augti2u.cpp:28:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmp_augti2u.cpp:28:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_augti2u.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ factors;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n\
    \    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
    \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
    \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
    \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
    \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
    \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehe7f9ev.cpp: In function 'int main()':\n/tmp/tmpehe7f9ev.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpehe7f9ev.cpp:2:\n/tmp/tmpehe7f9ev.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpehe7f9ev.cpp:28:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpehe7f9ev.cpp:28:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpehe7f9ev.cpp:28:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpehe7f9ev.cpp:29:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpehe7f9ev.cpp:29:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpehe7f9ev.cpp:29:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpehe7f9ev.cpp:30:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime\
    \ factors of given integer in the order from smallest to largest.\n// Each of\
    \ the factors should be vectored number of times corresponding to how many times\
    \ it appeares in factorization.\n// Input number should be equal to the product\
    \ of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2,\
    \ (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n\
    // >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\n\
    std::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for\
    \ (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249))\
    \ == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19,\
    \ (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3,\
    \ (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay1zync4.cpp: In function 'int main()':\n/tmp/tmpay1zync4.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = factorize;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay1zync4.cpp:2:\n/tmp/tmpay1zync4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n\
    \                         ^\n/tmp/tmpay1zync4.cpp:24:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((2)) == (std::vector<long>({(long)2})));\n            \
    \                                    ^\n/tmp/tmpay1zync4.cpp:24:58: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((2)) == (std::vector<long>({(long)2})));\n \
    \                                                         ^\n/tmp/tmpay1zync4.cpp:24:58:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:25:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n   \
    \                                             ^\n/tmp/tmpay1zync4.cpp:25:67: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n\
    \                                                                   ^\n/tmp/tmpay1zync4.cpp:25:67:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay1zync4.cpp:26:48: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n\
    \                           "
  stdout: ''
