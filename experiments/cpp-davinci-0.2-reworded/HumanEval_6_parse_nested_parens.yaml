name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
  \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
  \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
  \ paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
  \ (std::vector<long>({(long)4})));\n}\n"
completions: ["    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : item) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = std::max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   }\n        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_nesting\
    \ = 0;\n        long current_nesting = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                current_nesting++;\n             \
    \   max_nesting = std::max(max_nesting, current_nesting);\n            } else\
    \ if (c == ')') {\n                current_nesting--;\n            }\n       \
    \ }\n        result.push_back(max_nesting);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        assert(current_nesting == 0);\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_nesting = 0;\n        long nesting = 0;\n        for\
    \ (char c : item) {\n            if (c == '(') {\n                nesting++;\n\
    \                max_nesting = std::max(max_nesting, nesting);\n            }\
    \ else if (c == ')') {\n                nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_nesting = 0;\n  \
    \      long current_nesting = 0;\n        for (char c : token) {\n           \
    \ if (c == '(') {\n                current_nesting++;\n                max_nesting\
    \ = std::max(max_nesting, current_nesting);\n            } else if (c == ')')\
    \ {\n                current_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> stk;\n\
    \        long max_depth = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                stk.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)stk.size());\n            } else if (c == ')') {\n                stk.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_level = 0;\n        long current_level = 0;\n        for\
    \ (char c : paren_group) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = std::max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            }\n  \
    \      }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> st;\n\
    \        long max_depth = 0;\n        for (auto c : item) {\n            if (c\
    \ == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                level++;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n   \
    \     for (char c : item) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> stk;\n        long max_depth = 0;\n      \
    \  for (char c : token) {\n            if (c == '(') {\n                stk.push(c);\n\
    \                max_depth = std::max(max_depth, (long)stk.size());\n        \
    \    } else if (c == ')') {\n                stk.pop();\n            }\n     \
    \   }\n        result.push_back(max_depth);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n  \
    \  for (auto c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n   \
    \     for (auto c : item) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long current_depth = 0;\n        for (char c : token) {\n      \
    \      if (c == '(') {\n                current_depth++;\n                max_depth\
    \ = std::max(max_depth, current_depth);\n            } else if (c == ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        assert(current_depth == 0);\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> st;\n\
    \        long max_depth = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                assert(!st.empty());\n\
    \                st.pop();\n            }\n        }\n        assert(st.empty());\n\
    \        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_level = 0;\n      \
    \  long level = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                level++;\n                max_level = std::max(max_level, level);\n\
    \            } else if (c == ')') {\n                level--;\n            }\n\
    \        }\n        result.push_back(max_level);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                level++;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_nesting\
    \ = 0;\n        long curr_nesting = 0;\n        for (char c : token) {\n     \
    \       if (c == '(') {\n                curr_nesting++;\n                max_nesting\
    \ = std::max(max_nesting, curr_nesting);\n            } else if (c == ')') {\n\
    \                curr_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> stk;\n        long max_depth = 0;\n      \
    \  for (char c : item) {\n            if (c == '(') {\n                stk.push(c);\n\
    \                max_depth = std::max(max_depth, (long)stk.size());\n        \
    \    } else if (c == ')') {\n                stk.pop();\n            }\n     \
    \   }\n        result.push_back(max_depth);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> st;\n\
    \        long max_depth = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n   \
    \     for (char c : item) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        assert(depth == 0);\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (auto c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_level = 0;\n\
    \        long level = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting = 0;\n        long current_nesting\
    \ = 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n  \
    \              current_nesting++;\n                max_nesting = std::max(max_nesting,\
    \ current_nesting);\n            } else if (c == ')') {\n                current_nesting--;\n\
    \            }\n        }\n        result.push_back(max_nesting);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (auto c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : item) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = std::max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   }\n        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long current_depth = 0;\n        for (auto c : token) {\n      \
    \      if (c == '(') {\n                current_depth++;\n                max_depth\
    \ = std::max(max_depth, current_depth);\n            } else if (c == ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> stk;\n\
    \        long max_depth = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                stk.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)stk.size());\n            } else if (c == ')') {\n                stk.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (auto c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : item) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        // std::cout << item << std::endl;\n\
    \        long max_nesting = 0;\n        long current_nesting = 0;\n        for\
    \ (auto c : item) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = std::max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   }\n        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string s;\n    while (ss >> s) {\n        long max_level\
    \ = 0;\n        long level = 0;\n        for (char c : s) {\n            if (c\
    \ == '(') {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        int max_nesting = 0;\n     \
    \   int current_nesting = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                current_nesting++;\n                max_nesting =\
    \ std::max(max_nesting, current_nesting);\n            } else if (c == ')') {\n\
    \                current_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : item) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long nesting = 0;\n        for\
    \ (char c : token) {\n            if (c == '(') {\n                nesting++;\n\
    \                max_nesting = std::max(max_nesting, nesting);\n            }\
    \ else if (c == ')') {\n                nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> st;\n   \
    \     long max_depth = 0;\n        for (char c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : item) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> stk;\n  \
    \      long max_depth = 0;\n        for (auto c : token) {\n            if (c\
    \ == '(') {\n                stk.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)stk.size());\n            } else if (c == ')') {\n                stk.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> stk;\n        long max_depth = 0;\n      \
    \  long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n        for\
    \ (auto c : paren_group) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> s;\n        long max_depth = 0;\n        for\
    \ (char c : item) {\n            if (c == '(') {\n                s.push(c);\n\
    \                max_depth = std::max(max_depth, (long)s.size());\n          \
    \  } else if (c == ')') {\n                s.pop();\n            }\n        }\n\
    \        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n      \
    \  long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        int max_depth =\
    \ 0;\n        int depth = 0;\n        for (int i = 0; i < token.size(); i++) {\n\
    \            if (token[i] == '(') {\n                depth++;\n              \
    \  max_depth = std::max(max_depth, depth);\n            } else if (token[i] ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> s;\n        long max_depth = 0;\n        for\
    \ (char c : token) {\n            if (c == '(') {\n                s.push(c);\n\
    \                max_depth = std::max(max_depth, (long)s.size());\n          \
    \  } else if (c == ')') {\n                s.pop();\n            }\n        }\n\
    \        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long current_depth = 0;\n        for (char c : token) {\n            if (c\
    \ == '(') {\n                current_depth++;\n                max_depth = std::max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string curr_paren;\n    while (ss >> curr_paren) {\n        long max_nesting\
    \ = 0;\n        long curr_nesting = 0;\n        for (char c : curr_paren) {\n\
    \            if (c == '(') {\n                curr_nesting++;\n              \
    \  max_nesting = std::max(max_nesting, curr_nesting);\n            } else if (c\
    \ == ')') {\n                curr_nesting--;\n            }\n        }\n     \
    \   result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string paren_group;\n\
    \    while (std::getline(ss, paren_group, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : paren_group) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> st;\n\
    \        long max_depth = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long current_depth = 0;\n        for (char c : token) {\n            if (c\
    \ == '(') {\n                current_depth++;\n                max_depth = std::max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_depth = 0;\n        long depth = 0;\n        for (char c\
    \ : paren_group) {\n            if (c == '(') {\n                depth++;\n  \
    \              max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_level = 0;\n        long current_level = 0;\n    \
    \    for (char c : item) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = std::max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            }\n  \
    \      }\n        result.push_back(max_level);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : paren_group)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> stk;\n        long max_depth = 0;\n      \
    \  for (char c : item) {\n            if (c == '(') {\n                stk.push(c);\n\
    \                max_depth = std::max(max_depth, (long)stk.size());\n        \
    \    } else if (c == ')') {\n                stk.pop();\n            }\n     \
    \   }\n        result.push_back(max_depth);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                level++;\n       \
    \         max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n\
    \        for (char c : paren_group) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = std::max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            }\n \
    \       }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \ std::vector<long> result;\n  std::stringstream ss(paren_string);\n  std::string\
    \ token;\n  while (std::getline(ss, token, ' ')) {\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (char c : token) {\n      if (c == '(') {\n    \
    \    depth++;\n        max_depth = std::max(max_depth, depth);\n      } else if\
    \ (c == ')') {\n        depth--;\n      }\n    }\n    result.push_back(max_depth);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "\tstd::vector<long> result;\n\tstd::stringstream\
    \ ss(paren_string);\n\tstd::string item;\n\twhile (std::getline(ss, item, ' '))\
    \ {\n\t\tlong max_level = 0;\n\t\tlong level = 0;\n\t\tfor (char c : item) {\n\
    \t\t\tif (c == '(') {\n\t\t\t\t++level;\n\t\t\t\tmax_level = std::max(max_level,\
    \ level);\n\t\t\t}\n\t\t\telse if (c == ')') {\n\t\t\t\t--level;\n\t\t\t}\n\t\t\
    }\n\t\tresult.push_back(max_level);\n\t}\n\treturn result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        result.push_back(parse_nested_parens_helper(item));\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n      \
    \  long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            depth\
    \ += 1;\n            max_depth = std::max(max_depth, depth);\n        } else if\
    \ (c == ')') {\n            depth -= 1;\n        } else if (c == ' ') {\n    \
    \        result.push_back(max_depth);\n            max_depth = 0;\n          \
    \  depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_level =\
    \ 0;\n        long level = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        std::stack<char> paren_stack;\n\
    \        long max_depth = 0;\n        for (char c : item) {\n            if (c\
    \ == '(') {\n                paren_stack.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)paren_stack.size());\n            } else if (c ==\
    \ ')') {\n                paren_stack.pop();\n            }\n        }\n     \
    \   result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (auto c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string group;\n    while (std::getline(ss, group,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : group) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                st.push(c);\n    \
    \            depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                if (st.empty()) {\n     \
    \               assert(false);\n                }\n                st.pop();\n\
    \                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        //std::cout << \"item: \" << item << std::endl;\n        int\
    \ count = 0;\n        int max_count = 0;\n        for (int i = 0; i < item.length();\
    \ i++) {\n            if (item[i] == '(') {\n                count++;\n      \
    \          if (count > max_count) {\n                    max_count = count;\n\
    \                }\n            } else if (item[i] == ')') {\n               \
    \ count--;\n            }\n        }\n        result.push_back(max_count);\n \
    \   }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long nesting = 0;\n        for\
    \ (char c : token) {\n            if (c == '(') {\n                nesting++;\n\
    \                max_nesting = std::max(max_nesting, nesting);\n            }\
    \ else if (c == ')') {\n                nesting--;\n            }\n        }\n\
    \        result.push_back(max_nesting);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string temp;\n  \
    \  while (ss >> temp) {\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        for (auto c : temp) {\n            if (c == '(') {\n         \
    \       current_depth++;\n                max_depth = std::max(max_depth, current_depth);\n\
    \            } else if (c == ')') {\n                current_depth--;\n      \
    \      }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long current_depth = 0;\n        for (char c : token) {\n      \
    \      if (c == '(') {\n                current_depth++;\n                max_depth\
    \ = std::max(max_depth, current_depth);\n            } else if (c == ')') {\n\
    \                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_depth = 0;\n        long curr_depth =\
    \ 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n    \
    \            curr_depth++;\n                max_depth = std::max(max_depth, curr_depth);\n\
    \            } else if (c == ')') {\n                curr_depth--;\n         \
    \   }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (auto c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_level = 0;\n    \
    \    long level = 0;\n        for (auto c : token) {\n            if (c == '(')\
    \ {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        assert(level == 0);\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> stk;\n        long max_depth = 0;\n      \
    \  for (char c : item) {\n            if (c == '(') {\n                stk.push(c);\n\
    \                max_depth = std::max(max_depth, (long)stk.size());\n        \
    \    } else if (c == ')') {\n                stk.pop();\n            }\n     \
    \   }\n        result.push_back(max_depth);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    // Write your code here\n    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while(std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for(int i = 0; i < token.length(); i++) {\n            if(token[i] == '(') {\n\
    \                st.push(token[i]);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if(token[i] == ')') {\n              \
    \  st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (int\
    \ i = 0; i < token.size(); i++) {\n            if (token[i] == '(') {\n      \
    \          depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (token[i] == ')') {\n                depth--;\n       \
    \     }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ group;\n    while (std::getline(ss, group, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : group) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        //std::cout\
    \ << token << '\\n';\n        std::stack<char> st;\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (auto c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                depth++;\n            \
    \    max_depth = std::max(max_depth, depth);\n            } else if (c == ')')\
    \ {\n                if (st.empty()) {\n                    std::cout << \"Invalid\
    \ input\" << std::endl;\n                    return result;\n                }\n\
    \                st.pop();\n                depth--;\n            }\n        }\n\
    \        if (!st.empty()) {\n            std::cout << \"Invalid input\" << std::endl;\n\
    \            return result;\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "\tstd::vector<long> result;\n\tstd::stringstream\
    \ ss(paren_string);\n\tstd::string token;\n\twhile (std::getline(ss, token, '\
    \ ')) {\n\t\tlong max_nesting = 0;\n\t\tlong current_nesting = 0;\n\t\tfor (auto\
    \ c : token) {\n\t\t\tif (c == '(') {\n\t\t\t\tcurrent_nesting++;\n\t\t\t\tmax_nesting\
    \ = std::max(max_nesting, current_nesting);\n\t\t\t}\n\t\t\telse if (c == ')')\
    \ {\n\t\t\t\tcurrent_nesting--;\n\t\t\t}\n\t\t}\n\t\tresult.push_back(max_nesting);\n\
    \t}\n\treturn result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (ss >> paren_group)\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        assert(current_nesting == 0);\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::stringstream\
    \ ss(paren_string);\n  std::string item;\n  while (std::getline(ss, item, ' '))\
    \ {\n    long max_depth = 0;\n    long current_depth = 0;\n    for (char c : item)\
    \ {\n      if (c == '(') {\n        current_depth++;\n        max_depth = std::max(max_depth,\
    \ current_depth);\n      } else if (c == ')') {\n        current_depth--;\n  \
    \    }\n    }\n    result.push_back(max_depth);\n  }\n  return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> stk;\n\
    \        long max_depth = 0;\n        for (auto c : item) {\n            if (c\
    \ == '(') {\n                stk.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)stk.size());\n            } else if (c == ')') {\n                stk.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "\tstd::vector<long> result;\n\t// TODO: Implement this function.\n\
    \t// Hint: You can use std::stringstream to parse the string.\n\t// Hint: You\
    \ can use std::stack to keep track of the current nesting level.\n\tstd::stringstream\
    \ ss(paren_string);\n\tstd::string token;\n\twhile (std::getline(ss, token, '\
    \ ')) {\n\t\tstd::stack<char> s;\n\t\tlong max_level = 0;\n\t\tfor (char c : token)\
    \ {\n\t\t\tif (c == '(') {\n\t\t\t\ts.push(c);\n\t\t\t\tmax_level = std::max(max_level,\
    \ (long)s.size());\n\t\t\t}\n\t\t\telse if (c == ')') {\n\t\t\t\tif (s.empty())\
    \ {\n\t\t\t\t\tmax_level = -1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t\tif (!s.empty()) {\n\t\t\tmax_level = -1;\n\t\t}\n\t\tresult.push_back(max_level);\n\
    \t}\n\treturn result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        result.push_back(parse_nested_parens_helper(item));\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ stk;\n        long max_depth = 0;\n        for (char c : item) {\n         \
    \   if (c == '(') {\n                stk.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)stk.size());\n            } else if (c == ')') {\n\
    \                stk.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long curr_depth = 0;\n       \
    \ for (char c : item) {\n            if (c == '(') {\n                curr_depth++;\n\
    \                max_depth = std::max(max_depth, curr_depth);\n            } else\
    \ if (c == ')') {\n                curr_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (int i = 0; i < token.size(); i++)\
    \ {\n            if (token[i] == '(') {\n                depth++;\n          \
    \      max_depth = std::max(max_depth, depth);\n            } else if (token[i]\
    \ == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    std::stringstream ss(paren_string);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        long max_level = 0;\n        long level\
    \ = 0;\n        for (char c : item) {\n            if (c == '(') {\n         \
    \       level++;\n                max_level = std::max(max_level, level);\n  \
    \          } else if (c == ')') {\n                level--;\n            }\n \
    \       }\n        res.push_back(max_level);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n      \
    \  long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        assert(depth == 0);\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nest = 0;\n        long nest = 0;\n \
    \       for (char c : paren_group) {\n            if (c == '(') {\n          \
    \      nest++;\n                max_nest = std::max(max_nest, nest);\n       \
    \     } else if (c == ')') {\n                nest--;\n            }\n       \
    \ }\n        result.push_back(max_nest);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_level = 0;\n    \
    \    long level = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n      \
    \  long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> stk;\n        long max_depth = 0;\n      \
    \  for (char c : item) {\n            if (c == '(') {\n                stk.push(c);\n\
    \                max_depth = std::max(max_depth, (long)stk.size());\n        \
    \    } else if (c == ')') {\n                stk.pop();\n            }\n     \
    \   }\n        result.push_back(max_depth);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string paren_group;\n    while (std::getline(ss,\
    \ paren_group, ' ')) {\n        long max_nesting = 0;\n        long curr_nesting\
    \ = 0;\n        for (char c : paren_group) {\n            if (c == '(') {\n  \
    \              curr_nesting++;\n                max_nesting = std::max(max_nesting,\
    \ curr_nesting);\n            } else if (c == ')') {\n                curr_nesting--;\n\
    \            }\n        }\n        result.push_back(max_nesting);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long curr_nesting = 0;\n   \
    \     for (char c : token) {\n            if (c == '(') {\n                curr_nesting++;\n\
    \                max_nesting = std::max(max_nesting, curr_nesting);\n        \
    \    } else if (c == ')') {\n                curr_nesting--;\n            }\n\
    \        }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long depth = 0;\n        for (char c : item) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         if (depth > max_depth) {\n                    max_depth = depth;\n \
    \               }\n            } else if (c == ')') {\n                depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ s;\n        long max_depth = 0;\n        for (char c : item) {\n           \
    \ if (c == '(') {\n                s.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)s.size());\n            } else if (c == ')') {\n                assert(!s.empty());\n\
    \                s.pop();\n            }\n        }\n        assert(s.empty());\n\
    \        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_level = 0;\n      \
    \  long level = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                level++;\n                max_level = std::max(max_level, level);\n\
    \            } else if (c == ')') {\n                level--;\n            }\n\
    \        }\n        result.push_back(max_level);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        int max_depth =\
    \ 0;\n        int current_depth = 0;\n        for (int i = 0; i < token.length();\
    \ i++) {\n            if (token[i] == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (token[i] == ')') {\n                current_depth--;\n          \
    \  }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n\
    \        long current_depth = 0;\n        for (char c : item) {\n            if\
    \ (c == '(') {\n                current_depth++;\n                max_depth =\
    \ std::max(max_depth, current_depth);\n            } else if (c == ')') {\n  \
    \              current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
