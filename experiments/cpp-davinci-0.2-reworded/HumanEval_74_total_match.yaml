name: HumanEval_74_total_match
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ two vectors of strings and returns the vector that has \n// total number of chars\
  \ in the all strings of the vector less than the other vector.\n// if the two vectors\
  \ have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()),\
  \ (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
  Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"\
  , (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"\
  hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
  3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
  4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
  \ lst2) {\n"
tests: "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
  \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
  , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\",\
  \ (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
  3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
  4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
  }))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
  , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
  hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
  \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
  \ == (std::vector<std::string>()));\n}\n"
completions: ["\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2 = 0;\n\
    \    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else if(sum1 >\
    \ sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n   \
    \ }", "\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\
    \ {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++)\
    \ {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2 = 0;\n\
    \    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n     \
    \   return lst2;\n    }", "\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0;\
    \ i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0;\
    \ i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2)\
    \ {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}", "\tint sum1 = 0;\n\
    \tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t\
    }\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t\
    }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }", "    int count1 = 0;\n    int\
    \ count2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n        count1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        count2 += lst2[i].size();\n\
    \    }\n    if(count1 < count2) {\n        return lst1;\n    }\n    else {\n \
    \       return lst2;\n    }", "\tint l1 = 0, l2 = 0;\n\tfor (auto i : lst1)\n\t\
    \tl1 += i.size();\n\tfor (auto i : lst2)\n\t\tl2 += i.size();\n\tif (l1 < l2)\n\
    \t\treturn lst1;\n\telse if (l1 > l2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;",
  "\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tl1 += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tl2 += lst2[i].size();\n\t\
    }\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}",
  "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\
    \ {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }", "    int sum1 = 0;\n    int\
    \ sum2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n     \
    \   return lst2;\n    }", "    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return\
    \ lst1;\n    }\n    else {\n        return lst2;\n    }", "\tint sum1 = 0;\n\t\
    int sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\
    \t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t\
    }\n\tif (sum1 < sum2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;", "\tint sum1\
    \ = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 +=\
    \ lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 +=\
    \ lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i =\
    \ 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int\
    \ i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n    }\n   \
    \ if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n\
    \    }", "\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}", "    int sum1 = 0;\n    int sum2\
    \ = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n        sum1 += lst1[i].size();\n\
    \    }\n    for(int i = 0; i < lst2.size(); i++) {\n        sum2 += lst2[i].size();\n\
    \    }\n    if(sum1 == sum2) {\n        return lst1;\n    }\n    else if(sum1\
    \ < sum2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n \
    \   }", "    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }", "\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}"]
stop_tokens:
- "\n}"
