name: HumanEval_127_intersection
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n\
  // where each interval is a pair of integers. For example, interval = (start, end)\
  \ = (1, 2).\n// The given intervals are closed which means that the interval (start,\
  \ end)\n// includes both start and end.\n// For each given interval, it is assumed\
  \ that its start is less or equal its end.\n// Your task is to determine whether\
  \ the length of intersection of these two \n// intervals is a prime number.\n//\
  \ Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which\
  \ its length is 1, which not a prime number.\n// If the length of the intersection\
  \ is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two\
  \ intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>>\
  \ intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n\
  // >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\"\
  )\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n//\
  \ (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long,\
  \ long> interval2) {\n"
tests: "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1,\
  \ 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3,\
  \ -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2,\
  \ 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11,\
  \ 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2,\
  \ -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
completions: ["    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i =\
    \ 2; i < len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(len); i++) {\n\
    \        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - start2\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i < length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    // your code here\n  \
    \  long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long len = std::min(end1, end2) - start2 + 1;\n    if (len <= 1) {\n       \
    \ return \"NO\";\n    }\n    for (long i = 2; i * i <= len; i++) {\n        if\
    \ (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"\
    YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len < 2) {\n        return \"NO\";\n    }\n    for (long i = 2;\
    \ i <= std::sqrt(len); i++) {\n        if (len % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    if (start == 1) {\n        return \"\
    NO\";\n    }\n    for (long i = 2; i <= sqrt(end); i++) {\n        if (start %\
    \ i == 0 || end % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - start2\
    \ + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i <= std::sqrt(length); ++i) {\n        if (length % i == 0) {\n      \
    \      return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length; i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(length); i++) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start >= end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start;\n    if (length == 1) {\n   \
    \     return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long len = end - start + 1;\n    if\
    \ (len == 1) return \"NO\";\n    for (long i = 2; i <= sqrt(len); i++) {\n   \
    \     if (len % i == 0) return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long length = std::min(end1, end2) - start2 + 1;\n    if (length <= 1) {\n \
    \       return \"NO\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    long len = end - start + 1;\n    if (len == 1) {\n        return\
    \ \"YES\";\n    }\n    for (long i = 2; i * i <= len; ++i) {\n        if (len\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    long len = end - start + 1;\n    if (len\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(len);\
    \ i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 2) {\n     \
    \   return \"YES\";\n    }\n    for (long i = 2; i * i <= len; i++) {\n      \
    \  if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";"]
stop_tokens:
- "\n}"
