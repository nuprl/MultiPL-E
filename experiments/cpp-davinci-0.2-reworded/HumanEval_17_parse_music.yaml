name: HumanEval_17_parse_music
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string representing musical notes in a special ASCII format.\n// Your task is\
  \ to parse this string and return vector of integers corresponding to how many beats\
  \ does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four\
  \ beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one\
  \ beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
  \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
  \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
  \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
  \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
  )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
  \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2,\
  \ (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"
completions: ["    std::vector<long> beats;\n    long count = 0;\n    for (int i =\
    \ 0; i < music_string.length(); i++) {\n        if (music_string[i] == 'o') {\n\
    \            if (music_string[i + 1] == ' ') {\n                beats.push_back(4);\n\
    \            } else if (music_string[i + 1] == '|') {\n                beats.push_back(2);\n\
    \            }\n        } else if (music_string[i] == '.') {\n            if (music_string[i\
    \ + 1] == '|') {\n                beats.push_back(1);\n            }\n       \
    \ }\n    }\n    return beats;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(music_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        if (token == \"o\") {\n            result.push_back(4);\n \
    \       } else if (token == \"o|\") {\n            result.push_back(2);\n    \
    \    } else if (token == \".|\") {\n            result.push_back(1);\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(music_string);\n    std::string note;\n    while (ss >> note) {\n       \
    \ if (note == \"o\") {\n            result.push_back(4);\n        } else if (note\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (note == \"\
    .|\") {\n            result.push_back(1);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(music_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    o\") {\n            result.push_back(4);\n        } else if (token == \"o|\")\
    \ {\n            result.push_back(2);\n        } else if (token == \".|\") {\n\
    \            result.push_back(1);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::stringstream ss(music_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    o\") {\n            result.push_back(4);\n        } else if (token == \"o|\")\
    \ {\n            result.push_back(2);\n        } else if (token == \".|\") {\n\
    \            result.push_back(1);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::stringstream ss(music_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    o\") {\n            result.push_back(4);\n        } else if (token == \"o|\")\
    \ {\n            result.push_back(2);\n        } else if (token == \".|\") {\n\
    \            result.push_back(1);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::stringstream ss(music_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    o\") {\n            result.push_back(4);\n        } else if (token == \"o|\")\
    \ {\n            result.push_back(2);\n        } else if (token == \".|\") {\n\
    \            result.push_back(1);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::stringstream ss(music_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    o\") {\n            result.push_back(4);\n        } else if (token == \"o|\")\
    \ {\n            result.push_back(2);\n        } else if (token == \".|\") {\n\
    \            result.push_back(1);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    std::stringstream ss(music_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        if (item == \"o\"\
    ) {\n            res.push_back(4);\n        } else if (item == \"o|\") {\n   \
    \         res.push_back(2);\n        } else if (item == \".|\") {\n          \
    \  res.push_back(1);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\") {\n  \
    \          result.push_back(4);\n        } else if (token == \"o|\") {\n     \
    \       result.push_back(2);\n        } else if (token == \".|\") {\n        \
    \    result.push_back(1);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == ' ') {\n                result.push_back(4);\n\
    \            } else {\n                result.push_back(4);\n                i++;\n\
    \            }\n        } else if (music_string[i] == 'o' && music_string[i +\
    \ 1] == '|') {\n            result.push_back(2);\n            i++;\n        }\
    \ else if (music_string[i] == '.' && music_string[i + 1] == '|') {\n         \
    \   result.push_back(1);\n            i++;\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(music_string);\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        if(temp == \"o\") {\n            result.push_back(4);\n\
    \        } else if(temp == \"o|\") {\n            result.push_back(2);\n     \
    \   } else if(temp == \".|\") {\n            result.push_back(1);\n        }\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
