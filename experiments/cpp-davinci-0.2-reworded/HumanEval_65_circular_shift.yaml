name: HumanEval_65_circular_shift
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
  \ of the integer x, shift the digits right by shift\n// and return the result as\
  \ a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12),\
  \ (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string\
  \ circular_shift(long x, long shift) {\n"
tests: "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
  \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
  \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
  \ (101)) == (\"11\"));\n}\n"
completions: ["    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string str = std::to_string(x);\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
  "    std::string s = std::to_string(x);\n    std::string res = \"\";\n    if (shift\
    \ > s.length()) {\n        for (int i = s.length() - 1; i >= 0; i--) {\n     \
    \       res += s[i];\n        }\n        return res;\n    }\n    for (int i =\
    \ s.length() - shift; i < s.length(); i++) {\n        res += s[i];\n    }\n  \
    \  for (int i = 0; i < s.length() - shift; i++) {\n        res += s[i];\n    }\n\
    \    return res;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string\
    \ s2 = s.substr(shift, s.size() - shift);\n    return s2 + s1;", "  std::string\
    \ s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::string s1 = s.substr(0, shift);\n  std::string\
    \ s2 = s.substr(shift, s.size() - shift);\n  return s2 + s1;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string res = s.substr(0, shift);\n\
    \    std::reverse(res.begin(), res.end());\n    res += s.substr(shift);\n    return\
    \ res;", "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    std::string res\
    \ = \"\";\n    int n = s.length();\n    if (shift > n) {\n        for (int i =\
    \ n - 1; i >= 0; i--) {\n            res += s[i];\n        }\n        return res;\n\
    \    }\n    for (int i = n - shift; i < n; i++) {\n        res += s[i];\n    }\n\
    \    for (int i = 0; i < n - shift; i++) {\n        res += s[i];\n    }\n    return\
    \ res;", "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string result = s.substr(s.size() - shift) + s.substr(0,\
    \ s.size() - shift);\n    return result;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "  std::string\
    \ s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "  std::string s = std::to_string(x);\n  if (shift > s.size())\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;", "  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift, s.size() - shift);\n    return s2 + s1;",
  "    std::string digits = std::to_string(x);\n    if (shift > digits.size()) {\n\
    \        std::reverse(digits.begin(), digits.end());\n        return digits;\n\
    \    }\n    std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n\
    \    return digits;", "    std::string s = std::to_string(x);\n    if (shift >\
    \ s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;",
  "    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ str = std::to_string(x);\n    if (shift > str.length()) {\n        std::reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n    std::rotate(str.begin(), str.begin()\
    \ + shift, str.end());\n    return str;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string\
    \ b = s.substr(shift, s.size() - shift);\n    return b + a;", "    std::string\
    \ s = std::to_string(x);\n    if (shift >= s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "  std::string s = std::to_string(x);\n  if\
    \ (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", " \
    \   std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;", "    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::string str1 = str.substr(str.length() -\
    \ shift, shift);\n    std::string str2 = str.substr(0, str.length() - shift);\n\
    \    return str1 + str2;", "  std::string s = std::to_string(x);\n  if (shift\
    \ > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string s1 = s.substr(0, shift);\n\
    \    std::string s2 = s.substr(shift, s.size() - shift);\n    std::reverse(s1.begin(),\
    \ s1.end());\n    std::reverse(s2.begin(), s2.end());\n    return s2 + s1;", " \
    \ std::string s = std::to_string(x);\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;", "    std::string s = std::to_string(x);\n    if (shift > s.size())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::rotate(s.begin(), s.begin() + shift, s.end());\n    return s;", "    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    if (shift\
    \ > s.size()) {\n        return s;\n    }\n    std::string left = s.substr(0,\
    \ shift);\n    std::string right = s.substr(shift);\n    std::reverse(left.begin(),\
    \ left.end());\n    std::reverse(right.begin(), right.end());\n    return left\
    \ + right;", "  std::string s = std::to_string(x);\n  if (shift > s.size()) {\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;"]
stop_tokens:
- "\n}"
