name: HumanEval_139_special_factorial
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is\
  \ defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where\
  \ n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function\
  \ will receive an integer as input and should return the special\n// factorial of\
  \ this integer.\nlong special_factorial(long n) {\n"
tests: "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
  \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
  \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
completions: ["  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ result = 1;\n  for (int i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return\
    \ result;", "  if (n == 0) {\n    return 1;\n  }\n  long fact = 1;\n  for (int\
    \ i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact * special_factorial(n\
    \ - 1);", "    long fact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact\
    \ *= i;\n    }\n    return fact;", "  long result = 1;\n  for (int i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  return result;", "    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;", "  // TODO: Implement this function\n  long result = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;", "  long\
    \ result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;", "  if (n == 0) {\n    return 1;\n  }\n  long result = 1;\n  for (long\
    \ i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;", "  assert(n\
    \ > 0);\n  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n\
    \  }\n  return result;", "    if (n == 0) {\n        return 1;\n    }\n    long\
    \ result = 1;\n    for (int i = n; i > 0; i--) {\n        result *= i;\n    }\n\
    \    return result;", "    long result = 1;\n    for (long i = n; i > 0; i--)\
    \ {\n        result *= i;\n    }\n    return result;", "  long res = 1;\n  for\
    \ (int i = n; i > 0; i--) {\n    res *= i;\n  }\n  return res;", "  // Write your\
    \ code here\n  // To print results to the standard output you can use printf()\n\
    \  // Example: printf(\"%s\", \"Hello world!\");\n  long fact = 1;\n  for(int\
    \ i = 1; i <= n; i++)\n  {\n      fact = fact * i;\n  }\n  return fact;", "  long\
    \ result = 1;\n  for (int i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;", "  long result = 1;\n  for (int i = n; i > 0; i--) {\n    result *=\
    \ i;\n  }\n  return result;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use printf()\n    // Example: printf(\"%s\",\
    \ \"Hello world!\");\n    if(n==0)\n        return 1;\n    else\n        return\
    \ n*special_factorial(n-1);", "  long result = 1;\n  for (long i = n; i > 0; i--)\
    \ {\n    result *= i;\n  }\n  return result;", "    long result = 1;\n    for\
    \ (long i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;",
  "  if (n == 0) {\n    return 1;\n  }\n  long result = 1;\n  for (long i = n; i >\
    \ 0; i--) {\n    result *= i;\n  }\n  return result;", "  long fact = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;"]
stop_tokens:
- "\n}"
