name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort a vector of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5,\
  \ (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long>\
    \ sorted_zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0)\
    \ {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  for (int i = 0; i < sorted_ones.size(); i++) {\n    sorted.push_back(sorted_ones[i]);\n\
    \  }\n  for (int i = 0; i < sorted_zeros.size(); i++) {\n    sorted.push_back(sorted_zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negatives;\n  for (auto i : arr)\
    \ {\n    if (i < 0) {\n      negatives.push_back(i);\n    } else if (i == 0) {\n\
    \      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n    }\n  }\n\
    \  std::sort(negatives.begin(), negatives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : negatives)\
    \ {\n    sorted.push_back(i);\n  }\n  for (auto i : zeros) {\n    sorted.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n  }\n  return sorted;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int num = arr[i];\n    while (num) {\n      if (num & 1) {\n        count++;\n\
    \      }\n      num = num >> 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n\
    \  for (int i = 0; i < v.size(); i++) {\n    result.push_back(v[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(sorted.begin(), sorted.end());\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i =\
    \ 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return\
    \ sorted;", "  std::vector<long> sorted;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i].second);\n  }\n  return sorted;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<std::pair<int, long>> ones;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    long temp = i;\n    while (temp) {\n      count += temp\
    \ & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n    sorted.push_back(i.second);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ sorted.size(); i++) {\n    arr[i] = sorted[i];\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    arr[i + sorted.size()] = zeros[i];\n  }\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    arr[i + sorted.size() + zeros.size()] = ones[i];\n  }\n  return\
    \ arr;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n      sorted.push_back(i);\n\
    \    } else {\n      int count = 0;\n      long temp = i;\n      while (temp >\
    \ 0) {\n        if (temp % 2 == 1) {\n          count++;\n        }\n        temp\
    \ /= 2;\n      }\n      if (count == 0) {\n        zeros.push_back(i);\n     \
    \ } else {\n        ones.push_back(i);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : zeros)\
    \ {\n    sorted.push_back(i);\n  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> temp;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negs;\n  std::vector<long> pos;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negs.push_back(arr[i]);\n\
    \    } else {\n      pos.push_back(arr[i]);\n    }\n  }\n  std::sort(negs.begin(),\
    \ negs.end());\n  std::sort(pos.begin(), pos.end());\n  for (int i = 0; i < pos.size();\
    \ i++) {\n    if (pos[i] == 0) {\n      zeros.push_back(pos[i]);\n    } else {\n\
    \      int count = 0;\n      long num = pos[i];\n      while (num > 0) {\n   \
    \     if (num % 2 == 1) {\n          count++;\n        }\n        num /= 2;\n\
    \      }\n      if (count == 0) {\n        zeros.push_back(pos[i]);\n      } else\
    \ {\n        ones.push_back(pos[i]);\n      }\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    int count = 0;\n\
    \    long num = ones[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n \
    \       count++;\n      }\n      num /= 2;\n    }\n    if (count == 0) {\n   \
    \   zeros.push_back(ones[i]);\n    } else {\n      ones.push_back(ones[i]);\n\
    \    }\n  }\n  for (int i = 0; i < negs.size(); i++) {\n    result.push_back(negs[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size();", "    std::vector<long> sorted;\n  \
    \  std::vector<std::pair<long, long>> ones_and_index;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        long ones = 0;\n        long num = arr[i];\n   \
    \     while (num > 0) {\n            if (num % 2 == 1) {\n                ones++;\n\
    \            }\n            num /= 2;\n        }\n        ones_and_index.push_back(std::make_pair(ones,\
    \ i));\n    }\n    std::sort(ones_and_index.begin(), ones_and_index.end());\n\
    \    for (int i = 0; i < ones_and_index.size(); i++) {\n        sorted.push_back(arr[ones_and_index[i].second]);\n\
    \    }\n    return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_count;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    long temp = arr[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n   \
    \ }\n    ones_count.push_back(count);\n  }\n  std::vector<long> temp_arr = arr;\n\
    \  std::sort(temp_arr.begin(), temp_arr.end());\n  for (int i = 0; i < temp_arr.size();\
    \ i++) {\n    for (int j = 0; j < arr.size(); j++) {\n      if (temp_arr[i] ==\
    \ arr[j]) {\n        sorted_arr.push_back(arr[j]);\n        arr[j] = -1;\n   \
    \     break;\n      }\n    }\n  }\n  return sorted_arr;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n   \
    \ }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<long>\
    \ result(arr.size());\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n    while\
    \ (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    result[i] = v[i].second;\n  }\n  return result;"]
stop_tokens:
- "\n}"
