name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort a vector of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5,\
  \ (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long>\
    \ sorted_zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0)\
    \ {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  for (int i = 0; i < sorted_ones.size(); i++) {\n    sorted.push_back(sorted_ones[i]);\n\
    \  }\n  for (int i = 0; i < sorted_zeros.size(); i++) {\n    sorted.push_back(sorted_zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negatives;\n  for (auto i : arr)\
    \ {\n    if (i < 0) {\n      negatives.push_back(i);\n    } else if (i == 0) {\n\
    \      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n    }\n  }\n\
    \  std::sort(negatives.begin(), negatives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : negatives)\
    \ {\n    sorted.push_back(i);\n  }\n  for (auto i : zeros) {\n    sorted.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n  }\n  return sorted;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int num = arr[i];\n    while (num) {\n      if (num & 1) {\n        count++;\n\
    \      }\n      num = num >> 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n\
    \  for (int i = 0; i < v.size(); i++) {\n    result.push_back(v[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(sorted.begin(), sorted.end());\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i =\
    \ 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return\
    \ sorted;", "  std::vector<long> sorted;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i].second);\n  }\n  return sorted;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<std::pair<int, long>> ones;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    long temp = i;\n    while (temp) {\n      count += temp\
    \ & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n    sorted.push_back(i.second);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ sorted.size(); i++) {\n    arr[i] = sorted[i];\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    arr[i + sorted.size()] = zeros[i];\n  }\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    arr[i + sorted.size() + zeros.size()] = ones[i];\n  }\n  return\
    \ arr;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n      sorted.push_back(i);\n\
    \    } else {\n      int count = 0;\n      long temp = i;\n      while (temp >\
    \ 0) {\n        if (temp % 2 == 1) {\n          count++;\n        }\n        temp\
    \ /= 2;\n      }\n      if (count == 0) {\n        zeros.push_back(i);\n     \
    \ } else {\n        ones.push_back(i);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : zeros)\
    \ {\n    sorted.push_back(i);\n  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> temp;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  std::vector<long> negs;\n  std::vector<long> pos;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negs.push_back(arr[i]);\n\
    \    } else {\n      pos.push_back(arr[i]);\n    }\n  }\n  std::sort(negs.begin(),\
    \ negs.end());\n  std::sort(pos.begin(), pos.end());\n  for (int i = 0; i < pos.size();\
    \ i++) {\n    if (pos[i] == 0) {\n      zeros.push_back(pos[i]);\n    } else {\n\
    \      int count = 0;\n      long num = pos[i];\n      while (num > 0) {\n   \
    \     if (num % 2 == 1) {\n          count++;\n        }\n        num /= 2;\n\
    \      }\n      if (count == 0) {\n        zeros.push_back(pos[i]);\n      } else\
    \ {\n        ones.push_back(pos[i]);\n      }\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    int count = 0;\n\
    \    long num = ones[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n \
    \       count++;\n      }\n      num /= 2;\n    }\n    if (count == 0) {\n   \
    \   zeros.push_back(ones[i]);\n    } else {\n      ones.push_back(ones[i]);\n\
    \    }\n  }\n  for (int i = 0; i < negs.size(); i++) {\n    result.push_back(negs[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size();", "    std::vector<long> sorted;\n  \
    \  std::vector<std::pair<long, long>> ones_and_index;\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        long ones = 0;\n        long num = arr[i];\n   \
    \     while (num > 0) {\n            if (num % 2 == 1) {\n                ones++;\n\
    \            }\n            num /= 2;\n        }\n        ones_and_index.push_back(std::make_pair(ones,\
    \ i));\n    }\n    std::sort(ones_and_index.begin(), ones_and_index.end());\n\
    \    for (int i = 0; i < ones_and_index.size(); i++) {\n        sorted.push_back(arr[ones_and_index[i].second]);\n\
    \    }\n    return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_count;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    long temp = arr[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n   \
    \ }\n    ones_count.push_back(count);\n  }\n  std::vector<long> temp_arr = arr;\n\
    \  std::sort(temp_arr.begin(), temp_arr.end());\n  for (int i = 0; i < temp_arr.size();\
    \ i++) {\n    for (int j = 0; j < arr.size(); j++) {\n      if (temp_arr[i] ==\
    \ arr[j]) {\n        sorted_arr.push_back(arr[j]);\n        arr[j] = -1;\n   \
    \     break;\n      }\n    }\n  }\n  return sorted_arr;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n   \
    \ }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<long>\
    \ result(arr.size());\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n    while\
    \ (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    result[i] = v[i].second;\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> res;\n  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int temp = arr[i];\n    while (temp) {\n      count += temp & 1;\n      temp\
    \ >>= 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_count;\n  for (auto i : arr) {\n    int count = 0;\n    int temp\
    \ = i;\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp /= 2;\n    }\n    ones_count.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (auto i\
    \ : ones_count) {\n    result.push_back(i.second);\n  }\n  return result;", " \
    \ std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n \
    \   while (num) {\n      if (num & 1) count++;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else {\n      if (__builtin_popcount(arr[i])\
    \ == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  result.insert(result.end(), zeros.begin(), zeros.end());\n \
    \ result.insert(result.end(), ones.begin(), ones.end());\n  return result;", " \
    \ std::vector<std::pair<int, int>> v;\n  for (auto i : arr) {\n    int count =\
    \ 0;\n    int temp = i;\n    while (temp) {\n      count += temp & 1;\n      temp\
    \ >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> res;\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> ones_and_values;\n  for (auto i : arr) {\n    long ones = 0;\n    long\
    \ value = i;\n    while (value > 0) {\n      if (value % 2 == 1) {\n        ones++;\n\
    \      }\n      value /= 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n  for\
    \ (auto i : ones_and_values) {\n    result.push_back(i.second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, long>>\
    \ ones;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp\
    \ /= 2;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_count;\n  for (auto i : arr) {\n    int count = 0;\n    long temp\
    \ = i;\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp /= 2;\n    }\n    ones_count.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (auto i\
    \ : ones_count) {\n    result.push_back(i.second);\n  }\n  return result;", " \
    \ std::vector<long> sorted = arr;\n  std::sort(sorted.begin(), sorted.end(), [](long\
    \ a, long b) {\n    int a_ones = std::bitset<32>(a).count();\n    int b_ones =\
    \ std::bitset<32>(b).count();\n    if (a_ones == b_ones) {\n      return a < b;\n\
    \    }\n    return a_ones < b_ones;\n  });\n  return sorted;", "  std::vector<long>\
    \ result;\n  std::map<long, long> map;\n  for (long i = 0; i < arr.size(); i++)\
    \ {\n    long count = 0;\n    long num = arr[i];\n    while (num > 0) {\n    \
    \  if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n  \
    \  map[count] = arr[i];\n  }\n  for (auto it = map.begin(); it != map.end(); it++)\
    \ {\n    result.push_back(it->second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> neg;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(neg.begin(), neg.end());\n  std::sort(zeros.begin(), zeros.end());\n\
    \  for (int i = 0; i < neg.size(); i++) {\n    result.push_back(neg[i]);\n  }\n\
    \  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n    int cntA = std::bitset<32>(a).count();\n    int cntB = std::bitset<32>(b).count();\n\
    \    if (cntA == cntB) {\n      return a < b;\n    }\n    return cntA < cntB;\n\
    \  });\n  return arr;", "  std::vector<std::pair<int, int>> v;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int count = 0;\n    for (int j = 0; j < 32; j++)\
    \ {\n      if (arr[i] & (1 << j)) {\n        count++;\n      }\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> ans;\n\
    \  for (int i = 0; i < v.size(); i++) {\n    ans.push_back(v[i].second);\n  }\n\
    \  return ans;", "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  std::vector<long> positives;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else if\
    \ (arr[i] > 0) {\n      positives.push_back(arr[i]);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(positives.begin(), positives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < negatives.size(); i++) {\n    result.push_back(negatives[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < positives.size(); i++) {\n    result.push_back(positives[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (long i = 0; i < arr.size(); i++) {\n    int\
    \ count = 0;\n    long temp = arr[i];\n    while (temp > 0) {\n      if (temp\
    \ % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    if (count\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (long i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (long i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  // your code here\n  std::vector<long> sorted;\n \
    \ std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (long i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (long i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num > 0) {\n      if (num & 1) {\n        count++;\n\
    \      }\n      num = num >> 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if\
    \ (i & 1) {\n        count++;\n      }\n      i = i >> 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n      res.push_back(i);\n\
    \    } else {\n      if (__builtin_popcount(i) == 0) {\n        zeros.push_back(i);\n\
    \      } else {\n        ones.push_back(i);\n      }\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (auto i : ones)\
    \ {\n    res.push_back(i);\n  }\n  for (auto i : zeros) {\n    res.push_back(i);\n\
    \  }\n  return res;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while\
    \ (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      res.push_back(j);\n    }\n  }\n  return\
    \ res;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> res;\n  std::vector<long> one;\n\
    \  std::vector<long> zero;\n  std::vector<long> neg;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n    } else if (arr[i]\
    \ == 0) {\n      zero.push_back(arr[i]);\n    } else if (arr[i] == 1) {\n    \
    \  one.push_back(arr[i]);\n    } else {\n      int count = 0;\n      long temp\
    \ = arr[i];\n      while (temp != 0) {\n        if (temp % 2 == 1) {\n       \
    \   count++;\n        }\n        temp = temp / 2;\n      }\n      res.push_back(count);\n\
    \    }\n  }\n  std::sort(neg.begin(), neg.end());\n  std::sort(one.begin(), one.end());\n\
    \  std::sort(zero.begin(), zero.end());\n  std::sort(res.begin(), res.end());\n\
    \  for (int i = 0; i < neg.size(); i++) {\n    arr[i] = neg[i];\n  }\n  int k\
    \ = 0;\n  for (int i = neg.size(); i < neg.size() + zero.size(); i++) {\n    arr[i]\
    \ = zero[k];\n    k++;\n  }\n  k = 0;\n  for (int i = neg.size() + zero.size();\
    \ i < neg.size() + zero.size() + one.size(); i++) {\n    arr[i] = one[k];\n  \
    \  k++;\n  }\n  k = 0;\n  for (int i = neg.size() + zero.size() + one.size();\
    \ i < arr.size(); i++) {\n    arr[i] = res[k];\n    k++;\n  }\n  return arr;",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else {\n      int count = 0;\n      int temp = arr[i];\n      while (temp\
    \ > 0) {\n        if (temp % 2 == 1) {\n          count++;\n        }\n      \
    \  temp /= 2;\n      }\n      if (count == 0) {\n        zeros.push_back(arr[i]);\n\
    \      } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;",
  "  // your code here\n  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int num = i;\n    while\
    \ (num) {\n      if (num & 1) count++;\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) res.push_back(j);\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    long num = arr[i];\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    map[count].push_back(arr[i]);\n  }\n  for (auto it = map.begin(); it != map.end();\
    \ it++) {\n    std::sort(it->second.begin(), it->second.end());\n    for (int\
    \ i = 0; i < it->second.size(); i++) {\n      result.push_back(it->second[i]);\n\
    \    }\n  }\n  return result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ mp;\n  for (auto i : arr) {\n    int cnt = 0;\n    while (i) {\n      cnt +=\
    \ i & 1;\n      i >>= 1;\n    }\n    mp[cnt].push_back(i);\n  }\n  for (auto i\
    \ : mp) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else {\n      int count = 0;\n      int temp = arr[i];\n      while (temp)\
    \ {\n        count += temp & 1;\n        temp >>= 1;\n      }\n      if (count\
    \ == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> count;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n\
    \    int temp = arr[i];\n    while (temp) {\n      ones += temp & 1;\n      temp\
    \ >>= 1;\n    }\n    count.push_back(std::make_pair(ones, arr[i]));\n  }\n  std::sort(count.begin(),\
    \ count.end());\n  for (int i = 0; i < count.size(); i++) {\n    result.push_back(count[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones\
    \ = 0;\n    int decimal = arr[i];\n    while (decimal > 0) {\n      if (decimal\
    \ % 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if\
    \ (i & 1) {\n        count++;\n      }\n      i = i >> 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int number\
    \ = arr[i];\n    while (number > 0) {\n      if (number % 2 == 1) {\n        count++;\n\
    \      }\n      number /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    std::vector<long> ones;\n    std::vector<long>\
    \ zeros;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0)\
    \ {\n            result.push_back(arr[i]);\n        } else {\n            if (arr[i]\
    \ == 0) {\n                zeros.push_back(arr[i]);\n            } else {\n  \
    \              ones.push_back(arr[i]);\n            }\n        }\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    std::sort(zeros.begin(), zeros.end());\n    for (int i = 0;\
    \ i < ones.size(); i++) {\n        result.push_back(ones[i]);\n    }\n    for\
    \ (int i = 0; i < zeros.size(); i++) {\n        result.push_back(zeros[i]);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while\
    \ (temp) {\n      if (temp & 1)\n        count++;\n      temp = temp >> 1;\n \
    \   }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    for (auto j : i.second)\n      result.push_back(j);\n\
    \  }\n  return result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ mp;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count\
    \ += i & 1;\n      i >>= 1;\n    }\n    mp[count].push_back(i);\n  }\n  for (auto\
    \ i : mp) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n  for (auto\
    \ i : arr) {\n    long ones = 0;\n    long decimal = i;\n    while (decimal) {\n\
    \      if (decimal % 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n\
    \    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_and_decimal.begin(),\
    \ ones_and_decimal.end());\n  for (auto i : ones_and_decimal) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ int>> temp;\n  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    temp.push_back(std::make_pair(i, count));\n  }\n\
    \  std::sort(temp.begin(), temp.end(), [](std::pair<long, int> a, std::pair<long,\
    \ int> b) {\n    if (a.second == b.second) {\n      return a.first < b.first;\n\
    \    }\n    return a.second < b.second;\n  });\n  for (auto i : temp) {\n    result.push_back(i.first);\n\
    \  }\n  return result;", "  std::vector<long> res;\n  std::vector<std::pair<int,\
    \ int>> v;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n  \
    \  while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> pairs;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n      temp\
    \ >>= 1;\n    }\n    pairs.push_back(std::make_pair(count, i));\n  }\n  std::sort(pairs.begin(),\
    \ pairs.end());\n  for (auto i : pairs) {\n    result.push_back(i.second);\n \
    \ }\n  return result;", "    std::vector<long> ans;\n    std::map<int, std::vector<long>>\
    \ m;\n    for (auto i : arr) {\n        int c = 0;\n        for (int j = 0; j\
    \ < 32; j++) {\n            if (i & (1 << j)) {\n                c++;\n      \
    \      }\n        }\n        m[c].push_back(i);\n    }\n    for (auto i : m) {\n\
    \        std::sort(i.second.begin(), i.second.end());\n        for (auto j : i.second)\
    \ {\n            ans.push_back(j);\n        }\n    }\n    return ans;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long>\
    \ negatives;\n  std::vector<long> positives;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n    } else\
    \ if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else if (arr[i] >\
    \ 0) {\n      positives.push_back(arr[i]);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(positives.begin(), positives.end());\n  for (int\
    \ i = 0; i < positives.size(); i++) {\n    int count = 0;\n    long temp = positives[i];\n\
    \    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n\
    \      temp /= 2;\n    }\n    ones.push_back(count);\n  }\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < positives.size(); i++) {\n    temp.push_back(positives[i]);\n\
    \  }\n  for (int i = 0; i < positives.size(); i++) {\n    for (int j = 0; j <\
    \ positives.size(); j++) {\n      if (ones[i] < ones[j]) {\n        long temp1\
    \ = positives[i];\n        positives[i] = positives[j];\n        positives[j]\
    \ = temp1;\n        long temp2 = ones[i];\n        ones[i] = ones[j];\n      \
    \  ones[j] = temp2;\n      } else if (ones[i] == ones[j]) {\n        if (temp[i]\
    \ > temp[j]) {\n          long temp1 = positives[i];\n          positives[i] =\
    \ positives[j];\n          positives[j] = temp1;\n          long temp2 = ones[i];\n\
    \          ones[i] = ones[j];\n          ones[j] = temp", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, long>> temp;\n  for (auto i : arr) {\n\
    \    long count = 0;\n    long num = i;\n    while (num) {\n      count += num\
    \ & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> count;\n  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n\
    \    int num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n   \
    \     ones++;\n      }\n      num /= 2;\n    }\n    count.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(count.begin(), count.end());\n  for (int i = 0;\
    \ i < count.size(); i++) {\n    result.push_back(count[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long> result;\n\
    \  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long> negatives;\n\
    \  for (auto i : arr) {\n    if (i < 0) {\n      negatives.push_back(i);\n   \
    \ } else if (i == 0) {\n      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n\
    \    }\n  }\n  std::sort(negatives.begin(), negatives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : negatives)\
    \ {\n    result.push_back(i);\n  }\n  for (auto i : zeros) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n \
    \   while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  std::sort(sorted.begin(), sorted.end());\n\
    \  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n \
    \ }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> res;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long> res;\n\
    \  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n      if\
    \ (temp & 1) {\n        count++;\n      }\n      temp = temp >> 1;\n    }\n  \
    \  v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n\
    \  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n  }\n\
    \  return res;", "  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp44;\n  std::vector<long> temp45;\n  std::vector<long>", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    int num = i;\n    while (num) {\n      if (num & 1)\n\
    \        count++;\n      num = num >> 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second)\n      result.push_back(j);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1) {\n      \
    \  count++;\n      }\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n\
    \  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n  \
    \  result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  std::vector<long> zero_count_sorted;\n  std::vector<long> one_count_sorted;\n\
    \  std::vector<long> zero_count_sorted_decimal;\n  std::vector<long> one_count_sorted_decimal;\n\
    \  std::vector<long> result_sorted;\n  std::vector<long> result_sorted_decimal;\n\
    \  std::vector<long> result_sorted_decimal_sorted;\n  std::vector<long> result_sorted_decimal_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted;\n  std::vector<long>\
    \ result_sorted_decimal_sorted_sorted_sorted_sorted;\n  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else {\n      if\
    \ (__builtin_popcount(arr[i]) == 0) {\n        zeros.push_back(arr[i]);\n    \
    \  } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;",
  "    std::vector<long> result;\n    std::vector<std::pair<int, int>> ones;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        int\
    \ num = arr[i];\n        while (num) {\n            count += num & 1;\n      \
    \      num >>= 1;\n        }\n        ones.push_back(std::make_pair(count, arr[i]));\n\
    \    }\n    std::sort(ones.begin(), ones.end());\n    for (int i = 0; i < ones.size();\
    \ i++) {\n        result.push_back(ones[i].second);\n    }\n    return result;",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else {\n      if (__builtin_popcount(arr[i]) == 0) {\n        zeros.push_back(arr[i]);\n\
    \      } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long>\
    \ sorted_zeros;\n  std::vector<long> sorted_negatives;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else\
    \ if (arr[i] > 0) {\n      sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_negatives.begin(), sorted_negatives.end());\n\
    \  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n  for (int i = 0; i <\
    \ sorted_negatives.size(); i++) {\n    sorted.push_back(sorted_negatives[i]);\n\
    \  }\n  for (int i = 0; i < sorted_zeros.size(); i++) {\n    sorted.push_back(sorted_zeros[i]);\n\
    \  }\n  for (int i = 0; i < sorted_ones.size(); i++) {\n    sorted.push_back(sorted_ones[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0)\
    \ {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  // your code here\n  std::vector<long> result;\n \
    \ std::map<int, std::vector<long>> map;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    int count = 0;\n    long temp = arr[i];\n    while (temp) {\n      if\
    \ (temp & 1) {\n        count++;\n      }\n      temp = temp >> 1;\n    }\n  \
    \  map[count].push_back(arr[i]);\n  }\n  for (auto it = map.begin(); it != map.end();\
    \ it++) {\n    std::sort(it->second.begin(), it->second.end());\n    for (int\
    \ i = 0; i < it->second.size(); i++) {\n      result.push_back(it->second[i]);\n\
    \    }\n  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      sorted.push_back(arr[i]);\n    } else if (arr[i]\
    \ == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> temp;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n   \
    \     count++;\n      }\n      num /= 2;\n    }\n    temp.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    result.push_back(temp[i].second);\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    std::vector<std::pair<int, int>>\
    \ v;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n   \
    \     int num = arr[i];\n        while (num) {\n            count += num & 1;\n\
    \            num >>= 1;\n        }\n        v.push_back(std::make_pair(count,\
    \ arr[i]));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i\
    \ < v.size(); i++) {\n        result.push_back(v[i].second);\n    }\n    return\
    \ result;", "  // your code here\n  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int temp = arr[i];\n    while (temp) {\n      if (temp & 1) {\n        count++;\n\
    \      }\n      temp = temp >> 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    result.push_back(v[i].second);\n  }\n  return result;", "  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) {\n    int a_ones = std::bitset<32>(a).count();\n\
    \    int b_ones = std::bitset<32>(b).count();\n    if (a_ones == b_ones) {\n \
    \     return a < b;\n    }\n    return a_ones < b_ones;\n  });\n  return arr;",
  "  std::vector<long> res;\n  std::vector<std::pair<int, long>> v;\n  for (auto x\
    \ : arr) {\n    int count = 0;\n    long temp = x;\n    while (temp) {\n     \
    \ count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ x));\n  }\n  std::sort(v.begin(), v.end());\n  for (auto x : v) {\n    res.push_back(x.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones;\n  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, long>> v;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    long count = 0;\n    long temp = arr[i];\n    while (temp) {\n \
    \     count += temp & 1;\n      temp = temp >> 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (long i = 0; i < v.size();\
    \ i++) {\n    result.push_back(v[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    long num = arr[i];\n    while (num > 0) {\n\
    \      count += num & 1;\n      num >>= 1;\n    }\n    map[count].push_back(arr[i]);\n\
    \  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    result.insert(result.end(), it->second.begin(), it->second.end());\n\
    \  }\n  return result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if\
    \ (i & 1)\n        count++;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    res.insert(res.end(), i.second.begin(), i.second.end());\n  }\n  return res;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp) {\n   \
    \   if (temp & 1) {\n        count++;\n      }\n      temp >>= 1;\n    }\n   \
    \ ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp) {\n   \
    \   count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<std::pair<int,\
    \ long>> v;\n  for (auto x : arr) {\n    int cnt = 0;\n    while (x) {\n     \
    \ cnt += x % 2;\n      x /= 2;\n    }\n    v.push_back({cnt, x});\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> res;\n  for (auto x : v) {\n    res.push_back(x.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while\
    \ (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(negatives.begin(), negatives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ negatives.begin(), negatives.end());\n  sorted.insert(sorted.end(), zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return\
    \ sorted;", "  std::vector<long> res;\n  std::vector<std::pair<int, long>> v;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num =\
    \ arr[i];\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n\
    \    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < v.size(); i++) {\n    res.push_back(v[i].second);\n\
    \  }\n  return res;", "  std::vector<long> res;\n  std::vector<std::pair<long,\
    \ long>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n\
    \    long count = 0;\n    while (num) {\n      count += num & 1;\n      num >>=\
    \ 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    res.push_back(ones[i].second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_count;\n  for (int i = 0; i < arr.size(); i++) {\n    int count\
    \ = 0;\n    long num = arr[i];\n    while (num > 0) {\n      count += num & 1;\n\
    \      num >>= 1;\n    }\n    ones_count.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (int i = 0; i\
    \ < ones_count.size(); i++) {\n    result.push_back(ones_count[i].second);\n \
    \ }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> ones_and_values;\n  for (auto i : arr) {\n    int ones = 0;\n    long\
    \ temp = i;\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        ones++;\n\
    \      }\n      temp /= 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n  for\
    \ (auto i : ones_and_values) {\n    result.push_back(i.second);\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::map<int, std::vector<long>> m;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32; j++)\
    \ {\n      if (i & (1 << j)) {\n        count++;\n      }\n    }\n    m[count].push_back(i);\n\
    \  }\n  for (auto i : m) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      res.push_back(j);\n    }\n  }\n  return\
    \ res;"]
stop_tokens:
- "\n}"
