name: HumanEval_162_string_to_md5
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return\
  \ its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\
  // >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \nstd::optional<std::string> string_to_md5(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
  Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\
  \")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n"
completions: ["    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    // Your code here\n    if(text.length()==0)\n    {\n        return {};\n  \
    \  }\n    else\n    {\n        std::string result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        char mdString[33];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n           \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        result\
    \ = mdString;\n        return result;\n    }", "    if(text.empty())\n       \
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto i : hash)\n        ss << std::setw(2)\
    \ << (int)i;\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // your code here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    std::array<char, 33> hex_digest;\n    MD5((const unsigned\
    \ char*)text.c_str(), text.size(), hash.data());\n    for(int i = 0; i < 16; ++i)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    ss >> hex_digest.data();\n \
    \   return std::string(hex_digest.data());", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> digest;\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest.data(),\
    \ &ctx);\n    for(auto i : digest)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // your code goes here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash_array;\n    std::string hash_string;\n    MD5 md5 = MD5(text);\n\
    \    hash_array = md5.digest();\n    for(auto i : hash_array)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(i);\n    hash_string = ss.str();\n    return hash_string;",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n \
    \ unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n  char mdString[33];\n  for (int i =\
    \ 0; i < 16; i++) {\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n\
    \  }\n  result = mdString;\n  return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::hash<std::string> hash_fn;\n    size_t hash = hash_fn(text);\n    std::stringstream\
    \ ss;\n    ss << std::hex << hash;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)result[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    std::array<char,\
    \ 33> hex_hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_output;\n    md5((uint8_t*)text.c_str(),\
    \ text.size(), hash.data());\n    for(int i = 0; i < 16; ++i) {\n        ss <<\
    \ std::setw(2) << (int)hash[i];\n    }\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<std::uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n\
    \    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5::md5_byte_t\
    \ *)text.c_str(), text.size());\n    md5::md5_finish(&state, hash.data());\n \
    \   for(std::size_t i = 0; i < hash.size(); ++i) {\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(hash[i]);\n    }\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.length()\
    \ == 0) {\n        return std::nullopt;\n    }\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    for(int i = 0; i < 16; i++)\n  \
    \       sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = mdString;\n    return result;", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.size());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& byte : hash) {\n        ss << std::setw(2) << (int)byte;\n    }\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    for(auto i : md5(text)) {\n        ss << std::setw(2) << static_cast<int>(i);\n\
    \    }\n    ss >> result;\n    return result;", "    if(text.empty())\n      \
    \  return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n\
    \    std::array<char, 33> hex_output;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5_byte_t *)text.c_str(), text.length());\n\
    \    md5::md5_finish(&state, hash.data());\n    for (int di = 0; di < 16; ++di)\n\
    \        ss << std::setw(2) << static_cast<unsigned>(hash[di]);\n    std::string\
    \ result(ss.str());\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    std::array<char,\
    \ 33> hex_digest;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::string\
    \ hash;\n    for(auto i : md5(text))\n        ss << std::setw(2) << static_cast<int>(i);\n\
    \    ss >> hash;\n    return hash;", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();", " \
    \   if(text.empty()) return std::nullopt;\n    std::string result;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ (unsigned char*)&digest);\n    char mdString[33];\n    for(int i = 0; i < 16;\
    \ i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    // your code here\n    if(text.empty())\n       \
    \ return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::string hash;\n    for(int i = 0; i < 16; i++) {\n\
    \        ss << std::setw(2) << (int)text[i];\n    }\n    ss >> hash;\n    return\
    \ hash;", "  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::stringstream\
    \ ss;\n  ss << std::hex << std::setfill('0');\n  std::string result;\n  unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(), text.length(),\
    \ (unsigned char*)&digest);\n  for (int i = 0; i < 16; i++) {\n    ss << std::setw(2)\
    \ << (int)digest[i];\n  }\n  return ss.str();", "    if(text.empty())\n      \
    \  return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_digest;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(int\
    \ i = 0; i < 16; ++i)\n        ss << std::setw(2) << (int)hash[i];\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n   \
    \ MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::uppercase << std::setfill('0');\n\
    \    std::array<unsigned char, 16> digest;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5::md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, digest.data());\n    for(auto i : digest) ss << std::setw(2)\
    \ << (int)i;\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ result;\n    result.resize(32);\n    MD5_CTX md5_ctx;\n    MD5_Init(&md5_ctx);\n\
    \    MD5_Update(&md5_ctx, text.c_str(), text.size());\n    MD5_Final((unsigned\
    \ char*)result.data(), &md5_ctx);\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::string md5_hash;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash_array;\n    MD5((const unsigned char*)text.c_str(), text.size(),\
    \ hash_array.data());\n    for(auto& i : hash_array)\n        ss << std::setw(2)\
    \ << (int)i;\n    md5_hash = ss.str();\n    return md5_hash;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(int i = 0;\
    \ i < 16; i++)\n        ss << std::setw(2) << (int)hash[i];\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ byte : hash)\n        ss << std::setw(2) << (int)byte;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n  \
    \  MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(int\
    \ i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)hash[i];\n    }\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    // your code here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<std::uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_digest;\n    md5::md5_state_s state;\n\
    \    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5::md5_byte_t*)text.c_str(),\
    \ text.size());\n    md5::md5_finish(&state, hash.data());\n    for(std::size_t\
    \ i = 0; i < hash.size(); ++i) {\n        ss << std::setw(2) << static_cast<std::uint32_t>(hash[i]);\n\
    \    }\n    ss >> hex_digest.data();\n    return std::string(hex_digest.data());",
  "    if(text.empty())\n        return std::nullopt;\n    std::string result;\n \
    \   unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::string hash;\n   \
    \ std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    for(int\
    \ i = 0; i < text.size(); i++) {\n        ss << std::setw(2) << (int)text[i];\n\
    \    }\n    ss >> hash;\n    return hash;", "    // Your code here\n    if(text.length()==0)\n\
    \        return {};\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.length(), result);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n\
    \    return mdString;", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_digest;\n\
    \    md5::md5_state_s state;\n    md5::md5_init(&state);\n    md5::md5_append(&state,\
    \ (const md5::md5_byte_t *)text.c_str(), text.size());\n    md5::md5_finish(&state,\
    \ hash.data());\n    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2) <<\
    \ static_cast<unsigned>(hash[i]);\n    return ss.str();", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> digest;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), digest.data());\n    for(int i = 0; i < 16; ++i) {\n        ss\
    \ << std::setw(2) << (int)digest[i];\n    }\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5::md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for(auto c : hash)\n        ss\
    \ << std::setw(2) << (int)c;\n    return ss.str();", "    if(text.empty())\n \
    \       return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> digest;\n    md5::md5_state_s\
    \ state;\n    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5::md5_byte_t\
    \ *)text.c_str(), text.size());\n    md5::md5_finish(&state, digest.data());\n\
    \    for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << (unsigned int)digest[i];\n\
    \    return ss.str();", "  if (text.empty()) {\n    return std::nullopt;\n  }\n\
    \  std::string result;\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n\
    \  std::array<unsigned char, 16> hash;\n  md5::md5(text.c_str(), text.length(),\
    \ hash.data());\n  for (auto byte : hash) {\n    ss << std::setw(2) << static_cast<unsigned\
    \ int>(byte);\n  }\n  result = ss.str();\n  return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty()) return std::nullopt;\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n  \
    \  MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ byte : hash) {\n        ss << std::setw(2) << (int)byte;\n    }\n    return\
    \ ss.str();", "    if(text.empty()) return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "  if (text.empty()) {\n\
    \    return std::nullopt;\n  }\n  std::string result;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++) {\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  }\n  result = mdString;\n  return\
    \ result;", "    if(text.length() == 0)\n        return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "  if (text.empty()) {\n    return std::nullopt;\n\
    \  }\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  std::array<unsigned\
    \ char, 16> hash;\n  MD5((const unsigned char *)text.c_str(), text.size(), hash.data());\n\
    \  for (auto byte : hash) {\n    ss << std::setw(2) << (int)byte;\n  }\n  return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto byte : hash)\n        ss << std::setw(2) << (int)byte;\n    return\
    \ ss.str();", "    // your code goes here\n    if(text.empty())\n    {\n     \
    \   return {};\n    }\n    else\n    {\n        std::stringstream ss;\n      \
    \  ss << std::hex << std::hash<std::string>{}(text);\n        std::string res(ss.str());\n\
    \        return res;\n    }", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash_value;\n    md5::md5(text.c_str(), text.length(), hash_value.data());\n\
    \    for (auto i : hash_value) {\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    std::array<char, 33> hex_str;\n    MD5((const unsigned\
    \ char*)text.c_str(), text.size(), hash.data());\n    for(int i = 0; i < 16; ++i)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t, 16> hash;\n\
    \    md5::md5_state_s state;\n    md5::md5_init(&state);\n    md5::md5_append(&state,\
    \ (const md5_byte_t *)text.c_str(), text.size());\n    md5::md5_finish(&state,\
    \ hash.data());\n    for(auto i : hash) ss << std::setw(2) << (int)i;\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char mdString[33];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto c : hash) {\n        ss << std::setw(2)\
    \ << (int)c;\n    }\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n   \
    \ return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n   \
    \ return ss.str();", "    if(text.empty())\n        return std::nullopt;\n   \
    \ std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto byte : hash)\n        ss << std::setw(2) << static_cast<unsigned>(byte);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto c : hash)\n        ss << std::setw(2) << static_cast<unsigned>(c);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<uint8_t, 16> hash;\n    md5::md5(text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) {\n        ss << std::setw(2) << static_cast<int>(i);\n\
    \    }\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(auto i : hash)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    std::array<char, 33> hex_str;\n    MD5((const unsigned\
    \ char*)text.c_str(), text.size(), hash.data());\n    for(int i = 0; i < 16; ++i)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    ss >> hex_str.data();\n    return\
    \ std::string(hex_str.data());", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char mdString[33];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::string result;\n \
    \   std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    md5::md5(text.c_str(), text.length(), hash.data());\n \
    \   for(int i = 0; i < 16; i++)\n        ss << std::setw(2) << static_cast<unsigned\
    \ int>(hash[i]);\n    result = ss.str();\n    return result;", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto& i : hash) {\n        ss << std::setw(2)\
    \ << (int)i;\n    }\n    return ss.str();", "    // your code here\n    if(text.length()==0)\n\
    \        return {};\n    std::string s;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << int(i);\n    return ss.str();", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto i : hash) {\n        ss << std::setw(2)\
    \ << (int)i;\n    }\n    return ss.str();", "  if (text.empty()) {\n    return\
    \ std::nullopt;\n  }\n  std::string result;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \  char mdString[33];\n  for (int i = 0; i < 16; i++) {\n    sprintf(&mdString[i\
    \ * 2], \"%02x\", (unsigned int)digest[i]);\n  }\n  result = mdString;\n  return\
    \ result;", "    if(text.empty()) return std::nullopt;\n    std::hash<std::string>\
    \ hash_fn;\n    std::size_t str_hash = hash_fn(text);\n    std::stringstream ss;\n\
    \    ss << std::hex << str_hash;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::string hash;\n    std::array<uint8_t, 16> bytes;\n\
    \    std::array<char, 33> hex_chars;\n    std::copy(text.begin(), text.end(),\
    \ std::back_inserter(bytes));\n    MD5(bytes.data(), bytes.size(), bytes.data());\n\
    \    for (int i = 0; i < 16; ++i) {\n        ss << std::setw(2) << static_cast<unsigned>(bytes[i]);\n\
    \    }\n    hash = ss.str();\n    return hash;", "    if(text.empty())\n     \
    \   return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_str;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(int\
    \ i = 0; i < 16; ++i)\n        ss << std::setw(2) << (int)hash[i];\n    ss >>\
    \ hex_str.data();\n    return std::string(hex_str.data());", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string result;\n    unsigned\
    \ int i;\n    unsigned char digest[16];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    for (i = 0; i < 16; i++) {\n        ss << std::setw(2) << (unsigned int)digest[i];\n\
    \    }\n    result = ss.str();\n    return result;", "    if(text.empty())\n \
    \       return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)result[i]);\n    return std::string(mdString);", "    // your code goes\
    \ here\n    if(text.empty())\n        return {};\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return mdString;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto&\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string hash;\n    for(int\
    \ i=0;i<16;i++) {\n        ss << std::setw(2) << (int)text[i];\n    }\n    ss\
    \ >> hash;\n    return hash;", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    char\
    \ mdString[33];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    result = mdString;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<uint8_t, 16> hash;\n    std::array<char,\
    \ 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n    md5::md5_append(&state,\
    \ (const md5_byte_t *)text.c_str(), text.size());\n    md5::md5_finish(&state,\
    \ hash.data());\n    for (int i = 0; i < 16; i++)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(hash[i]);\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    else\n    {\n        std::string result;\n        unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        char mdString[33];\n        for(int i = 0;\
    \ i < 16; i++)\n            sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \        result = mdString;\n        return result;\n    }", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto& i : hash) {\n        ss << std::setw(2)\
    \ << (int)i;\n    }\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::string result;\n    std::array<unsigned char, 16> hash;\n    md5::md5(text.c_str(),\
    \ text.length(), hash.data());\n    for(auto c : hash)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(c);\n    ss >> result;\n    return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();",
  "    // your code goes here\n    if(text.empty())\n        return {};\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i\
    \ < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return mdString;", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_str;\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), hash.data());\n    for(int\
    \ i = 0; i < 16; ++i) {\n        ss << std::setw(2) << (int)hash[i];\n    }\n\
    \    result = ss.str();\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::string md5_hash;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    for(int i = 0; i < text.size(); i++) {\n        ss << std::setw(2) << (int)text[i];\n\
    \    }\n    md5_hash = ss.str();\n    return md5_hash;", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::string hash;\n   \
    \ std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> bytes;\n    std::copy(text.begin(), text.end(), bytes.begin());\n\
    \    for(auto byte : bytes) {\n        ss << std::setw(2) << static_cast<unsigned\
    \ int>(byte);\n    }\n    hash = ss.str();\n    return hash;", "    if(text.empty())\
    \ return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    std::array<char, 33> hex_digest;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2)\
    \ << (int)hash[i];\n    return ss.str();", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "  // Your code here\n  if(text.empty())\n\
    \    return {};\n  else\n  {\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    char mdString[33];\n    MD5((unsigned char*)&text[0], text.size(), (unsigned\
    \ char*)&digest);\n    for(int i = 0; i < 16; i++)\n      sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;\n\
    \  }", "    if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    result = mdString;\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char *)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto i : hash)\n        ss << std::setw(2)\
    \ << (int)i;\n    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty()) return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    std::array<char, 33> hex_str;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2)\
    \ << (int)hash[i];\n    ss >> hex_str.data();\n    return std::string(hex_str.data());",
  "    if(text.empty()) return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    std::stringstream\
    \ ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n        ss << std::hex\
    \ << std::setw(2) << std::setfill('0') << (int)result[i];\n    }\n    return ss.str();",
  "    // your code here\n    if(text.length()==0)\n        return {};\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    std::string result;\n    if(text.empty())\n        return std::nullopt;\n \
    \   else{\n        std::stringstream ss;\n        ss << std::hex << std::hash<std::string>{}(text);\n\
    \        result = ss.str();\n        return result;\n    }", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);    \n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::string res;\n    for(int i\
    \ = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)text[i];\n    }\n  \
    \  ss >> res;\n    return res;", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash_value;\n    md5::md5(text.c_str(), text.length(), hash_value.data());\n\
    \    for (int i = 0; i < 16; ++i) {\n        ss << std::setw(2) << static_cast<unsigned>(hash_value[i]);\n\
    \    }\n    return ss.str();", "  if (text.empty()) {\n    return std::nullopt;\n\
    \  }\n  std::string result;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n  char mdString[33];\n\
    \  for (int i = 0; i < 16; i++) {\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned\
    \ int)digest[i]);\n  }\n  result = mdString;\n  return result;", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&result);\n  \
    \  char buf[33];\n    for (int i=0; i<16; i++)\n        sprintf(&buf[i*2], \"\
    %02x\", (unsigned int)result[i]);\n    return std::string(buf);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) {\n        ss << std::setw(2) << (int)i;\n    }\n    return\
    \ ss.str();", "    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto& c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto\
    \ i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();", " \
    \   if(text.empty())\n        return std::nullopt;\n    std::string result;\n\
    \    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash) ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    if(text.length() == 0)\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<std::uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n\
    \    md5::md5_init(&state);\n    md5::md5_append(&state, (const md5::md5_byte_t\
    \ *)text.c_str(), text.length());\n    md5::md5_finish(&state, hash.data());\n\
    \    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string hash = \"\";\n    std::string hex_digits = \"0123456789abcdef\"\
    ;\n    std::string text_bytes = \"\";\n    for(char c : text)\n        text_bytes\
    \ += std::bitset<8>(c).to_string();\n    std::string padded_text_bytes = text_bytes;\n\
    \    while(padded_text_bytes.size() % 512 != 448)\n        padded_text_bytes +=\
    \ \"0\";\n    padded_text_bytes += std::bitset<64>(text_bytes.size()).to_string();\n\
    \    std::vector<std::bitset<512>> blocks;\n    for(int i = 0; i < padded_text_bytes.size();\
    \ i += 512)\n        blocks.push_back(std::bitset<512>(padded_text_bytes.substr(i,\
    \ 512)));\n    std::vector<std::bitset<32>> h = {\n        std::bitset<32>(\"\
    01234567\"),\n        std::bitset<32>(\"89abcdef\"),\n        std::bitset<32>(\"\
    fedcba98\"),\n        std::bitset<32>(\"76543210\")\n    };\n    std::vector<std::bitset<32>>\
    \ k = {\n        std::bitset<32>(\"d76aa478\"),\n        std::bitset<32>(\"e8c7b756\"\
    ),\n        std::bitset<32>(\"242070db\"),\n        std::bitset<32>(\"c1bdceee\"\
    ),\n        std::bitset<32>(\"f57c0faf\"),\n        std::bitset<32>(\"4787c62a\"\
    ),\n        std::bitset<32>(\"a8304613\"),\n        std::bitset<32>(\"fd469501\"\
    ),\n        std::bitset<32>(\"698098d8\"),\n        std::bitset<32>(\"8b44f7af\"\
    ),\n        std::bitset<32>(\"ffff5bb1\"),\n        std::bitset<32>(\"895cd7be\"\
    ),\n        std::bitset<32>", "  if (text.empty()) {\n    return std::nullopt;\n\
    \  }\n  std::string result;\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned\
    \ char*)text.c_str(), text.size(), (unsigned char*)&digest);\n  char buf[2];\n\
    \  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    sprintf(buf, \"%02x\", digest[i]);\n\
    \    result += buf;\n  }\n  return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char buf[2*MD5_DIGEST_LENGTH+1];\n    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n \
    \   for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(&buf[i*2], \"\
    %02x\", (unsigned int)digest[i]);\n    result = std::string(buf);\n    return\
    \ result;", "    if(text.empty())\n        return std::nullopt;\n    unsigned\
    \ char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n   \
    \ MD5_Update(&ctx, text.c_str(), text.length());\n    MD5_Final(digest, &ctx);\n\
    \    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    return std::string(mdString);", " \
    \   // your code here\n    if(text.empty())\n        return {};\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    // your code here\n    if(text.empty())\n        return std::nullopt;\n   \
    \ std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto& i : hash)\
    \ {\n        ss << std::setw(2) << (int)i;\n    }\n    return ss.str();", "  \
    \  if(text.empty())\n        return std::nullopt;\n    std::string result;\n \
    \   unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)&text[0],\
    \ text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto byte : hash)\n        ss << std::setw(2) << (int)byte;\n    return\
    \ ss.str();", "    // your code here\n    std::string result;\n    if(text.empty())\n\
    \        return std::nullopt;\n    else\n    {\n        std::stringstream ss;\n\
    \        ss << std::hex << std::hash<std::string>{}(text);\n        result = ss.str();\n\
    \        return result;\n    }", "    // Your code here\n    if(text.empty())\n\
    \        return {};\n    else\n    {\n        std::stringstream ss;\n        ss\
    \ << std::hex << std::hash<std::string>{}(text);\n        return ss.str();\n \
    \   }", "    if(text.empty())\n        return std::nullopt;\n    unsigned char\
    \ result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(),\
    \ result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> digest;\n    MD5((const unsigned char*)text.c_str(), text.size(),\
    \ digest.data());\n    for(auto i : digest)\n        ss << std::setw(2) << (int)i;\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    std::array<char, 33> hex_digits\
    \ = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e',\
    \ 'f'};\n    MD5((unsigned char*)text.c_str(), text.length(), hash.data());\n\
    \    for(int i = 0; i < 16; i++) {\n        ss << std::setw(2) << (int)hash[i];\n\
    \    }\n    result = ss.str();\n    return result;", "    if(text.empty()) return\
    \ std::nullopt;\n    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&digest);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)digest[i]);\n    result = mdString;\n    return result;",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<std::uint8_t, 16> hash;\n\
    \    std::array<char, 33> hex_str;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5::md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for(std::size_t i = 0; i < hash.size();\
    \ ++i) {\n        ss << std::setw(2) << static_cast<unsigned>(hash[i]);\n    }\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    // Your code here\n\
    \    if(text.empty())\n        return {};\n    std::stringstream ss;\n    ss <<\
    \ std::hex << std::hash<std::string>{}(text);\n    return ss.str();", "    if(text.empty())\
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto i : hash) ss << std::setw(2) << (int)i;\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n\
    \        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n    return\
    \ std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), result);\n    std::stringstream ss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return std::string(mdString);", "    // your code goes\
    \ here\n    if(text.empty())\n        return {};\n    std::stringstream ss;\n\
    \    ss << std::hex << std::hash<std::string>{}(text);\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    std::stringstream ss;\n\
    \    ss << std::hex << std::setfill('0');\n    std::array<unsigned char, 16> hash;\n\
    \    std::array<char, 33> hex_digest;\n    md5::md5_state_s state;\n    md5::md5_init(&state);\n\
    \    md5::md5_append(&state, (const md5::md5_byte_t *)text.c_str(), text.size());\n\
    \    md5::md5_finish(&state, hash.data());\n    for(int i = 0; i < 16; ++i)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    return ss.str();", "    // your\
    \ code here\n    if(text.length()==0)\n        return {};\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.length(), result);\n    std::stringstream\
    \ ss;\n    for(int i=0;i<MD5_DIGEST_LENGTH;i++)\n        ss<<std::hex<<(int)result[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i: hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)&text[0], text.size(), (unsigned char*)&result);\n  \
    \  char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2],\
    \ \"%02x\", (unsigned int)result[i]);\n    return std::string(mdString);", " \
    \   if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;"]
stop_tokens:
- "\n}"
