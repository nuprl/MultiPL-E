name: HumanEval_162_string_to_md5
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return\
  \ its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n\
  // >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\
  \nstd::optional<std::string> string_to_md5(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"\
  Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\
  \")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n"
completions: ["    if(text.empty())\n        return std::nullopt;\n    std::stringstream\
    \ ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned char,\
    \ 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto i : hash)\n        ss << std::setw(2) << (int)i;\n    return ss.str();",
  "    // Your code here\n    if(text.length()==0)\n    {\n        return {};\n  \
    \  }\n    else\n    {\n        std::string result;\n        unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \        char mdString[33];\n        MD5((unsigned char*)&text[0], text.size(),\
    \ (unsigned char*)&digest);\n        for(int i = 0; i < 16; i++)\n           \
    \ sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n        result\
    \ = mdString;\n        return result;\n    }", "    if(text.empty())\n       \
    \ return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> hash;\n    MD5((const unsigned char*)text.c_str(),\
    \ text.size(), hash.data());\n    for(auto i : hash)\n        ss << std::setw(2)\
    \ << (int)i;\n    return ss.str();", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // your code here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    std::array<char, 33> hex_digest;\n    MD5((const unsigned\
    \ char*)text.c_str(), text.size(), hash.data());\n    for(int i = 0; i < 16; ++i)\n\
    \        ss << std::setw(2) << (int)hash[i];\n    ss >> hex_digest.data();\n \
    \   return std::string(hex_digest.data());", "    if(text.empty()) return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);\n    char buf[2*MD5_DIGEST_LENGTH+1];\n\
    \    buf[2*MD5_DIGEST_LENGTH] = '\\0';\n    for (int i = 0; i < MD5_DIGEST_LENGTH;\
    \ i++)\n        sprintf(&buf[i*2], \"%02x\", (unsigned int)digest[i]);\n    result\
    \ = std::string(buf);\n    return result;", "    if(text.empty())\n        return\
    \ std::nullopt;\n    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n\
    \    std::array<unsigned char, 16> digest;\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n\
    \    MD5_Update(&ctx, text.c_str(), text.size());\n    MD5_Final(digest.data(),\
    \ &ctx);\n    for(auto i : digest)\n        ss << std::setw(2) << static_cast<unsigned>(i);\n\
    \    return ss.str();", "    if(text.empty()) return std::nullopt;\n    std::string\
    \ result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n    char mdString[33];\n    for(int\
    \ i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::string result;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned\
    \ char*)&text[0], text.size(), (unsigned char*)&digest);    \n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)digest[i]);\n    return mdString;", "    // your code goes here\n    if(text.empty())\n\
    \        return {};\n    std::stringstream ss;\n    ss << std::hex << std::hash<std::string>{}(text);\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(auto c : hash)\n        ss << std::setw(2) << (int)c;\n    return ss.str();",
  "    if(text.empty())\n        return std::nullopt;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n\
    \    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), text.length());\n\
    \    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(int i = 0; i <\
    \ 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\
    \    return std::string(mdString);", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<unsigned\
    \ char, 16> hash_array;\n    std::string hash_string;\n    MD5 md5 = MD5(text);\n\
    \    hash_array = md5.digest();\n    for(auto i : hash_array)\n        ss << std::setw(2)\
    \ << static_cast<unsigned>(i);\n    hash_string = ss.str();\n    return hash_string;",
  "  if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n \
    \ unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)text.c_str(),\
    \ text.size(), (unsigned char*)&digest);\n  char mdString[33];\n  for (int i =\
    \ 0; i < 16; i++) {\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n\
    \  }\n  result = mdString;\n  return result;", "    if(text.empty()) return std::nullopt;\n\
    \    std::hash<std::string> hash_fn;\n    size_t hash = hash_fn(text);\n    std::stringstream\
    \ ss;\n    ss << std::hex << hash;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    MD5((const\
    \ unsigned char*)text.c_str(), text.size(), hash.data());\n    for(auto i : hash)\n\
    \        ss << std::setw(2) << (int)i;\n    return ss.str();", "    if(text.empty())\n\
    \        return std::nullopt;\n    unsigned char result[MD5_DIGEST_LENGTH];\n\
    \    MD5((unsigned char*)text.c_str(), text.size(), result);\n    char mdString[33];\n\
    \    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned\
    \ int)result[i]);\n    return std::string(mdString);", "    if(text.empty())\n\
    \        return std::nullopt;\n    std::stringstream ss;\n    ss << std::hex <<\
    \ std::setfill('0');\n    std::array<unsigned char, 16> hash;\n    std::array<char,\
    \ 33> hex_hash;\n    MD5((const unsigned char*)text.c_str(), text.size(), hash.data());\n\
    \    for(int i = 0; i < 16; ++i)\n        ss << std::setw(2) << (int)hash[i];\n\
    \    return ss.str();", "    if(text.empty())\n        return std::nullopt;\n\
    \    std::stringstream ss;\n    ss << std::hex << std::setfill('0');\n    std::array<uint8_t,\
    \ 16> hash;\n    std::array<char, 33> hex_output;\n    md5((uint8_t*)text.c_str(),\
    \ text.size(), hash.data());\n    for(int i = 0; i < 16; ++i) {\n        ss <<\
    \ std::setw(2) << (int)hash[i];\n    }\n    return ss.str();"]
stop_tokens:
- "\n}"
