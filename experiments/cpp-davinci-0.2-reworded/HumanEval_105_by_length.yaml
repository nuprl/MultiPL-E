name: HumanEval_105_by_length
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
  \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
  \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
  , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
  .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
  \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
  Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If\
  \ the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
  // (std::vector<std::string>())\n// If the vector has any strange number ignore\
  \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n//\
  \ (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
  Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n \
  \   assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
  One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
  \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
  Eight\", (std::string)\"Four\"})));\n}\n"
completions: []
stop_tokens:
- "\n}"
