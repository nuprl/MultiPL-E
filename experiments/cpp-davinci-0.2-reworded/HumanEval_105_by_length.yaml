name: HumanEval_105_by_length
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
  \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
  \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
  , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
  .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
  \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
  Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If\
  \ the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
  // (std::vector<std::string>())\n// If the vector has any strange number ignore\
  \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n//\
  \ (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
  Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n \
  \   assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
  One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
  \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
  Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
  Eight\", (std::string)\"Four\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    std::vector<long> temp;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++) {\n        if(temp[i] == 1) {\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2) {\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3) {\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4) {\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5) {\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6) {\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7) {\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8) {\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9) {\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> result;\n    std::vector<long> temp;\n    for(int i\
    \ = 0; i < arr.size(); i++) {\n        if(arr[i] >= 1 && arr[i] <= 9) {\n    \
    \        temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++) {\n        switch(temp[i]) {\n            case 1:\n  \
    \              result.push_back(\"One\");\n                break;\n          \
    \  case 2:\n                result.push_back(\"Two\");\n                break;\n\
    \            case 3:\n                result.push_back(\"Three\");\n         \
    \       break;\n            case 4:\n                result.push_back(\"Four\"\
    );\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> res;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            res.push_back(map[i]);\n       \
    \ }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> result;\n    std::vector<long>\
    \ temp;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++) {\n        if(temp[i] == 1) {\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2) {\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3) {\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4) {\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5) {\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6) {\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7) {\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8) {\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9) {\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2]\
    \ = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"\
    Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\"\
    ;\n    map[9] = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           result.push_back(map[arr[i]]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n \
    \       }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> result;\n    std::vector<long> sorted;\n    for (auto\
    \ i : arr) {\n        if (i >= 1 && i <= 9) {\n            sorted.push_back(i);\n\
    \        }\n    }\n    std::sort(sorted.begin(), sorted.end());\n    for (auto\
    \ i : sorted) {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<std::string> result;\n\
    \    std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n \
    \       }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::map<long, std::string>\
    \ map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n\
    \    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7]\
    \ = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
  "  std::vector<std::string> result;\n  std::map<long, std::string> map;\n  map[1]\
    \ = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\";\n  map[4] = \"Four\"\
    ;\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] = \"Seven\";\n  map[8]\
    \ = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr) {\n    if (i >= 1 &&\
    \ i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n  std::sort(result.begin(),\
    \ result.end());\n  std::reverse(result.begin(), result.end());\n  return result;",
  "    std::vector<std::string> result;\n    std::vector<long> temp;\n    for(int\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] >= 1 && arr[i] <= 9) {\n  \
    \          temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++) {\n        if(temp[i] == 1) {\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2) {\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3) {\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4) {\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5) {\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6) {\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7) {\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8) {\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9) {\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::vector<long> temp;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++) {\n        if(temp[i] == 1) {\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2) {\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3) {\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4) {\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5) {\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6) {\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7) {\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8) {\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9) {\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::vector<long> tmp;\n\
    \    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            tmp.push_back(i);\n\
    \        }\n    }\n    std::sort(tmp.begin(), tmp.end());\n    std::reverse(tmp.begin(),\
    \ tmp.end());\n    for (auto i : tmp) {\n        switch (i) {\n            case\
    \ 1:\n                result.push_back(\"One\");\n                break;\n   \
    \         case 2:\n                result.push_back(\"Two\");\n              \
    \  break;\n            case 3:\n                result.push_back(\"Three\");\n\
    \                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;", "   \
    \ std::vector<std::string> res;\n    std::map<long, std::string> m = {\n     \
    \   {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4,\
    \ \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"\
    },\n        {8, \"Eight\"},\n        {9, \"Nine\"},\n    };\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (m.find(i) != m.end()) {\n\
    \            res.push_back(m[i]);\n        }\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            res.push_back(map[arr[i]]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::reverse(res.begin(), res.end());\n    return res;", " \
    \   std::vector<std::string> result;\n    std::vector<std::string> digits = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            result.push_back(digits[i - 1]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::vector<long> temp;\n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(int i = 0;\
    \ i < temp.size(); i++) {\n        if(temp[i] == 1) {\n            result.push_back(\"\
    One\");\n        }\n        else if(temp[i] == 2) {\n            result.push_back(\"\
    Two\");\n        }\n        else if(temp[i] == 3) {\n            result.push_back(\"\
    Three\");\n        }\n        else if(temp[i] == 4) {\n            result.push_back(\"\
    Four\");\n        }\n        else if(temp[i] == 5) {\n            result.push_back(\"\
    Five\");\n        }\n        else if(temp[i] == 6) {\n            result.push_back(\"\
    Six\");\n        }\n        else if(temp[i] == 7) {\n            result.push_back(\"\
    Seven\");\n        }\n        else if(temp[i] == 8) {\n            result.push_back(\"\
    Eight\");\n        }\n        else if(temp[i] == 9) {\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
