name: HumanEval_121_solution
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
  \ of integers, return the sum of all of the odd elements that are in even positions.\n\
  // Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n\
  // (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3,\
  \ (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24,\
  \ (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
  \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
  \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
completions: ["    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;", "  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;", "    // Your code here\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n \
    \           sum += lst[i];\n        }\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 &&\
    \ lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n     \
    \   }\n    }\n    return sum;", "  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;", "    long sum = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n       \
    \     sum += lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    long sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i]\
    \ % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n       \
    \     sum += lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n       \
    \     sum += lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 &&\
    \ lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "    long\
    \ sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0\
    \ && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;"]
stop_tokens:
- "\n}"
