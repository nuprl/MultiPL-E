language: cpp
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  long val = std::stol(value);\n  if (val\
    \ < 0) {\n    val = val - 0.5;\n  } else {\n    val = val + 0.5;\n  }\n  return\
    \ val;\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhvic7vr.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpvhvic7vr.cpp:17:14: error: 'stol' is not a member of 'std'\n   long val\
    \ = std::stol(value);\n              ^\n/tmp/tmpvhvic7vr.cpp: In function 'int\
    \ main()':\n/tmp/tmpvhvic7vr.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvhvic7vr.cpp:2:\n/tmp/tmpvhvic7vr.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  long\
    \ result = std::lround(num);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjju2ith.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpnjju2ith.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpnjju2ith.cpp:18:17: error:\
    \ 'lround' is not a member of 'std'\n   long result = std::lround(num);\n    \
    \             ^\n/tmp/tmpnjju2ith.cpp:18:17: note: suggested alternative:\nIn\
    \ file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpnjju2ith.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmpnjju2ith.cpp:\
    \ In function 'int main()':\n/tmp/tmpnjju2ith.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnjju2ith.cpp:2:\n/tmp/tmpnjju2ith.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double x = std::stod(value);\n\
    \  if(x < 0)\n    return std::ceil(x);\n  else\n    return std::floor(x);\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiivh3rbi.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpiivh3rbi.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ x = std::stod(value);\n              ^\n/tmp/tmpiivh3rbi.cpp: In function 'int\
    \ main()':\n/tmp/tmpiivh3rbi.cpp:25:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiivh3rbi.cpp:2:\n/tmp/tmpiivh3rbi.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpia35kh1q.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpia35kh1q.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpia35kh1q.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpia35kh1q.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpia35kh1q.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpia35kh1q.cpp: In function 'int main()':\n/tmp/tmpia35kh1q.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpia35kh1q.cpp:2:\n/tmp/tmpia35kh1q.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  return\
    \ std::lround(num);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzx5ketm.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpkzx5ketm.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpkzx5ketm.cpp:18:10: error:\
    \ 'lround' is not a member of 'std'\n   return std::lround(num);\n          ^\n\
    /tmp/tmpkzx5ketm.cpp:18:10: note: suggested alternative:\nIn file included from\
    \ /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpkzx5ketm.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmpkzx5ketm.cpp:\
    \ In function 'int main()':\n/tmp/tmpkzx5ketm.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkzx5ketm.cpp:2:\n/tmp/tmpkzx5ketm.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  if (d < 0) {\n    return std::ceil(d);\n  }\n  return std::floor(d);\n}\nint\
    \ main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\"\
    )) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36enhaua.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp36enhaua.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp36enhaua.cpp: In function 'int\
    \ main()':\n/tmp/tmp36enhaua.cpp:25:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp36enhaua.cpp:2:\n/tmp/tmp36enhaua.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double val = std::stod(value);\n \
    \   if (val < 0) {\n        return std::ceil(val);\n    }\n    return std::floor(val);\n\
    }\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwfjp38_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmptwfjp38_.cpp:17:18: error: 'stod' is not a member of 'std'\n     double\
    \ val = std::stod(value);\n                  ^\n/tmp/tmptwfjp38_.cpp: In function\
    \ 'int main()':\n/tmp/tmptwfjp38_.cpp:24:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptwfjp38_.cpp:2:\n/tmp/tmptwfjp38_.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  if\
    \ (val > 0) {\n    return std::ceil(val);\n  } else {\n    return std::floor(val);\n\
    \  }\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmw6u1lyg.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpmw6u1lyg.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpmw6u1lyg.cpp: In function\
    \ 'int main()':\n/tmp/tmpmw6u1lyg.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmw6u1lyg.cpp:2:\n/tmp/tmpmw6u1lyg.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  long\
    \ intval = std::lround(val);\n  return intval;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptj4z98y_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmptj4z98y_.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmptj4z98y_.cpp:18:17: error:\
    \ 'lround' is not a member of 'std'\n   long intval = std::lround(val);\n    \
    \             ^\n/tmp/tmptj4z98y_.cpp:18:17: note: suggested alternative:\nIn\
    \ file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmptj4z98y_.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmptj4z98y_.cpp:\
    \ In function 'int main()':\n/tmp/tmptj4z98y_.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptj4z98y_.cpp:2:\n/tmp/tmptj4z98y_.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  int len = value.length();\n  int i =\
    \ 0;\n  int num = 0;\n  int sign = 1;\n  if(value[0] == '-'){\n    sign = -1;\n\
    \    i++;\n  }\n  for(; i < len; i++){\n    if(value[i] == '.'){\n      break;\n\
    \    }\n    num = num * 10 + (value[i] - '0');\n  }\n  int decimal = 0;\n  int\
    \ j = 0;\n  for(i = i + 1; i < len; i++){\n    decimal = decimal * 10 + (value[i]\
    \ - '0');\n    j++;\n  }\n  if(decimal >= 5 * pow(10, j - 1)){\n    num++;\n \
    \ }\n  return num * sign;\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zfhycwf.cpp: In function 'int main()':\n/tmp/tmp0zfhycwf.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0zfhycwf.cpp:2:\n/tmp/tmp0zfhycwf.cpp:44:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpia35kh1q.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpia35kh1q.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpia35kh1q.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpia35kh1q.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpia35kh1q.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpia35kh1q.cpp: In function 'int main()':\n/tmp/tmpia35kh1q.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpia35kh1q.cpp:2:\n/tmp/tmpia35kh1q.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  long\
    \ int_val = std::lround(val);\n  return int_val;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphtc91_xk.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmphtc91_xk.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmphtc91_xk.cpp:18:18: error:\
    \ 'lround' is not a member of 'std'\n   long int_val = std::lround(val);\n   \
    \               ^\n/tmp/tmphtc91_xk.cpp:18:18: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmphtc91_xk.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmphtc91_xk.cpp:\
    \ In function 'int main()':\n/tmp/tmphtc91_xk.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphtc91_xk.cpp:2:\n/tmp/tmphtc91_xk.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  if (d < 0) {\n    return std::ceil(d);\n  }\n  return std::floor(d);\n}\nint\
    \ main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\"\
    )) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36enhaua.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp36enhaua.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp36enhaua.cpp: In function 'int\
    \ main()':\n/tmp/tmp36enhaua.cpp:25:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp36enhaua.cpp:2:\n/tmp/tmp36enhaua.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double d = std::stod(value);\n   \
    \ return std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3iz94_3_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp3iz94_3_.cpp:17:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmp3iz94_3_.cpp:18:12: error:\
    \ 'lround' is not a member of 'std'\n     return std::lround(d);\n           \
    \ ^\n/tmp/tmp3iz94_3_.cpp:18:12: note: suggested alternative:\nIn file included\
    \ from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmp3iz94_3_.cpp:\
    \ In function 'int main()':\n/tmp/tmp3iz94_3_.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:2:\n/tmp/tmp3iz94_3_.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  if\
    \ (val > 0) {\n    return std::ceil(val);\n  } else {\n    return std::floor(val);\n\
    \  }\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmw6u1lyg.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpmw6u1lyg.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpmw6u1lyg.cpp: In function\
    \ 'int main()':\n/tmp/tmpmw6u1lyg.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmw6u1lyg.cpp:2:\n/tmp/tmpmw6u1lyg.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double d = std::stod(value);\n   \
    \ return (long) (d > 0 ? std::floor(d + 0.5) : std::ceil(d - 0.5));\n}\nint main()\
    \ {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) ==\
    \ (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwxgznt5y.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpwxgznt5y.cpp:17:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmpwxgznt5y.cpp: In function\
    \ 'int main()':\n/tmp/tmpwxgznt5y.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwxgznt5y.cpp:2:\n/tmp/tmpwxgznt5y.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  if\
    \ (val < 0) {\n    return std::ceil(val);\n  }\n  return std::floor(val);\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpciu8dq.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpgpciu8dq.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpgpciu8dq.cpp: In function\
    \ 'int main()':\n/tmp/tmpgpciu8dq.cpp:24:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgpciu8dq.cpp:2:\n/tmp/tmpgpciu8dq.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  int i = 0;\n  int\
    \ j = 0;\n  int k = 0;\n  int l = 0;\n  int m = 0;\n  int n = 0;\n  int o = 0;\n\
    \  int p = 0;\n  int q = 0;\n  int r = 0;\n  int s = 0;\n  int t = 0;\n  int u\
    \ = 0;\n  int v = 0;\n  int w = 0;\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\
    \  int aa = 0;\n  int ab = 0;\n  int ac = 0;\n  int ad = 0;\n  int ae = 0;\n \
    \ int af = 0;\n  int ag = 0;\n  int ah = 0;\n  int ai = 0;\n  int aj = 0;\n  int\
    \ ak = 0;\n  int al = 0;\n  int am = 0;\n  int an = 0;\n  int ao = 0;\n  int ap\
    \ = 0;\n  int aq = 0;\n  int ar = 0;\n  int as = 0;\n  int at = 0;\n  int au =\
    \ 0;\n  int av = 0;\n  int aw = 0;\n  int ax = 0;\n  int ay = 0;\n  int az = 0;\n\
    \  int ba = 0;\n  int bb = 0;\n  int bc = 0;\n  int bd = 0;\n  int be = 0;\n \
    \ int bf = 0;\n  int bg = 0;\n  int bh = 0;\n  int bi = 0;\n  int bj = 0;\n  int\
    \ bk = 0;\n  int bl = 0;\n  int bm = 0;\n  int bn = 0;\n  int bo = 0;\n  int bp\
    \ = 0;\n  int bq = 0;\n  int br = 0;\n  int bs = 0;\n  int bt = 0;\n  int bu =\
    \ 0;\n  int bv = 0;\n  int bw = 0;\n  int bx = 0;\n  int by = 0;\n\n}\nint main()\
    \ {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) ==\
    \ (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp230x9l0j.cpp: In function 'int main()':\n/tmp/tmp230x9l0j.cpp:90:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp230x9l0j.cpp:2:\n/tmp/tmp230x9l0j.cpp:91:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  double\
    \ floor_num = std::floor(num);\n  double ceil_num = std::ceil(num);\n  double\
    \ diff_floor = num - floor_num;\n  double diff_ceil = ceil_num - num;\n  if (diff_floor\
    \ == diff_ceil) {\n    return (long)ceil_num;\n  }\n  if (diff_floor < diff_ceil)\
    \ {\n    return (long)floor_num;\n  }\n  return (long)ceil_num;\n}\nint main()\
    \ {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) ==\
    \ (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0o6uh3k8.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp0o6uh3k8.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmp0o6uh3k8.cpp: In function\
    \ 'int main()':\n/tmp/tmp0o6uh3k8.cpp:31:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0o6uh3k8.cpp:2:\n/tmp/tmp0o6uh3k8.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    // your code here\n    double d =\
    \ std::stod(value);\n    return std::round(d);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqjejayjt.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpqjejayjt.cpp:18:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmpqjejayjt.cpp:19:12: error:\
    \ 'round' is not a member of 'std'\n     return std::round(d);\n            ^\n\
    /tmp/tmpqjejayjt.cpp:19:12: note: suggested alternative:\nIn file included from\
    \ /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpqjejayjt.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpqjejayjt.cpp: In function 'int main()':\n/tmp/tmpqjejayjt.cpp:22:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = closest_integer;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqjejayjt.cpp:2:\n/tmp/tmpqjejayjt.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  return\
    \ std::round(num);\n}\nint main() {\n    auto candidate = closest_integer;\n \
    \   assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy6pmaht0.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpy6pmaht0.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpy6pmaht0.cpp:18:10: error:\
    \ 'round' is not a member of 'std'\n   return std::round(num);\n          ^\n\
    /tmp/tmpy6pmaht0.cpp:18:10: note: suggested alternative:\nIn file included from\
    \ /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpy6pmaht0.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpy6pmaht0.cpp: In function 'int main()':\n/tmp/tmpy6pmaht0.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = closest_integer;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy6pmaht0.cpp:2:\n/tmp/tmpy6pmaht0.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  if (d\
    \ < 0) {\n    return std::ceil(d);\n  }\n  return std::floor(d);\n}\nint main()\
    \ {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) ==\
    \ (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_imhleok.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp_imhleok.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp_imhleok.cpp: In function 'int\
    \ main()':\n/tmp/tmp_imhleok.cpp:24:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_imhleok.cpp:2:\n/tmp/tmp_imhleok.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  long\
    \ int_val = std::lround(val);\n  return int_val;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphtc91_xk.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmphtc91_xk.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmphtc91_xk.cpp:18:18: error:\
    \ 'lround' is not a member of 'std'\n   long int_val = std::lround(val);\n   \
    \               ^\n/tmp/tmphtc91_xk.cpp:18:18: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmphtc91_xk.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmphtc91_xk.cpp:\
    \ In function 'int main()':\n/tmp/tmphtc91_xk.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphtc91_xk.cpp:2:\n/tmp/tmphtc91_xk.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  if (d\
    \ < 0) {\n    return std::ceil(d);\n  }\n  return std::floor(d);\n}\nint main()\
    \ {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) ==\
    \ (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_imhleok.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp_imhleok.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp_imhleok.cpp: In function 'int\
    \ main()':\n/tmp/tmp_imhleok.cpp:24:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_imhleok.cpp:2:\n/tmp/tmp_imhleok.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    // your code here\n    double d =\
    \ std::stod(value);\n    return std::round(d);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqjejayjt.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpqjejayjt.cpp:18:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmpqjejayjt.cpp:19:12: error:\
    \ 'round' is not a member of 'std'\n     return std::round(d);\n            ^\n\
    /tmp/tmpqjejayjt.cpp:19:12: note: suggested alternative:\nIn file included from\
    \ /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpqjejayjt.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpqjejayjt.cpp: In function 'int main()':\n/tmp/tmpqjejayjt.cpp:22:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = closest_integer;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqjejayjt.cpp:2:\n/tmp/tmpqjejayjt.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  long\
    \ l = std::lround(d);\n  return l;\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1fywkhk4.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp1fywkhk4.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp1fywkhk4.cpp:18:12: error: 'lround'\
    \ is not a member of 'std'\n   long l = std::lround(d);\n            ^\n/tmp/tmp1fywkhk4.cpp:18:12:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmp1fywkhk4.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmp1fywkhk4.cpp: In function 'int main()':\n/tmp/tmp1fywkhk4.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1fywkhk4.cpp:2:\n/tmp/tmp1fywkhk4.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double num = std::stod(value);\n\
    \  if (num < 0)\n    return (long)num - 1;\n  else\n    return (long)num;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptsscwgp3.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmptsscwgp3.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmptsscwgp3.cpp: In function\
    \ 'int main()':\n/tmp/tmptsscwgp3.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptsscwgp3.cpp:2:\n/tmp/tmptsscwgp3.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  long result = 0;\n  double value_d =\
    \ std::stod(value);\n  if (value_d > 0) {\n    result = std::ceil(value_d);\n\
    \  } else {\n    result = std::floor(value_d);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\"\
    )) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m0mytnh.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp1m0mytnh.cpp:18:20: error: 'stod' is not a member of 'std'\n   double\
    \ value_d = std::stod(value);\n                    ^\n/tmp/tmp1m0mytnh.cpp: In\
    \ function 'int main()':\n/tmp/tmp1m0mytnh.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1m0mytnh.cpp:2:\n/tmp/tmp1m0mytnh.cpp:28:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double x = std::stod(value);\n  return\
    \ std::round(x);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyekxnzsh.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpyekxnzsh.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ x = std::stod(value);\n              ^\n/tmp/tmpyekxnzsh.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(x);\n          ^\n/tmp/tmpyekxnzsh.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpyekxnzsh.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpyekxnzsh.cpp: In function 'int main()':\n/tmp/tmpyekxnzsh.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyekxnzsh.cpp:2:\n/tmp/tmpyekxnzsh.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  return std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7wi46um.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpx7wi46um.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpx7wi46um.cpp:19:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpx7wi46um.cpp:19:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpx7wi46um.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpx7wi46um.cpp: In function 'int main()':\n/tmp/tmpx7wi46um.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx7wi46um.cpp:2:\n/tmp/tmpx7wi46um.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double val = std::stod(value);\n\
    \  double floor_val = std::floor(val);\n  double ceil_val = std::ceil(val);\n\
    \  if (val - floor_val < ceil_val - val) {\n    return floor_val;\n  }\n  else\
    \ {\n    return ceil_val;\n  }\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2qwk5vm0.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp2qwk5vm0.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmp2qwk5vm0.cpp: In function\
    \ 'int main()':\n/tmp/tmp2qwk5vm0.cpp:29:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2qwk5vm0.cpp:2:\n/tmp/tmp2qwk5vm0.cpp:30:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double d = std::stod(value);\n   \
    \ return std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3iz94_3_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp3iz94_3_.cpp:17:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmp3iz94_3_.cpp:18:12: error:\
    \ 'lround' is not a member of 'std'\n     return std::lround(d);\n           \
    \ ^\n/tmp/tmp3iz94_3_.cpp:18:12: note: suggested alternative:\nIn file included\
    \ from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmp3iz94_3_.cpp:\
    \ In function 'int main()':\n/tmp/tmp3iz94_3_.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:2:\n/tmp/tmp3iz94_3_.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  long l = std::lround(d);\n  return l;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5n_ycrl.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpq5n_ycrl.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpq5n_ycrl.cpp:19:12: error: 'lround'\
    \ is not a member of 'std'\n   long l = std::lround(d);\n            ^\n/tmp/tmpq5n_ycrl.cpp:19:12:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpq5n_ycrl.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpq5n_ycrl.cpp: In function 'int main()':\n/tmp/tmpq5n_ycrl.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq5n_ycrl.cpp:2:\n/tmp/tmpq5n_ycrl.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double val = std::stod(value);\n \
    \   return val >= 0 ? std::ceil(val) : std::floor(val);\n}\nint main() {\n   \
    \ auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n\
    \    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\"))\
    \ == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fwwwfb8.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp_fwwwfb8.cpp:17:18: error: 'stod' is not a member of 'std'\n     double\
    \ val = std::stod(value);\n                  ^\n/tmp/tmp_fwwwfb8.cpp: In function\
    \ 'int main()':\n/tmp/tmp_fwwwfb8.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_fwwwfb8.cpp:2:\n/tmp/tmp_fwwwfb8.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // Your code here\n  double d = std::stod(value);\n\
    \  long l = std::lround(d);\n  return l;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t8_85_x.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp0t8_85_x.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp0t8_85_x.cpp:19:12: error: 'lround'\
    \ is not a member of 'std'\n   long l = std::lround(d);\n            ^\n/tmp/tmp0t8_85_x.cpp:19:12:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmp0t8_85_x.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmp0t8_85_x.cpp: In function 'int main()':\n/tmp/tmp0t8_85_x.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0t8_85_x.cpp:2:\n/tmp/tmp0t8_85_x.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double val = std::stod(value);\n\
    \  if (val >= 0)\n    return std::ceil(val);\n  else\n    return std::floor(val);\n\
    }\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjc82aav5.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpjc82aav5.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpjc82aav5.cpp: In function\
    \ 'int main()':\n/tmp/tmpjc82aav5.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjc82aav5.cpp:2:\n/tmp/tmpjc82aav5.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  int i = 0;\n  int j = 0;\n  int x =\
    \ 0;\n  int y = 0;\n  int z = 0;\n  int a = 0;\n  int b = 0;\n  int c = 0;\n \
    \ int d = 0;\n  int e = 0;\n  int f = 0;\n  int g = 0;\n  int h = 0;\n  int k\
    \ = 0;\n  int l = 0;\n  int m = 0;\n  int n = 0;\n  int o = 0;\n  int p = 0;\n\
    \  int q = 0;\n  int r = 0;\n  int s = 0;\n  int t = 0;\n  int u = 0;\n  int v\
    \ = 0;\n  int w = 0;\n  int x1 = 0;\n  int y1 = 0;\n  int z1 = 0;\n  int a1 =\
    \ 0;\n  int b1 = 0;\n  int c1 = 0;\n  int d1 = 0;\n  int e1 = 0;\n  int f1 = 0;\n\
    \  int g1 = 0;\n  int h1 = 0;\n  int k1 = 0;\n  int l1 = 0;\n  int m1 = 0;\n \
    \ int n1 = 0;\n  int o1 = 0;\n  int p1 = 0;\n  int q1 = 0;\n  int r1 = 0;\n  int\
    \ s1 = 0;\n  int t1 = 0;\n  int u1 = 0;\n  int v1 = 0;\n  int w1 = 0;\n  int x2\
    \ = 0;\n  int y2 = 0;\n  int z2 = 0;\n  int a2 = 0;\n  int b2 = 0;\n  int c2 =\
    \ 0;\n  int d2 = 0;\n  int e2 = 0;\n  int f2 = 0;\n  int g2 = 0;\n  int h2 = 0;\n\
    \  int k2 = 0;\n  int l2 = 0;\n  int m2 = 0;\n  int n2 = 0;\n  int o2 = 0;\n \
    \ int p2 = 0;\n \n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihn33f1c.cpp: In function 'int main()':\n/tmp/tmpihn33f1c.cpp:87:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpihn33f1c.cpp:2:\n/tmp/tmpihn33f1c.cpp:88:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpia35kh1q.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpia35kh1q.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpia35kh1q.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpia35kh1q.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpia35kh1q.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpia35kh1q.cpp: In function 'int main()':\n/tmp/tmpia35kh1q.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpia35kh1q.cpp:2:\n/tmp/tmpia35kh1q.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  return std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoprtwu67.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpoprtwu67.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpoprtwu67.cpp:19:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpoprtwu67.cpp:19:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpoprtwu67.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpoprtwu67.cpp: In function 'int main()':\n/tmp/tmpoprtwu67.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoprtwu67.cpp:2:\n/tmp/tmpoprtwu67.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  return std::round(std::stod(value));\n\
    }\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpewjcwlxx.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpewjcwlxx.cpp:17:10: error: 'round' is not a member of 'std'\n   return\
    \ std::round(std::stod(value));\n          ^\n/tmp/tmpewjcwlxx.cpp:17:10: note:\
    \ suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpewjcwlxx.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpewjcwlxx.cpp:17:21: error: 'stod' is not a\
    \ member of 'std'\n   return std::round(std::stod(value));\n                 \
    \    ^\n/tmp/tmpewjcwlxx.cpp: In function 'int main()':\n/tmp/tmpewjcwlxx.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpewjcwlxx.cpp:2:\n/tmp/tmpewjcwlxx.cpp:21:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double val = std::stod(value);\n\
    \  if (val > 0) {\n    return std::ceil(val);\n  } else {\n    return std::floor(val);\n\
    \  }\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbv92vab.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmplbv92vab.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmplbv92vab.cpp: In function\
    \ 'int main()':\n/tmp/tmplbv92vab.cpp:26:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplbv92vab.cpp:2:\n/tmp/tmplbv92vab.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double val = std::stod(value);\n \
    \   if (val >= 0) {\n        return std::ceil(val);\n    } else {\n        return\
    \ std::floor(val);\n    }\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkkgyonf1.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpkkgyonf1.cpp:17:18: error: 'stod' is not a member of 'std'\n     double\
    \ val = std::stod(value);\n                  ^\n/tmp/tmpkkgyonf1.cpp: In function\
    \ 'int main()':\n/tmp/tmpkkgyonf1.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkkgyonf1.cpp:2:\n/tmp/tmpkkgyonf1.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double d = std::stod(value);\n   \
    \ return (d > 0) ? std::ceil(d) : std::floor(d);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcnlm2ee.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmptcnlm2ee.cpp:17:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmptcnlm2ee.cpp: In function\
    \ 'int main()':\n/tmp/tmptcnlm2ee.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptcnlm2ee.cpp:2:\n/tmp/tmptcnlm2ee.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  return std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoprtwu67.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpoprtwu67.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpoprtwu67.cpp:19:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpoprtwu67.cpp:19:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpoprtwu67.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpoprtwu67.cpp: In function 'int main()':\n/tmp/tmpoprtwu67.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoprtwu67.cpp:2:\n/tmp/tmpoprtwu67.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = stod(value);\n  return round(d);\n\
    }\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp25t6w5k.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpp25t6w5k.cpp:17:24: error: 'stod' was not declared in this scope\n   double\
    \ d = stod(value);\n                        ^\n/tmp/tmpp25t6w5k.cpp: In function\
    \ 'int main()':\n/tmp/tmpp25t6w5k.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp25t6w5k.cpp:2:\n/tmp/tmpp25t6w5k.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double val = std::stod(value);\n  if\
    \ (val > 0) {\n    return std::ceil(val);\n  } else {\n    return std::floor(val);\n\
    \  }\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmw6u1lyg.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpmw6u1lyg.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpmw6u1lyg.cpp: In function\
    \ 'int main()':\n/tmp/tmpmw6u1lyg.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmw6u1lyg.cpp:2:\n/tmp/tmpmw6u1lyg.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  std::stringstream ss(value);\n  double\
    \ d;\n  ss >> d;\n  return (long) (d + 0.5);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2hz6hbd.cpp: In function 'int main()':\n/tmp/tmpv2hz6hbd.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv2hz6hbd.cpp:2:\n/tmp/tmpv2hz6hbd.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double d = std::stod(value);\n   \
    \ return std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3iz94_3_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp3iz94_3_.cpp:17:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmp3iz94_3_.cpp:18:12: error:\
    \ 'lround' is not a member of 'std'\n     return std::lround(d);\n           \
    \ ^\n/tmp/tmp3iz94_3_.cpp:18:12: note: suggested alternative:\nIn file included\
    \ from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmp3iz94_3_.cpp:\
    \ In function 'int main()':\n/tmp/tmp3iz94_3_.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:2:\n/tmp/tmp3iz94_3_.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // Your code here\n  double d = std::stod(value);\n\
    \  return (d > 0) ? std::ceil(d) : std::floor(d);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2ds0qm_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpw2ds0qm_.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpw2ds0qm_.cpp: In function 'int\
    \ main()':\n/tmp/tmpw2ds0qm_.cpp:22:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw2ds0qm_.cpp:2:\n/tmp/tmpw2ds0qm_.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  if\
    \ (num < 0) {\n    return std::ceil(num);\n  }\n  return std::floor(num);\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7znnhoik.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp7znnhoik.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmp7znnhoik.cpp: In function\
    \ 'int main()':\n/tmp/tmp7znnhoik.cpp:24:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7znnhoik.cpp:2:\n/tmp/tmp7znnhoik.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double val = std::stod(value);\n\
    \  if(val - (int)val >= 0.5)\n    return (int)val + 1;\n  else\n    return (int)val;\n\
    }\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlgvvkju.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpmlgvvkju.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpmlgvvkju.cpp: In function\
    \ 'int main()':\n/tmp/tmpmlgvvkju.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmlgvvkju.cpp:2:\n/tmp/tmpmlgvvkju.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpia35kh1q.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpia35kh1q.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpia35kh1q.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpia35kh1q.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpia35kh1q.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpia35kh1q.cpp: In function 'int main()':\n/tmp/tmpia35kh1q.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpia35kh1q.cpp:2:\n/tmp/tmpia35kh1q.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  int n = value.size();\n\
    \  int i = 0;\n  while(value[i] != '.') i++;\n  if(value[i+1] >= '5')\n  {\n \
    \   value[i] = '\\0';\n    return atoi(value.c_str()) + 1;\n  }\n  else\n  {\n\
    \    value[i] = '\\0';\n    return atoi(value.c_str());\n  }\n}\nint main() {\n\
    \    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n\
    \    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\"))\
    \ == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphgrb8k34.cpp: In function 'int main()':\n/tmp/tmphgrb8k34.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphgrb8k34.cpp:2:\n/tmp/tmphgrb8k34.cpp:34:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  std::stringstream\
    \ ss(value);\n  double d;\n  ss >> d;\n  return round(d);\n}\nint main() {\n \
    \   auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n\
    \    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\"))\
    \ == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaltpfdyf.cpp: In function 'int main()':\n/tmp/tmpaltpfdyf.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaltpfdyf.cpp:2:\n/tmp/tmpaltpfdyf.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // Your code here\n  double d = std::stod(value);\n\
    \  return std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8obiyjc.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpi8obiyjc.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpi8obiyjc.cpp:19:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpi8obiyjc.cpp:19:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpi8obiyjc.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpi8obiyjc.cpp: In function 'int main()':\n/tmp/tmpi8obiyjc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi8obiyjc.cpp:2:\n/tmp/tmpi8obiyjc.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  if\
    \ (num > 0) {\n    return std::ceil(num);\n  } else {\n    return std::floor(num);\n\
    \  }\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf77bfqtk.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpf77bfqtk.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpf77bfqtk.cpp: In function\
    \ 'int main()':\n/tmp/tmpf77bfqtk.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf77bfqtk.cpp:2:\n/tmp/tmpf77bfqtk.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  std::stringstream\
    \ ss(value);\n  double d;\n  ss >> d;\n  if (d < 0) {\n    return std::ceil(d);\n\
    \  }\n  return std::floor(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vq_q9u2.cpp: In function 'int main()':\n/tmp/tmp3vq_q9u2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3vq_q9u2.cpp:2:\n/tmp/tmp3vq_q9u2.cpp:28:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpia35kh1q.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpia35kh1q.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpia35kh1q.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpia35kh1q.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpia35kh1q.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpia35kh1q.cpp: In function 'int main()':\n/tmp/tmpia35kh1q.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpia35kh1q.cpp:2:\n/tmp/tmpia35kh1q.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  long int val =\
    \ std::stol(value);\n  if(val>0){\n    if(val-std::floor(val)>=0.5){\n      return\
    \ std::ceil(val);\n    }\n    else{\n      return std::floor(val);\n    }\n  }\n\
    \  else{\n    if(val-std::floor(val)<=-0.5){\n      return std::ceil(val);\n \
    \   }\n    else{\n      return std::floor(val);\n    }\n  }\n}\nint main() {\n\
    \    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n\
    \    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\"))\
    \ == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s7vweky.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp2s7vweky.cpp:18:18: error: 'stol' is not a member of 'std'\n   long int\
    \ val = std::stol(value);\n                  ^\n/tmp/tmp2s7vweky.cpp: In function\
    \ 'int main()':\n/tmp/tmp2s7vweky.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2s7vweky.cpp:2:\n/tmp/tmp2s7vweky.cpp:38:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  int i = 0;\n  int\
    \ j = 0;\n  int k = 0;\n  int l = 0;\n  int m = 0;\n  int n = 0;\n  int o = 0;\n\
    \  int p = 0;\n  int q = 0;\n  int r = 0;\n  int s = 0;\n  int t = 0;\n  int u\
    \ = 0;\n  int v = 0;\n  int w = 0;\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\
    \  int aa = 0;\n  int bb = 0;\n  int cc = 0;\n  int dd = 0;\n  int ee = 0;\n \
    \ int ff = 0;\n  int gg = 0;\n  int hh = 0;\n  int ii = 0;\n  int jj = 0;\n  int\
    \ kk = 0;\n  int ll = 0;\n  int mm = 0;\n  int nn = 0;\n  int oo = 0;\n  int pp\
    \ = 0;\n  int qq = 0;\n  int rr = 0;\n  int ss = 0;\n  int tt = 0;\n  int uu =\
    \ 0;\n  int vv = 0;\n  int ww = 0;\n  int xx = 0;\n  int yy = 0;\n  int zz = 0;\n\
    \  int aaa = 0;\n  int bbb = 0;\n  int ccc = 0;\n  int ddd = 0;\n  int eee = 0;\n\
    \  int fff = 0;\n  int ggg = 0;\n  int hhh = 0;\n  int iii = 0;\n  int jjj = 0;\n\
    \  int kkk = 0;\n  int lll = 0;\n  int mmm = 0;\n  int nnn = 0;\n  int ooo = 0;\n\
    \  int ppp = 0;\n  int qqq = 0;\n  int rrr = 0;\n  int sss = 0;\n  int ttt = 0;\n\
    \  int uuu = 0;\n  int vvv = 0;\n  int www = 0\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdwnefev.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmppdwnefev.cpp:85:1: error: expected ',' or ';' before '}' token\n }\n ^\n\
    /tmp/tmppdwnefev.cpp: In function 'int main()':\n/tmp/tmppdwnefev.cpp:87:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = closest_integer;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppdwnefev.cpp:2:\n/tmp/tmppdwnefev.cpp:88:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpia35kh1q.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpia35kh1q.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpia35kh1q.cpp:18:10: error: 'round'\
    \ is not a member of 'std'\n   return std::round(d);\n          ^\n/tmp/tmpia35kh1q.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpia35kh1q.cpp:1:\n\
    /usr/include/bits/mathcalls.h:310:1: note:   'round'\n __MATHCALLX (round,, (_Mdouble_\
    \ __x), (__const__));\n ^\n/tmp/tmpia35kh1q.cpp: In function 'int main()':\n/tmp/tmpia35kh1q.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpia35kh1q.cpp:2:\n/tmp/tmpia35kh1q.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ d > 0 ? std::ceil(d) : std::floor(d);\n}\nint main() {\n    auto candidate =\
    \ closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwguboks.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpdwguboks.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpdwguboks.cpp: In function 'int\
    \ main()':\n/tmp/tmpdwguboks.cpp:21:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdwguboks.cpp:2:\n/tmp/tmpdwguboks.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // Your code here\n  double val = std::stod(value);\n\
    \  return (long)std::round(val);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1uoxi2_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpq1uoxi2_.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ val = std::stod(value);\n                ^\n/tmp/tmpq1uoxi2_.cpp:19:16: error:\
    \ 'round' is not a member of 'std'\n   return (long)std::round(val);\n       \
    \         ^\n/tmp/tmpq1uoxi2_.cpp:19:16: note: suggested alternative:\nIn file\
    \ included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpq1uoxi2_.cpp:1:\n/usr/include/bits/mathcalls.h:310:1:\
    \ note:   'round'\n __MATHCALLX (round,, (_Mdouble_ __x), (__const__));\n ^\n\
    /tmp/tmpq1uoxi2_.cpp: In function 'int main()':\n/tmp/tmpq1uoxi2_.cpp:22:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = closest_integer;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq1uoxi2_.cpp:2:\n/tmp/tmpq1uoxi2_.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = std::stod(value);\n\
    \  long l = std::lround(d);\n  return l;\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5n_ycrl.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpq5n_ycrl.cpp:18:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpq5n_ycrl.cpp:19:12: error: 'lround'\
    \ is not a member of 'std'\n   long l = std::lround(d);\n            ^\n/tmp/tmpq5n_ycrl.cpp:19:12:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpq5n_ycrl.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpq5n_ycrl.cpp: In function 'int main()':\n/tmp/tmpq5n_ycrl.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq5n_ycrl.cpp:2:\n/tmp/tmpq5n_ycrl.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  int i = 0;\n  int num = 0;\n  int num_2\
    \ = 0;\n  int num_3 = 0;\n  int num_4 = 0;\n  int num_5 = 0;\n  int num_6 = 0;\n\
    \  int num_7 = 0;\n  int num_8 = 0;\n  int num_9 = 0;\n  int num_10 = 0;\n  int\
    \ num_11 = 0;\n  int num_12 = 0;\n  int num_13 = 0;\n  int num_14 = 0;\n  int\
    \ num_15 = 0;\n  int num_16 = 0;\n  int num_17 = 0;\n  int num_18 = 0;\n  int\
    \ num_19 = 0;\n  int num_20 = 0;\n  int num_21 = 0;\n  int num_22 = 0;\n  int\
    \ num_23 = 0;\n  int num_24 = 0;\n  int num_25 = 0;\n  int num_26 = 0;\n  int\
    \ num_27 = 0;\n  int num_28 = 0;\n  int num_29 = 0;\n  int num_30 = 0;\n  int\
    \ num_31 = 0;\n  int num_32 = 0;\n  int num_33 = 0;\n  int num_34 = 0;\n  int\
    \ num_35 = 0;\n  int num_36 = 0;\n  int num_37 = 0;\n  int num_38 = 0;\n  int\
    \ num_39 = 0;\n  int num_40 = 0;\n  int num_41 = 0;\n  int num_42 = 0;\n  int\
    \ num_43 = 0;\n  int num_44 = 0;\n  int num_45 = 0;\n  int num_46 = 0;\n  int\
    \ num_47 = 0;\n  int num_48 = 0;\n  int num_49 = 0;\n  int num_50 = 0;\n  int\
    \ num_51 = 0;\n  int num_52 = 0;\n  int num_53 = 0;\n  int num_54 = 0;\n  int\
    \ num_55 = 0;\n  int num_56 = 0;\n  int\n}\nint main() {\n    auto candidate =\
    \ closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r3yxzl_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp8r3yxzl_.cpp:75:1: error: expected unqualified-id before '}' token\n }\n\
    \ ^\n/tmp/tmp8r3yxzl_.cpp: In function 'int main()':\n/tmp/tmp8r3yxzl_.cpp:77:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8r3yxzl_.cpp:2:\n/tmp/tmp8r3yxzl_.cpp:78:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ (d > 0) ? std::ceil(d) : std::floor(d);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4llz9ejt.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp4llz9ejt.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmp4llz9ejt.cpp: In function 'int\
    \ main()':\n/tmp/tmp4llz9ejt.cpp:21:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4llz9ejt.cpp:2:\n/tmp/tmp4llz9ejt.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double num = std::stod(value);\n\
    \  long int_num = std::lround(num);\n  return int_num;\n}\nint main() {\n    auto\
    \ candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n   \
    \ assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) ==\
    \ (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfluh8te3.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpfluh8te3.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpfluh8te3.cpp:19:18: error:\
    \ 'lround' is not a member of 'std'\n   long int_num = std::lround(num);\n   \
    \               ^\n/tmp/tmpfluh8te3.cpp:19:18: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmpfluh8te3.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmpfluh8te3.cpp:\
    \ In function 'int main()':\n/tmp/tmpfluh8te3.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfluh8te3.cpp:2:\n/tmp/tmpfluh8te3.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  return\
    \ (long)num;\n}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxz09vaen.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpxz09vaen.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpxz09vaen.cpp: In function\
    \ 'int main()':\n/tmp/tmpxz09vaen.cpp:21:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxz09vaen.cpp:2:\n/tmp/tmpxz09vaen.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  return 0;\n}\n\
    int main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jlfrr46.cpp: In function 'int main()':\n/tmp/tmp8jlfrr46.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8jlfrr46.cpp:2:\n/tmp/tmp8jlfrr46.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // your code here\n  double d = stod(value);\n\
    \  return round(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj79ad5b4.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpj79ad5b4.cpp:18:24: error: 'stod' was not declared in this scope\n   double\
    \ d = stod(value);\n                        ^\n/tmp/tmpj79ad5b4.cpp: In function\
    \ 'int main()':\n/tmp/tmpj79ad5b4.cpp:22:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj79ad5b4.cpp:2:\n/tmp/tmpj79ad5b4.cpp:23:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    double d = std::stod(value);\n   \
    \ return std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3iz94_3_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp3iz94_3_.cpp:17:16: error: 'stod' is not a member of 'std'\n     double\
    \ d = std::stod(value);\n                ^\n/tmp/tmp3iz94_3_.cpp:18:12: error:\
    \ 'lround' is not a member of 'std'\n     return std::lround(d);\n           \
    \ ^\n/tmp/tmp3iz94_3_.cpp:18:12: note: suggested alternative:\nIn file included\
    \ from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmp3iz94_3_.cpp:\
    \ In function 'int main()':\n/tmp/tmp3iz94_3_.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3iz94_3_.cpp:2:\n/tmp/tmp3iz94_3_.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  // Your code here\n  double num = std::stod(value);\n\
    \  if(num < 0)\n    return (long)num - 1;\n  else\n    return (long)num + 1;\n\
    }\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"\
    10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"\
    -15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpga52bpqt.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpga52bpqt.cpp:18:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmpga52bpqt.cpp: In function\
    \ 'int main()':\n/tmp/tmpga52bpqt.cpp:25:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpga52bpqt.cpp:2:\n/tmp/tmpga52bpqt.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n    // your code here\n    long result\
    \ = 0;\n    double num = std::stod(value);\n    if(num > 0){\n        result =\
    \ std::ceil(num);\n    }\n    else{\n        result = std::floor(num);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = closest_integer;\n\
    \    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) ==\
    \ (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8syhvq12.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp8syhvq12.cpp:19:18: error: 'stod' is not a member of 'std'\n     double\
    \ num = std::stod(value);\n                  ^\n/tmp/tmp8syhvq12.cpp: In function\
    \ 'int main()':\n/tmp/tmp8syhvq12.cpp:29:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8syhvq12.cpp:2:\n/tmp/tmp8syhvq12.cpp:30:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ (long) (d > 0 ? std::floor(d + 0.5) : std::ceil(d - 0.5));\n}\nint main() {\n\
    \    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n\
    \    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\"))\
    \ == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"\
    0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8t0jdy_.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmps8t0jdy_.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmps8t0jdy_.cpp: In function 'int\
    \ main()':\n/tmp/tmps8t0jdy_.cpp:21:10: error: 'candidate' does not name a type\n\
    \     auto candidate = closest_integer;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8t0jdy_.cpp:2:\n/tmp/tmps8t0jdy_.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double num = std::stod(value);\n  double\
    \ floor_num = std::floor(num);\n  double ceil_num = std::ceil(num);\n  if (num\
    \ - floor_num < ceil_num - num) {\n    return floor_num;\n  } else {\n    return\
    \ ceil_num;\n  }\n}\nint main() {\n    auto candidate = closest_integer;\n   \
    \ assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8thmfdfu.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp8thmfdfu.cpp:17:16: error: 'stod' is not a member of 'std'\n   double\
    \ num = std::stod(value);\n                ^\n/tmp/tmp8thmfdfu.cpp: In function\
    \ 'int main()':\n/tmp/tmp8thmfdfu.cpp:27:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = closest_integer;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8thmfdfu.cpp:2:\n/tmp/tmp8thmfdfu.cpp:28:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  double d = std::stod(value);\n  return\
    \ std::lround(d);\n}\nint main() {\n    auto candidate = closest_integer;\n  \
    \  assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n\
    \    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\"\
    )) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gytb4z.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmpb4gytb4z.cpp:17:14: error: 'stod' is not a member of 'std'\n   double\
    \ d = std::stod(value);\n              ^\n/tmp/tmpb4gytb4z.cpp:18:10: error: 'lround'\
    \ is not a member of 'std'\n   return std::lround(d);\n          ^\n/tmp/tmpb4gytb4z.cpp:18:10:\
    \ note: suggested alternative:\nIn file included from /usr/include/features.h:375:0,\n\
    \                 from /usr/include/assert.h:36,\n                 from /tmp/tmpb4gytb4z.cpp:1:\n\
    /usr/include/bits/mathcalls.h:331:1: note:   'lround'\n __MATHDECL (long int,lround,,\
    \ (_Mdouble_ __x));\n ^\n/tmp/tmpb4gytb4z.cpp: In function 'int main()':\n/tmp/tmpb4gytb4z.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = closest_integer;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb4gytb4z.cpp:2:\n/tmp/tmpb4gytb4z.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes a value (string) representing a number\n// and returns the closest integer\
    \ to it. If the number is equidistant\n// from two integers, round it away from\
    \ zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"\
    15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given\
    \ number is equidistant\n// from two integers, the one you should return is the\
    \ one that is the\n// farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong\
    \ closest_integer(std::string value) {\n  std::stringstream ss(value);\n  double\
    \ d;\n  ss >> d;\n  return std::lround(d);\n}\nint main() {\n    auto candidate\
    \ = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"\
    14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"\
    15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32oj7puj.cpp: In function 'long int closest_integer(std::string)':\n\
    /tmp/tmp32oj7puj.cpp:20:10: error: 'lround' is not a member of 'std'\n   return\
    \ std::lround(d);\n          ^\n/tmp/tmp32oj7puj.cpp:20:10: note: suggested alternative:\n\
    In file included from /usr/include/features.h:375:0,\n                 from /usr/include/assert.h:36,\n\
    \                 from /tmp/tmp32oj7puj.cpp:1:\n/usr/include/bits/mathcalls.h:331:1:\
    \ note:   'lround'\n __MATHDECL (long int,lround,, (_Mdouble_ __x));\n ^\n/tmp/tmp32oj7puj.cpp:\
    \ In function 'int main()':\n/tmp/tmp32oj7puj.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = closest_integer;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp32oj7puj.cpp:2:\n/tmp/tmp32oj7puj.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"10\"))\
    \ == (10));\n                            ^\n"
  stdout: ''
