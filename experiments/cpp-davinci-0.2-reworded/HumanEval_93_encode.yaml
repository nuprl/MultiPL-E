name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  // >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n\
  // (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'w';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'W';\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 32;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a'\
    \ || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] ==\
    \ 'u') {\n            result[i] = result[i] + 2;\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'A') {\n            result\
    \ += 'c';\n        } else if (message[i] == 'e' || message[i] == 'E') {\n    \
    \        result += 'g';\n        } else if (message[i] == 'i' || message[i] ==\
    \ 'I') {\n            result += 'k';\n        } else if (message[i] == 'o' ||\
    \ message[i] == 'O') {\n            result += 'q';\n        } else if (message[i]\
    \ == 'u' || message[i] == 'U') {\n            result += 'y';\n        } else if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        char\
    \ c = result[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            result[i] = 'a' + (c - 'a' + 2) % 26;\n        }\n\
    \    }\n    return result;", "    std::string encoded_message;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += message[i] - 32;\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i]\
    \ + 32;\n        } else {\n            encoded_message += message[i];\n      \
    \  }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n      \
    \  if (encoded_message[i] == 'A') {\n            encoded_message[i] = 'C';\n \
    \       } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'S';\n        } else if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 's';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            int index = vowels.find(result[i]);\n \
    \           result[i] = vowels[(index + 2) % 5];\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' ||\
    \ result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i] +\
    \ 2;\n        } else if (result[i] == 'C' || result[", "    std::string encoded;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += (char)(message[i] - 32);\n \
    \       } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string encoded_message = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            int index = vowels.find(result[i]);\n \
    \           index = (index + 2) % 5;\n            result[i] = vowels[index];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += (char)(message[i]\
    \ - 'A' + 'a');\n        } else {\n            result += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = (char)(result[i] + 2);\n        }\n    }\n\
    \    return result;", "    std::string encoded_message = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isupper(message[i])) {\n            encoded_message += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            encoded_message += toupper(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < vowels.length(); i++) {\n        for (int j = 0;\
    \ j < encoded_message.length(); j++) {\n            if (encoded_message[j] ==\
    \ vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n    \
    \        encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (char)(c - 32);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c +\
    \ 32);\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::string vowels = \"aeiou\";\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'y') {\n            result[i] = 'a';\n\
    \        } else if (result[i] == 'z') {\n            result[i] = 'b';\n      \
    \  }\n    }\n    return result;", "  std::string result;\n  std::string vowels\
    \ = \"aeiou\";\n  for (int i = 0; i < message.length(); i++) {\n    char c = message[i];\n\
    \    if (c >= 'a' && c <= 'z') {\n      c -= 32;\n    }\n    if (vowels.find(c)\
    \ != std::string::npos) {\n      c += 2;\n      if (c > 'Z') {\n        c -= 26;\n\
    \      }\n    }\n    result += c;\n  }\n  return result;"]
stop_tokens:
- "\n}"
