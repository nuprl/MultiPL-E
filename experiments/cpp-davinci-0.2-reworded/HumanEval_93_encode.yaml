name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  // >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n\
  // (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'w';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'W';\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += message[i] - 32;\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i]\
    \ + 32;\n        } else {\n            result += message[i];\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a'\
    \ || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] ==\
    \ 'u') {\n            result[i] = result[i] + 2;\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] == 'a' || message[i] == 'A') {\n            result\
    \ += 'c';\n        } else if (message[i] == 'e' || message[i] == 'E') {\n    \
    \        result += 'g';\n        } else if (message[i] == 'i' || message[i] ==\
    \ 'I') {\n            result += 'k';\n        } else if (message[i] == 'o' ||\
    \ message[i] == 'O') {\n            result += 'q';\n        } else if (message[i]\
    \ == 'u' || message[i] == 'U') {\n            result += 'y';\n        } else if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        char\
    \ c = result[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            result[i] = 'a' + (c - 'a' + 2) % 26;\n        }\n\
    \    }\n    return result;", "    std::string encoded_message;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += message[i] - 32;\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i]\
    \ + 32;\n        } else {\n            encoded_message += message[i];\n      \
    \  }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n      \
    \  if (encoded_message[i] == 'A') {\n            encoded_message[i] = 'C';\n \
    \       } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'S';\n        } else if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 's';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            int index = vowels.find(result[i]);\n \
    \           result[i] = vowels[(index + 2) % 5];\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' ||\
    \ result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i] +\
    \ 2;\n        } else if (result[i] == 'C' || result[", "    std::string encoded;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += (char)(message[i] - 32);\n \
    \       } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string encoded_message = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            int index = vowels.find(result[i]);\n \
    \           index = (index + 2) % 5;\n            result[i] = vowels[index];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += (char)(message[i]\
    \ - 'A' + 'a');\n        } else {\n            result += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = (char)(result[i] + 2);\n        }\n    }\n\
    \    return result;", "    std::string encoded_message = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isupper(message[i])) {\n            encoded_message += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            encoded_message += toupper(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < vowels.length(); i++) {\n        for (int j = 0;\
    \ j < encoded_message.length(); j++) {\n            if (encoded_message[j] ==\
    \ vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n    \
    \        encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (char)(c - 32);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c +\
    \ 32);\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::string vowels = \"aeiou\";\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'y') {\n            result[i] = 'a';\n\
    \        } else if (result[i] == 'z') {\n            result[i] = 'b';\n      \
    \  }\n    }\n    return result;", "  std::string result;\n  std::string vowels\
    \ = \"aeiou\";\n  for (int i = 0; i < message.length(); i++) {\n    char c = message[i];\n\
    \    if (c >= 'a' && c <= 'z') {\n      c -= 32;\n    }\n    if (vowels.find(c)\
    \ != std::string::npos) {\n      c += 2;\n      if (c > 'Z') {\n        c -= 26;\n\
    \      }\n    }\n    result += c;\n  }\n  return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            c = c + 2;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            c = c + 2;\n        }\n\
    \        result += c;\n    }\n    return result;", "    std::string result;\n\
    \    std::string vowels = \"aeiou\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = alphabet[(alphabet.find(result[i]) + 2) % alphabet.length()];\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            int index = vowels.find(c);\n            index = (index + 2)\
    \ % vowels.length();\n            encoded += vowels[index];\n        } else {\n\
    \            encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += tolower(message[i]);\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded.length();\
    \ j++) {\n            if (encoded[j] == vowels[i]) {\n                encoded[j]\
    \ = vowels[(i + 2) % vowels.length()];\n            }\n        }\n    }\n    return\
    \ encoded;", "    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += (char)(c - 'a' + 'A');\n   \
    \     } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c - 'A'\
    \ + 'a');\n        } else {\n            result += c;\n        }\n    }\n    for\
    \ (int i = 0; i < result.size(); i++) {\n        switch (result[i]) {\n      \
    \      case 'a':\n            case 'A':\n                result[i] = 'c';\n  \
    \              break;\n            case 'e':\n            case 'E':\n        \
    \        result[i] = 'g';\n                break;\n            case 'i':\n   \
    \         case 'I':\n                result[i] = 'k';\n                break;\n\
    \            case 'o':\n            case 'O':\n                result[i] = 'q';\n\
    \                break;\n            case 'u':\n            case 'U':\n      \
    \          result[i] = 's';\n                break;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] >= 'a' && encoded[i] <= 'z') {\n            for (int j = 0; j <\
    \ vowels.length(); j++) {\n                if (encoded[i] == vowels[j]) {\n  \
    \                  encoded[i] = vowels[(j + 2) % vowels.length()];\n         \
    \           break;\n                }\n            }\n        }\n    }\n    return\
    \ encoded;", "    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for\
    \ (int i = 0; i < encoded_message.length(); i++) {\n        if (vowels.find(encoded_message[i])\
    \ != std::string::npos) {\n            encoded_message[i] = (char)(encoded_message[i]\
    \ + 2);\n        }\n    }\n    return encoded_message;", "    std::string result;\n\
    \    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n   \
    \         result += c - 'A' + 'a';\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ == 'a') {\n            result[i] = 'c';\n        } else if (result[i] == 'e')\
    \ {\n            result[i] = 'g';\n        } else if (result[i] == 'i') {\n  \
    \          result[i] = 'k';\n        } else if (result[i] == 'o') {\n        \
    \    result[i] = 'q';\n        } else if (result[i] == 'u') {\n            result[i]\
    \ = 'w';\n        } else if (result[i] == 'A') {\n            result[i] = 'C';\n\
    \        } else if (result[i] == 'E') {\n            result[i] = 'G';\n      \
    \  } else if (result[i] == 'I') {\n            result[i] = 'K';\n        } else\
    \ if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else if (result[i]\
    \ == 'U') {\n            result[i] = 'W';\n        }\n    }\n    return result;",
  "\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\
    \tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += toupper(message[i]);\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tstd::string vowels =\
    \ \"aeiou\";\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tfor (int j =\
    \ 0; j < vowels.length(); j++) {\n\t\t\tif (result[i] == vowels[j]) {\n\t\t\t\t\
    result[i] = vowels[(j + 2) % vowels.length()];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        result += c;\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < message.length(); i++) {\n  \
    \      if (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O'\
    \ || result[i] == 'U') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'Y') {\n            result[i] = 'A';\n        } else if (result[i]\
    \ == 'Z') {\n            result[i] = 'B';\n        }\n    }\n    return result;",
  "    std::string encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        for\
    \ (int j = 0; j < encoded_message.length(); j++) {\n            if (encoded_message[j]\
    \ == vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        } else if (result[i] == 'y') {\n\
    \            result[i] = 'a';\n        } else if (result[i] == 'z') {\n      \
    \      result[i] = 'b';\n        }\n    }\n    return result;", "\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i] - 'a' + 'A');\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i]\
    \ - 'A' + 'a');\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor\
    \ (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'A' || result[i]\
    \ == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n\t\t\t\
    result[i] = (char)(result[i] + 2);\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n         \
    \   c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n         \
    \   c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = c +\
    \ 2;\n        }\n        encoded_message += c;\n    }\n    return encoded_message;",
  "    std::string vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (char\
    \ c : message) {\n        if (isupper(c)) {\n            encoded += tolower(c);\n\
    \        } else if (islower(c)) {\n            encoded += toupper(c);\n      \
    \  } else {\n            encoded += c;\n        }\n    }\n    for (int i = 0;\
    \ i < encoded.length(); i++) {\n        if (vowels.find(encoded[i]) != std::string::npos)\
    \ {\n            encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.length()];\n\
    \        }\n    }\n    return encoded;", "    std::string encoded_message = \"\
    \";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a')\
    \ {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  c = c + 2;\n        }\n        result.push_back(c);\n    }\n    return result;",
  "    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n     \
    \       c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n     \
    \       c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = c\
    \ + 2;\n        }\n        encoded += c;\n    }\n    return encoded;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] >= 'a' && result[i] <= 'z') {\n            for (int j = 0; j < vowels.length();\
    \ j++) {\n                if (result[i] == vowels[j]) {\n                    result[i]\
    \ = vowels[(j + 2) % vowels.length()];\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        char c = message[i];\n        if (isupper(c))\
    \ {\n            c = tolower(c);\n        } else if (islower(c)) {\n         \
    \   c = toupper(c);\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            c = vowels[(vowels.find(c) + 2) % vowels.length()];\n       \
    \ }\n        encoded += c;\n    }\n    return encoded;", "    std::string encoded_message\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n\
    \            if (result[i] == vowels[j]) {\n                result[i] = vowels[(j\
    \ + 2) % vowels.length()];\n            }\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;", "    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        encoded += (char)(message[i] - 'A' + 'a');\n        } else {\n      \
    \      encoded += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a' || encoded[i] == 'e' || encoded[i] ==\
    \ 'i' || encoded[i] == 'o' || encoded[i] == 'u') {\n            encoded[i] = (char)(encoded[i]\
    \ + 2);\n        }\n    }\n    return encoded;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] ==\
    \ ' ') {\n            result += ' ';\n        } else if (message[i] == 'a' ||\
    \ message[i] == 'A') {\n            result += 'c';\n        } else if (message[i]\
    \ == 'e' || message[i] == 'E') {\n            result += 'g';\n        } else if\
    \ (message[i] == 'i' || message[i] == 'I') {\n            result += 'k';\n   \
    \     } else if (message[i] == 'o' || message[i] == 'O') {\n            result\
    \ += 'q';\n        } else if (message[i] == 'u' || message[i] == 'U') {\n    \
    \        result += 'y';\n        } else if (message[i] == 'y' || message[i] ==\
    \ 'Y') {\n            result += 'a';\n        } else if (message[i] == 'b' ||\
    \ message[i] == 'B') {\n            result += 'd';\n        } else if (message[i]\
    \ == 'c' || message[i] == 'C') {\n            result += 'e';\n        } else if\
    \ (message[i] == 'd' || message[i] == 'D') {\n            result += 'f';\n   \
    \     } else if (message[i] == 'f' || message[i] == 'F') {\n            result\
    \ += 'h';\n        } else if (message[i] == 'g' || message[i] == 'G') {\n    \
    \        result += 'i';\n        } else if (message[i] == 'h' || message[i] ==\
    \ 'H') {\n            result += 'j';\n        } else if (message[i] == 'j' ||\
    \ message[i] == 'J') {\n            result += 'l';\n        } else if (message[i]\
    \ == 'k' || message[i] == 'K') {\n            result += 'm';\n        } else if\
    \ (message[i] == 'l' || message[i] == 'L') {\n            result += 'n';", " \
    \   std::string result;\n    std::string vowels = \"aeiou\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isupper(c))\
    \ {\n            c = tolower(c);\n        } else if (islower(c)) {\n         \
    \   c = toupper(c);\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            int index = vowels.find(c);\n            c = vowels[(index +\
    \ 2) % vowels.length()];\n        }\n        result += c;\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            result\
    \ += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            result\
    \ += c - 'A' + 'a';\n        } else {\n            result += c;\n        }\n \
    \   }\n    for (int i = 0; i < result.length(); i++) {\n        char c = result[i];\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         result[i] = 'a' + (c - 'a' + 2) % 26;\n        } else if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            result[i] = 'A'\
    \ + (c - 'A' + 2) % 26;\n        }\n    }\n    return result;", "\tstd::string\
    \ result;\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (isupper(message[i])) {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else if (islower(message[i])) {\n\t\t\tresult += toupper(message[i]);\n\t\
    \t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tif (vowels.find(result[i]) != std::string::npos) {\n\t\t\tresult[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::string result;\n    for (char c : message) {\n        if\
    \ (c >= 'a' && c <= 'z') {\n            result += toupper(c);\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            result += tolower(c);\n        } else\
    \ {\n            result += c;\n        }\n    }\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < result.size(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.size()];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = (c - 'a' + 2) % 26 + 'a';\n        } else if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c\
    \ = (c - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n    }\n    return\
    \ result;", "\tstd::string result;\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    result += message[i] + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (vowels.find(tolower(message[i])) != std::string::npos) {\n            encoded\
    \ += tolower(message[i]) + 2;\n        } else {\n            encoded += tolower(message[i]);\n\
    \        }\n    }\n    return encoded;", "    std::string result = \"\";\n   \
    \ std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (std::isupper(message[i])) {\n            result += std::tolower(message[i]);\n\
    \        } else if (std::islower(message[i])) {\n            result += std::toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i] - 'a' + 'A');\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i]\
    \ - 'A' + 'a');\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor\
    \ (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n\t\t\t\
    result[i] = (char)(result[i] + 2);\n\t\t} else if (result[i] == 'A' || result[i]\
    \ == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n\t\t\t\
    result[i] = (char)(result[i] + 2);\n\t\t}\n\t}\n\treturn result;", "\tstd::string\
    \ result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i] - 'a' + 'A');\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i]\
    \ - 'A' + 'a');\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor\
    \ (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n\t\t\t\
    result[i] = (char)(result[i] + 2);\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ encoded_message;\n    for (char &c : message) {\n        if (c >= 'a' && c <=\
    \ 'z') {\n            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <=\
    \ 'Z') {\n            c = c - 'A' + 'a';\n        }\n        if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c = c + 2;\n    \
    \    } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \            c = c + 2;\n        }\n        encoded_message += c;\n    }\n   \
    \ return encoded_message;", "    std::string encoded;\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 32;\n     \
    \   } else {\n            encoded += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n    \
    \        encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n        \
    \    encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n            encoded[i]\
    \ = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n\
    \        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n    \
    \    } else if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        }\
    \ else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n        } else\
    \ if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n        } else if (encoded[i]\
    \ == 'O') {\n            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U')\
    \ {\n            encoded[i] = 'W';\n        }\n    }\n    return encoded;", " \
    \   std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (char\
    \ c : message) {\n        if (isupper(c)) {\n            result += tolower(c);\n\
    \        } else if (islower(c)) {\n            result += toupper(c);\n       \
    \ } else {\n            result += c;\n        }\n        if (vowels.find(tolower(c))\
    \ != std::string::npos) {\n            result.pop_back();\n            int index\
    \ = vowels.find(tolower(c));\n            index = (index + 2) % 5;\n         \
    \   result += toupper(vowels[index]);\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (std::isupper(message[i])) {\n\
    \            result += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            result += std::toupper(message[i]);\n        } else {\n     \
    \       result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i] ==\
    \ 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'b') {\n            result[i] = 'd';\n        } else if (result[i] == 'A'\
    \ || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] ==\
    \ 'U') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'C' || result[", "    std::string result;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += c - 32;\n        }\
    \ else if (c >= 'A' && c <= 'Z') {\n            result += c + 32;\n        } else\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        for (int j = 0; j < vowels.length(); j++) {\n            if (result[i]\
    \ == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            c = vowels[(vowels.find(c) + 2) % vowels.length()];\n       \
    \ }\n        result += c;\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = (result[i] + 2 - 'a') % 26\
    \ + 'a';\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (char)(c - 'a' + 'A');\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c -\
    \ 'A' + 'a');\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;", "    std::string encoded_message = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < vowels.length(); i++) {\n        int pos = encoded_message.find(vowels[i]);\n\
    \        while (pos != std::string::npos) {\n            encoded_message[pos]\
    \ = vowels[(i + 2) % vowels.length()];\n            pos = encoded_message.find(vowels[i],\
    \ pos + 1);\n        }\n    }\n    return encoded_message;", "    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += toupper(message[i]);\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message +=\
    \ tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        int\
    \ index = encoded_message.find(vowels[i]);\n        while (index != std::string::npos)\
    \ {\n            encoded_message[index] = vowels[(i + 2) % vowels.length()];\n\
    \            index = encoded_message.find(vowels[i], index + 1);\n        }\n\
    \    }\n    return encoded_message;", "\tstd::string encoded_message;\n\tfor (int\
    \ i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n\t\t\tencoded_message += message[i] - 32;\n\t\t} else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded_message += message[i] + 32;\n\t\
    \t} else {\n\t\t\tencoded_message += message[i];\n\t\t}\n\t}\n\tstd::string vowels\
    \ = \"aeiou\";\n\tfor (int i = 0; i < vowels.length(); i++) {\n\t\tfor (int j\
    \ = 0; j < encoded_message.length(); j++) {\n\t\t\tif (encoded_message[j] == vowels[i])\
    \ {\n\t\t\t\tencoded_message[j] = vowels[(i + 2) % 5];\n\t\t\t}\n\t\t}\n\t}\n\t\
    return encoded_message;", "    std::string result;\n    std::string vowels = \"\
    aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        for\
    \ (int j = 0; j < vowels.length(); j++) {\n            if (result[i] == vowels[j])\
    \ {\n                result[i] = vowels[(j + 2) % vowels.length()];\n        \
    \    }\n        }\n    }\n    return result;", "    std::string encoded_message\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += message[i] -\
    \ 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n        \
    \    encoded_message += message[i] + 32;\n        } else {\n            encoded_message\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'S';\n        } else if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 's';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;", "\tstd::string result;\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += toupper(message[i]);\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tif (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' ||\
    \ result[i] == 'o' || result[i] == 'u') {\n\t\t\tresult[i] = result[i] + 2;\n\t\
    \t} else if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i]\
    \ == 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t} else if (result[i] == 'b')\
    \ {\n\t\t\tresult[i] = 'd';\n\t\t} else if (result[i] == 'B') {\n\t\t\tresult[i]\
    \ = 'D';\n\t\t} else if (result[i] == 'z') {\n\t\t\tresult[i] = 'b';\n\t\t} else\
    \ if (result[i] == 'Z') {\n\t\t", "    std::string result;\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i] ==\
    \ 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 1;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;", "    std::string encoded_message = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += (char)(message[i] -\
    \ 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n       \
    \     encoded_message += (char)(message[i] + 32);\n        } else {\n        \
    \    encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a') {\n\
    \            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;", "\tstd::string encoded_message = \"\";\n\t\
    std::string vowels = \"aeiou\";\n\tfor (int i = 0; i < message.length(); i++)\
    \ {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tencoded_message\
    \ += toupper(message[i]);\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n\t\t\tencoded_message += tolower(message[i]);\n\t\t} else {\n\t\t\tencoded_message\
    \ += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < encoded_message.length();\
    \ i++) {\n\t\tif (encoded_message[i] >= 'a' && encoded_message[i] <= 'z') {\n\t\
    \t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\t\tif (encoded_message[i]\
    \ == vowels[j]) {\n\t\t\t\t\tif (j + 2 >= vowels.length()) {\n\t\t\t\t\t\tencoded_message[i]\
    \ = vowels[j + 2 - vowels.length()];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tencoded_message[i]\
    \ = vowels[j + 2];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;",
  "\tstd::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\tfor (int i =\
    \ 0; i < message.length(); i++) {\n\t\tif (isupper(message[i])) {\n\t\t\tresult\
    \ += tolower(message[i]);\n\t\t} else if (islower(message[i])) {\n\t\t\tresult\
    \ += toupper(message[i]);\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t\
    }\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tfor (int j = 0; j < vowels.length();\
    \ j++) {\n\t\t\tif (result[i] == vowels[j]) {\n\t\t\t\tresult[i] = vowels[(j +\
    \ 2) % vowels.length()];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ encodedMessage = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encodedMessage += toupper(message[i]);\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encodedMessage +=\
    \ tolower(message[i]);\n        } else {\n            encodedMessage += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        for\
    \ (int j = 0; j < encodedMessage.length(); j++) {\n            if (encodedMessage[j]\
    \ == vowels[i]) {\n                encodedMessage[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encodedMessage;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += tolower(message[i]);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "\tstd::string result = \"\";\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n\t\t\tresult += message[i] - 32;\n\t\t} else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n\t\t\tresult += message[i] + 32;\n\t\t} else {\n\t\t\tresult += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'A' || result[i] == 'E' ||\
    \ result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i]\
    \ = (char)(result[i] + 2);\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a'\
    \ && c <= 'z') {\n            c -= 32;\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            c += 32;\n        }\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (c == vowels[j]) {\n                c = vowels[(j + 2)\
    \ % vowels.length()];\n                break;\n            }\n        }\n    \
    \    result += c;\n    }\n    return result;", "    std::string encoded = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded += toupper(message[i]);\n \
    \       } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += tolower(message[i]);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string result;\n    std::string vowels\
    \ = \"aeiou\";\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += tolower(c);\n        } else {\n            result +=\
    \ c;\n        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n      \
    \  if (vowels.find(result[i]) != std::string::npos) {\n            result[i] =\
    \ vowels[(vowels.find(result[i]) + 2) % vowels.size()];\n        }\n    }\n  \
    \  return result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += (char)(message[i] + 32);\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (result[i] == 'e') {\n            result[i] = 'g';\n\
    \        } else if (result[i] == 'i') {\n            result[i] = 'k';\n      \
    \  } else if (result[i] == 'o') {\n            result[i] = 'q';\n        } else\
    \ if (result[i] == 'u') {\n            result[i] = 'y';\n        } else if (result[i]\
    \ == 'A') {\n            result[i] = 'C';\n        } else if (result[i] == 'E')\
    \ {\n            result[i] = 'G';\n        } else if (result[i] == 'I') {\n  \
    \          result[i] = 'K';\n        } else if (result[i] == 'O') {\n        \
    \    result[i] = 'Q';\n        } else if (result[i] == 'U') {\n            result[i]\
    \ = 'Y';\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            result += (char)(message[i] - 'a' + 'A');\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    std::string vowels = \"aeiouAEIOU\";\n  \
    \  for (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            if (result[i] == 'U') {\n             \
    \   result[i] = 'A';\n            } else if (result[i] == 'u') {\n           \
    \     result[i] = 'a';\n            } else {\n                result[i] += 2;\n\
    \            }\n        }\n    }\n    return result;", "    std::string encoded;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += message[i] - 32;\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += message[i]\
    \ + 32;\n        } else {\n            encoded += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n  \
    \  }\n    return encoded;", "    std::string encoded_message = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;", "\tstd::string result;\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i]\
    \ - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t\
    result += message[i] + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\
    \t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] ==\
    \ 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\t}\n\t}\n\treturn result;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;", "\tstd::string result = \"\";\n\tstd::string vowels\
    \ = \"aeiou\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i] - 32;\n\t\t} else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i] +\
    \ 32;\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0;\
    \ i < result.length(); i++) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\
    \t\t\tif (result[i] == vowels[j]) {\n\t\t\t\tresult[i] = vowels[(j + 2) % vowels.length()];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;", "    std::string encoded = \"\";\n   \
    \ for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded += (char)(message[i] - 'a' + 'A');\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += (char)(message[i] - 'A' + 'a');\n        } else {\n            encoded +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length(); i++)\
    \ {\n        if (encoded[i] == 'a' || encoded[i] == 'e' || encoded[i] == 'i' ||\
    \ encoded[i] == 'o' || encoded[i] == 'u') {\n            encoded[i] = (char)(encoded[i]\
    \ + 2);\n        }\n    }\n    return encoded;", "    std::string vowels = \"\
    aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      encoded += vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n \
    \       } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "\tstd::string vowels = \"aeiou\";\n\tstd::string encoded_message\
    \ = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n\t\t\tencoded_message += (char)(message[i] + 2);\n\t\
    \t} else {\n\t\t\tencoded_message += (char)(message[i] - 32);\n\t\t}\n\t}\n\t\
    return encoded_message;", "    std::string encoded_message = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += toupper(message[i]);\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message +=\
    \ tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'y';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'Y';\n        }\n    }\n    return encoded_message;", "    std::string encoded\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     int index = vowels.find(result[i]);\n            result[i] = vowels[(index\
    \ + 2) % 5];\n        }\n    }\n    return result;", "    std::string vowels =\
    \ \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            int index = vowels.find(c);\n            encoded += vowels[(index\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += c;\n    \
    \    }\n    }\n    return encoded;", "    std::string encoded;\n    for (char\
    \ c : message) {\n        if (c >= 'a' && c <= 'z') {\n            encoded +=\
    \ toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded\
    \ += tolower(c);\n        } else {\n            encoded += c;\n        }\n   \
    \ }\n    for (int i = 0; i < encoded.size(); i++) {\n        if (encoded[i] ==\
    \ 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i] == 'e')\
    \ {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n\
    \            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n    \
    \        encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n        \
    \    encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n            encoded[i]\
    \ = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n\
    \        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n    \
    \    } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        }\
    \ else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n  \
    \  }\n    return encoded;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'A' || result[i]\
    \ == 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded_message += (char)(message[i] - 'A'\
    \ + 'a');\n        } else {\n            encoded_message += message[i];\n    \
    \    }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n    \
    \    if (encoded_message[i] == 'a' || encoded_message[i] == 'e' || encoded_message[i]\
    \ == 'i' || encoded_message[i] == 'o' || encoded_message[i] == 'u') {\n      \
    \      encoded_message[i] = (char)(encoded_message[i] + 2);\n        }\n    }\n\
    \    return encoded_message;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (vowels.find(tolower(message[i])) != std::string::npos) {\n            encoded\
    \ += vowels[(vowels.find(tolower(message[i])) + 2) % 5];\n        } else {\n \
    \           encoded += message[i];\n        }\n    }\n    return encoded;", "\t\
    std::string encoded = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\
    \tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tencoded += (char)(message[i]\
    \ - 32);\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded\
    \ += (char)(message[i] + 32);\n\t\t} else {\n\t\t\tencoded += message[i];\n\t\t\
    }\n\t}\n\tfor (int i = 0; i < encoded.length(); i++) {\n\t\tif (encoded[i] ==\
    \ 'a') {\n\t\t\tencoded[i] = 'c';\n\t\t} else if (encoded[i] == 'e') {\n\t\t\t\
    encoded[i] = 'g';\n\t\t} else if (encoded[i] == 'i') {\n\t\t\tencoded[i] = 'k';\n\
    \t\t} else if (encoded[i] == 'o') {\n\t\t\tencoded[i] = 'q';\n\t\t} else if (encoded[i]\
    \ == 'u') {\n\t\t\tencoded[i] = 'w';\n\t\t} else if (encoded[i] == 'A') {\n\t\t\
    \tencoded[i] = 'C';\n\t\t} else if (encoded[i] == 'E') {\n\t\t\tencoded[i] = 'G';\n\
    \t\t} else if (encoded[i] == 'I') {\n\t\t\tencoded[i] = 'K';\n\t\t} else if (encoded[i]\
    \ == 'O') {\n\t\t\tencoded[i] = 'Q';\n\t\t} else if (encoded[i] == 'U') {\n\t\t\
    \tencoded[i] = 'W';\n\t\t}\n\t}\n\treturn encoded;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] - 'a' + 'A';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] - 'A' + 'a';\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        } else if (result[i] == 'c' || result[i]\
    \ == 'd' || result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i]\
    \ == 'j' || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i]\
    \ == 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 1;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'B') {\n            result[i] = 'D';\n      \
    \  } else if (result[i] == 'A') {\n            result[i] = 'C';\n        } else\
    \ if (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += (char)(message[i] - 'a' + 'A');\n        }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += (char)(message[i]\
    \ - 'A' + 'a');\n        } else {\n            result += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = (char)(result[i] + 2);\n        }\n    }\n\
    \    return result;", "    std::string result;\n    std::string vowels = \"aeiou\"\
    ;\n    std::string alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string alpha_upper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n      \
    \      int index = alpha.find(message[i]);\n            result += alpha[(index\
    \ + 2) % 26];\n        } else if (alpha.find(message[i]) != std::string::npos)\
    \ {\n            int index = alpha.find(message[i]);\n            result += alpha_upper[index];\n\
    \        } else {\n            int index = alpha_upper.find(message[i]);\n   \
    \         result += alpha[index];\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    std::string vowels = \"aeiou\";\n    for (char c :\
    \ message) {\n        if (vowels.find(tolower(c)) != std::string::npos) {\n  \
    \          result += (char)((tolower(c) - 'a' + 2) % 26 + 'a');\n        } else\
    \ {\n            result += (char)((tolower(c) - 'a' + 13) % 26 + 'a');\n     \
    \   }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        } else if (result[i] == 'c' || result[i]\
    \ == 'd' || result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i]\
    \ == 'j' || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i]\
    \ == 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'b') {\n            result[i] = 'd';\n\
    \        } else if (result[i] == 'B') {\n            result[i] = 'D';\n      \
    \  } else if (result[i] == 'z') {\n            result[i] = 'b';\n        } else\
    \ if (result[i] == 'Z') {\n            result[i] = 'B';\n        }\n    }\n  \
    \  return result;", "    std::string result = \"\";\n    std::string vowels =\
    \ \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;", "    std::string encoded_message\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            c -= 32;\n        }\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            c += 2;\n            if (c > 'Z') {\n                c -= 26;\n\
    \            }\n        }\n        encoded_message += c;\n    }\n    return encoded_message;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;", "    std::string encoded_message = \"\";\n\
    \    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            encoded_message += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            encoded_message += toupper(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < vowels.length(); i++) {\n        for (int j = 0;\
    \ j < encoded_message.length(); j++) {\n            if (encoded_message[j] ==\
    \ vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        }\n\
    \    }\n    return result;", "    std::string encoded_message = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] == 'a') {\n            encoded_message[i]\
    \ = 'c';\n        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string encoded_message;\n\
    \    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < vowels.length(); i++) {\n        int j = 0;\n        while (j < encoded_message.length())\
    \ {\n            if (encoded_message[j] == vowels[i]) {\n                encoded_message[j]\
    \ = vowels[(i + 2) % vowels.length()];\n            }\n            j++;\n    \
    \    }\n    }\n    return encoded_message;", "    std::string result;\n    for\
    \ (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n            c = c\
    \ - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c\
    \ - 'A' + 'a';\n        }\n        switch (c) {\n            case 'A':\n     \
    \           c = 'C';\n                break;\n            case 'E':\n        \
    \        c = 'G';\n                break;\n            case 'I':\n           \
    \     c = 'K';\n                break;\n            case 'O':\n              \
    \  c = 'Q';\n                break;\n            case 'U':\n                c\
    \ = 'S';\n                break;\n            case 'a':\n                c = 'c';\n\
    \                break;\n            case 'e':\n                c = 'g';\n   \
    \             break;\n            case 'i':\n                c = 'k';\n      \
    \          break;\n            case 'o':\n                c = 'q';\n         \
    \       break;\n            case 'u':\n                c = 's';\n            \
    \    break;\n        }\n        result += c;\n    }\n    return result;", "  \
    \  std::string encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n\
    \    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] == ' ') {\n        \
    \    encoded_message += ' ';\n            continue;\n        }\n        if (std::islower(message[i]))\
    \ {\n            int index = alphabet.find(message[i]);\n            if (vowels.find(message[i])\
    \ != std::string::npos) {\n                encoded_message += std::toupper(alphabet[(index\
    \ + 2) % 26]);\n            } else {\n                encoded_message += std::toupper(message[i]);\n\
    \            }\n        } else {\n            int index = alphabet.find(std::tolower(message[i]));\n\
    \            if (vowels.find(std::tolower(message[i])) != std::string::npos) {\n\
    \                encoded_message += alphabet[(index + 2) % 26];\n            }\
    \ else {\n                encoded_message += message[i];\n            }\n    \
    \    }\n    }\n    return encoded_message;", "    std::string result;\n    std::string\
    \ vowels = \"aeiou\";\n    for (char c : message) {\n        if (isupper(c)) {\n\
    \            result += tolower(c);\n        } else if (islower(c)) {\n       \
    \     result += toupper(c);\n        } else {\n            result += c;\n    \
    \    }\n        if (vowels.find(tolower(c)) != std::string::npos) {\n        \
    \    result.pop_back();\n            int index = vowels.find(tolower(c));\n  \
    \          index = (index + 2) % vowels.size();\n            result += vowels[index];\n\
    \        }\n    }\n    return result;", "    std::string encoded_message = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            encoded_message += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] == 'a') {\n            encoded_message[i] = 'c';\n\
    \        } else if (encoded_message[i] == 'e') {\n            encoded_message[i]\
    \ = 'g';\n        } else if (encoded_message[i] == 'i') {\n            encoded_message[i]\
    \ = 'k';\n        } else if (encoded_message[i] == 'o') {\n            encoded_message[i]\
    \ = 'q';\n        } else if (encoded_message[i] == 'u') {\n            encoded_message[i]\
    \ = 'w';\n        } else if (encoded_message[i] == 'A') {\n            encoded_message[i]\
    \ = 'C';\n        } else if (encoded_message[i] == 'E') {\n            encoded_message[i]\
    \ = 'G';\n        } else if (encoded_message[i] == 'I') {\n            encoded_message[i]\
    \ = 'K';\n        } else if (encoded_message[i] == 'O') {\n            encoded_message[i]\
    \ = 'Q';\n        } else if (encoded_message[i] == 'U') {\n            encoded_message[i]\
    \ = 'W';\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 1;\n    \
    \    }\n    }\n    return result;", "\tstd::string result;\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n\t\t\tresult += message[i] - 32;\n\t\t}\n\t\telse if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n\t\t\tresult += message[i] + 32;\n\t\t}\n\t\telse {\n\t\
    \t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tif (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' ||\
    \ result[i] == 'O' || result[i] == 'U') {\n\t\t\tresult[i] = result[i] + 2;\n\t\
    \t}\n\t}\n\treturn result;", "    std::string encoded;\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (isupper(message[i])) {\n           \
    \ encoded += tolower(message[i]);\n        } else if (islower(message[i])) {\n\
    \            encoded += toupper(message[i]);\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        }\n    }\n    return encoded;",
  "    std::string result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n  \
    \          result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        for (int j = 0; j < vowels.length(); j++) {\n            if\
    \ (result[i] == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;", "    std::string encoded_message\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string encoded_message\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            encoded_message += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            encoded_message += toupper(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        for (int\
    \ j = 0; j < vowels.length(); j++) {\n            if (encoded_message[i] == vowels[j])\
    \ {\n                encoded_message[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (vowels.find(tolower(message[i])) != std::string::npos)\
    \ {\n            result += (char)((message[i] - 'a' + 2) % 26 + 'a');\n      \
    \  } else {\n            result += (char)(message[i] ^ 32);\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += (char)(message[i] - 'a' + 'A');\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            result += (char)(message[i]\
    \ - 'A' + 'a');\n        } else {\n            result += message[i];\n       \
    \ }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if (result[i]\
    \ == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o' || result[i]\
    \ == 'u') {\n            result[i] = (char)(result[i] + 2);\n        }\n    }\n\
    \    return result;", "    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += (char)(message[i] - 'a' + 'A');\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded += (char)(message[i]\
    \ - 'A' + 'a');\n        } else {\n            encoded += message[i];\n      \
    \  }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i]\
    \ == 'A' || encoded[i] == 'E' || encoded[i] == 'I' || encoded[i] == 'O' || encoded[i]\
    \ == 'U') {\n            encoded[i] = (char)(encoded[i] + 2);\n        }\n   \
    \ }\n    return encoded;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        } else if (result[i] == 'c' || result[i]\
    \ == 'd' || result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i]\
    \ == 'j' || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i]\
    \ == 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 1;\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += tolower(message[i]);\n        } else {\n  \
    \          result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += toupper(message[i]);\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message +=\
    \ tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (vowels.find(encoded_message[i]) != std::string::npos) {\n       \
    \     if (encoded_message[i] == 'u') {\n                encoded_message[i] = 'a';\n\
    \            } else if (encoded_message[i] == 'U') {\n                encoded_message[i]\
    \ = 'A';\n            } else {\n                encoded_message[i] += 2;\n   \
    \         }\n        }\n    }\n    return encoded_message;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       result += (char)(message[i] + 32);\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n        }\
    \ else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else if\
    \ (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'y';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'Y';\n      \
    \  }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            int index = vowels.find(result[i]);\n \
    \           if (index == 4) {\n                result[i] = 'a';\n            }\
    \ else {\n                result[i] = vowels[index + 2];\n            }\n    \
    \    }\n    }\n    return result;", "    std::string result;\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            result += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = (char)(result[i] + 2);\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n      \
    \  if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n         \
    \   c = (c - 'A' + 2) % 26 + 'A';\n        } else if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            c = (c - 'a' + 2) % 26 + 'a';\n\
    \        }\n        result += c;\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n    \
    \    if (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] >= 'a' && result[i] <= 'z') {\n            for (int j = 0; j < vowels.length();\
    \ j++) {\n                if (result[i] == vowels[j]) {\n                    result[i]\
    \ = vowels[(j + 2) % vowels.length()];\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += (char)(message[i] - 'A' + 'a');\n        } else {\n   \
    \         result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (char)(c - 'a' + 'A');\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += (char)(c -\
    \ 'A' + 'a');\n        } else {\n            result += c;\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        char c = result[i];\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         result[i] = (char)(c + 2);\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            result[i] = (char)(c + 2);\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    std::string\
    \ vowels = \"aeiou\";\n    for (int i = 0; i < result.length(); i++) {\n     \
    \   if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % 5];\n        }\n    }\n    return result;",
  "    std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            c = c + 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            c = c + 2;\n        }\n        result +=\
    \ c;\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n        } else if\
    \ (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n        }\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   c = c + 2;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = c + 2;\n        }\n        result += c;\n  \
    \  }\n    return result;", "    std::string result;\n    std::string vowels =\
    \ \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    std::string vowels = \"aeiou\";\n    for (char c\
    \ : message) {\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n  \
    \      }\n        if (vowels.find(c) != std::string::npos) {\n            c +=\
    \ 2;\n            if (c > 'Z') {\n                c -= 26;\n            }\n  \
    \      }\n        result += c;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(tolower(message[i])) != std::string::npos) {\n\
    \            result += tolower(message[i]) + 2;\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    return result;", "    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string encoded = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 32;\n     \
    \   } else {\n            encoded += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n    \
    \        encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n        \
    \    encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n            encoded[i]\
    \ = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n\
    \        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n    \
    \    } else if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n        }\
    \ else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n        } else\
    \ if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n        } else if (encoded[i]\
    \ == 'O') {\n            encoded[i] = 'Q';\n        } else if (encoded[i] == 'U')\
    \ {\n            encoded[i] = 'W';\n        }\n    }\n    return encoded;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            result += (char)(message[i] + 2);\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    return\
    \ result;", "    std::string encoded_message = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded_message += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded_message += tolower(message[i]);\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += (char)(message[i] - 32);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += (char)(message[i] + 32);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (result[i] == 'a') {\n \
    \           result[i] = 'c';\n        } else if (result[i] == 'e') {\n       \
    \     result[i] = 'g';\n        } else if (result[i] == 'i') {\n            result[i]\
    \ = 'k';\n        } else if (result[i] == 'o') {\n            result[i] = 'q';\n\
    \        } else if (result[i] == 'u') {\n            result[i] = 'w';\n      \
    \  } else if (result[i] == 'A') {\n            result[i] = 'C';\n        } else\
    \ if (result[i] == 'E') {\n            result[i] = 'G';\n        } else if (result[i]\
    \ == 'I') {\n            result[i] = 'K';\n        } else if (result[i] == 'O')\
    \ {\n            result[i] = 'Q';\n        } else if (result[i] == 'U') {\n  \
    \          result[i] = 'W';\n        }\n    }\n    return result;", "    std::string\
    \ encoded;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += tolower(message[i]);\n        } else {\n \
    \           encoded += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded.length(); i++) {\n        if (vowels.find(encoded[i]) != std::string::npos)\
    \ {\n            int index = vowels.find(encoded[i]);\n            encoded[i]\
    \ = vowels[(index + 2) % 5];\n        }\n    }\n    return encoded;", "    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n      \
    \  } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result +=\
    \ message[i] + 32;\n        } else {\n            result += message[i];\n    \
    \    }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        for (int\
    \ j = 0; j < vowels.length(); j++) {\n            if (result[i] == vowels[j])\
    \ {\n                result[i] = vowels[(j + 2) % vowels.length()];\n        \
    \    }\n        }\n    }\n    return result;", "    std::string result = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        switch (c) {\n            case 'A':\n                c = 'C';\n \
    \               break;\n            case 'E':\n                c = 'G';\n    \
    \            break;\n            case 'I':\n                c = 'K';\n       \
    \         break;\n            case 'O':\n                c = 'Q';\n          \
    \      break;\n            case 'U':\n                c = 'S';\n             \
    \   break;\n            case 'a':\n                c = 'c';\n                break;\n\
    \            case 'e':\n                c = 'g';\n                break;\n   \
    \         case 'i':\n                c = 'k';\n                break;\n      \
    \      case 'o':\n                c = 'q';\n                break;\n         \
    \   case 'u':\n                c = 's';\n                break;\n        }\n \
    \       result += c;\n    }\n    return result;", "    std::string encoded_message\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded_message += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded_message += (char)(message[i] - 'A' + 'a');\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n            encoded_message[i] = (char)(encoded_message[i]\
    \ + 2);\n        }\n    }\n    return encoded_message;", "    std::string result\
    \ = \"\";\n    std::string vowels = \"aeiou\";\n    std::string vowels_encoded\
    \ = \"cgjln\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        for\
    \ (int j = 0; j < vowels.length(); j++) {\n            if (result[i] == vowels[j])\
    \ {\n                result[i] = vowels_encoded[j];\n            }\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (vowels.find(message[i]) != std::string::npos) {\n            encoded += vowels[(vowels.find(message[i])\
    \ + 2) % vowels.length()];\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string vowels = \"aeiou\";\n\
    \    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (vowels.find(message[i]) != std::string::npos) {\n           \
    \ encoded += vowels[(vowels.find(message[i]) + 2) % vowels.length()];\n      \
    \  } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "    std::string result = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;", "    std::string encoded_message = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += (char)(message[i] -\
    \ 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n       \
    \     encoded_message += (char)(message[i] + 32);\n        } else {\n        \
    \    encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a') {\n\
    \            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result;\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (vowels.find(result[i]) != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i] ==\
    \ 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'b') {\n            result[i] = 'd';\n        } else if (result[i] == 'B')\
    \ {\n            result[i] = 'D';\n        } else if (result[i] == 'z') {\n  \
    \          result[i] = 'b';\n        } else if (result[i] == 'Z') {\n        \
    \    result[i] = 'B';\n        }\n    }\n    return", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;", "    std::string result;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            result += message[i] + 32;\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    return result;", "    std::string encoded_message;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encoded_message += (char)(message[i] -\
    \ 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n       \
    \     encoded_message += (char)(message[i] + 32);\n        } else {\n        \
    \    encoded_message += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a') {\n\
    \            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string encoded = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += tolower(message[i]);\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a') {\n\
    \            encoded[i] = 'c';\n        } else if (encoded[i] == 'e') {\n    \
    \        encoded[i] = 'g';\n        } else if (encoded[i] == 'i') {\n        \
    \    encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n            encoded[i]\
    \ = 'q';\n        } else if (encoded[i] == 'u') {\n            encoded[i] = 'w';\n\
    \        } else if (encoded[i] == 'A') {\n            encoded[i] = 'C';\n    \
    \    } else if (encoded[i] == 'E') {\n            encoded[i] = 'G';\n        }\
    \ else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n        } else\
    \ if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n        } else if (encoded[i]\
    \ == 'U') {\n            encoded[i] = 'W';\n        }\n    }\n    return encoded;",
  "    std::string result;\n    for (int i = 0; i < message.length(); i++) {\n   \
    \     if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;", "    std::string result = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string encoded_message = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'A')\
    \ {\n            result += 'c';\n        } else if (message[i] == 'e' || message[i]\
    \ == 'E') {\n            result += 'g';\n        } else if (message[i] == 'i'\
    \ || message[i] == 'I') {\n            result += 'k';\n        } else if (message[i]\
    \ == 'o' || message[i] == 'O') {\n            result += 'q';\n        } else if\
    \ (message[i] == 'u' || message[i] == 'U') {\n            result += 'y';\n   \
    \     } else if (message[i] == ' ') {\n            result += ' ';\n        } else\
    \ {\n            result += message[i] + 2;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (vowels.find(tolower(message[i]))\
    \ != std::string::npos) {\n            encoded += (char)(tolower(message[i]) +\
    \ 2);\n        } else {\n            encoded += (char)(tolower(message[i]));\n\
    \        }\n    }\n    return encoded;", "    std::string encoded_message = \"\
    \";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (vowels.find(tolower(message[i])) != std::string::npos) {\n\
    \            encoded_message += (char)(message[i] + 2);\n        } else {\n  \
    \          encoded_message += (char)(message[i] - 32);\n        }\n    }\n   \
    \ return encoded_message;", "    std::string result = \"\";\n    std::string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (vowels.find(result[i]) != std::string::npos) {\n       \
    \     result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            result += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n   \
    \     } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result\
    \ += message[i] - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            result += message[i] - 'A' + 'a';\n        } else {\n\
    \            result += message[i];\n        }\n    }\n    for (int i = 0; i <\
    \ result.length(); i++) {\n        if (result[i] == 'a' || result[i] == 'e' ||\
    \ result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n            result[i]\
    \ = result[i] + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' ||\
    \ result[i] == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j'\
    \ || result[i] == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] ==\
    \ 'n' || result[i] == 'p' || result[i] == 'q' || result[i] == 'r' || result[i]\
    \ == 's' || result[i] == 't' || result[i] == 'v' || result[i] == 'w' || result[i]\
    \ == 'x' || result[i] == 'y' || result[i] == 'z') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i] ==\
    \ 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'C' || result[i] == 'D' || result[i] ==\
    \ 'F' || result[i] == 'G' ||", "    std::string encodedMessage = \"\";\n    std::string\
    \ vowels = \"aeiou\";\n    std::string newVowels = \"cgjkqsxz\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (isupper(message[i])) {\n  \
    \          encodedMessage += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encodedMessage += toupper(message[i]);\n        } else {\n  \
    \          encodedMessage += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encodedMessage.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encodedMessage[i] == vowels[j]) {\n                encodedMessage[i]\
    \ = newVowels[j];\n            }\n        }\n    }\n    return encodedMessage;",
  "    std::string encoded_message;\n    for (char c : message) {\n        if (c >=\
    \ 'a' && c <= 'z') {\n            encoded_message += toupper(c);\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            encoded_message += tolower(c);\n  \
    \      } else {\n            encoded_message += c;\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.size(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            result += message[i] + 32;\n      \
    \  } else {\n            result += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < result.length(); i++) {\n        if (result[i] == 'a' || result[i]\
    \ == 'e' || result[i] == 'i' || result[i] == 'o' || result[i] == 'u') {\n    \
    \        result[i] = result[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded_message += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded_message += toupper(message[i]);\n        } else {\n \
    \           encoded_message += message[i];\n        }\n    }\n    for (int i =\
    \ 0; i < vowels.length(); i++) {\n        for (int j = 0; j < encoded_message.length();\
    \ j++) {\n            if (encoded_message[j] == vowels[i]) {\n               \
    \ encoded_message[j] = vowels[(i + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (isupper(c)) {\n            result += tolower(c);\n        } else\
    \ if (islower(c)) {\n            result += toupper(c);\n        } else {\n   \
    \         result += c;\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        char c = result[i];\n        if (c == 'a') {\n            result[i]\
    \ = 'c';\n        } else if (c == 'e') {\n            result[i] = 'g';\n     \
    \   } else if (c == 'i') {\n            result[i] = 'k';\n        } else if (c\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (c == 'u') {\n  \
    \          result[i] = 'y';\n        }\n    }\n    return result;", "\tstd::string\
    \ result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tresult += message[i] - 32;\n\t\t}\n\t\t\
    else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += message[i]\
    \ + 32;\n\t\t}\n\t\telse {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int\
    \ i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'A' || result[i] ==\
    \ 'E' || result[i] == 'I' || result[i] == 'O' || result[i] == 'U') {\n\t\t\tresult[i]\
    \ += 2;\n\t\t}\n\t\telse if (result[i] == 'Y') {\n\t\t\tresult[i] = 'A';\n\t\t\
    }\n\t\telse if (result[i] == 'Z') {\n\t\t\tresult[i] = 'B';\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::string encoded = \"\";\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n       \
    \ } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n       \
    \ }\n        if (vowels.find(c) != std::string::npos) {\n            c = vowels[(vowels.find(c)\
    \ + 2) % vowels.length()];\n        }\n        encoded += c;\n    }\n    return\
    \ encoded;"]
stop_tokens:
- "\n}"
