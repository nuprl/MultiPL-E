language: cpp
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_factor = 1;\n    for (long i = 2; i <= n; i++) {\n  \
    \      if (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n\
    \            i--;\n        }\n    }\n    return largest_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \            i--;\n        }\n    }\n    return largest_prime;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while (factor\
    \ <= n) {\n        if (n % factor == 0) {\n            largest_prime_factor =\
    \ factor;\n            n /= factor;\n        } else {\n            factor += 1;\n\
    \        }\n    }\n    return largest_prime_factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: implement me\n    long i;\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: Implement me!\n    long i;\n    for (i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n      \
    \  }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i = 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            n /= i;\n            largest_prime = i;\n\
    \        }\n    }\n    return largest_prime;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp91n9txvr: /tmp/tmp91n9txvr.cpp:21: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    assert(n > 1);\n    long largest_prime_factor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            while (n % i == 0) {\n                n /= i;\n          \
    \  }\n        }\n    }\n    return largest_prime_factor;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: Implement me!\n    long i;\n    long max;\n    for(i=2;i<=n;i++){\n\
    \        if(n%i==0){\n            max=i;\n            n=n/i;\n            i--;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \            i--;\n        }\n    }\n    return largest_prime;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest = 1;\n\tfor (long i = 2; i <= n; i++) {\n\t\tif (n % i\
    \ == 0) {\n\t\t\tlargest = i;\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    long i = 2;\n    while (i * i <= n) {\n   \
    \     if (n % i == 0) {\n            largest = i;\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    if (n > largest) {\n   \
    \     largest = n;\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    long i = 2;\n    while (i * i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if (n > largest_prime)\
    \ {\n        largest_prime = n;\n    }\n    return largest_prime;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpr9ui4h9u: /tmp/tmpr9ui4h9u.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long factor = 2;\n    while (n\
    \ > 1) {\n        while (n % factor == 0) {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tn\
    \ /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn n;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while (n\
    \ > 1) {\n        while (n % factor == 0) {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n    }\n    return largest;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            n /= factor;\n        } else {\n            factor += 1;\n  \
    \      }\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long factor = 2;\n  while (n > 1) {\n    if (n % factor == 0) {\n  \
    \    n /= factor;\n    } else {\n      factor += 1;\n    }\n  }\n  return factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 0;\n    for (long i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \            i--;\n        }\n    }\n    return largest_prime;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i\
    \ = 1;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    while (n % 2 == 0) {\n       \
    \ largest_prime_factor = 2;\n        n /= 2;\n    }\n    long i = 3;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 2;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n    }\n    return largest;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long result = 0;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            result = i;\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n    \
    \        n = n / i;\n        } else {\n            i = i + 1;\n        }\n   \
    \ }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i\
    \ == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpix14j8b8: /tmp/tmpix14j8b8.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n  long largest = 0;\n  for (long i = 2; i <= n; i++) {\n    if (n % i\
    \ == 0) {\n      largest = i;\n      n /= i;\n      i = 1;\n    }\n  }\n  return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    // TODO: Implement me!\n    long largest_prime = -1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n    \
    \        n = n / i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n  \
    \  assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i * i <= n; i++) {\n        while (n % i\
    \ == 0) {\n            n /= i;\n        }\n    }\n    return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpix14j8b8: /tmp/tmpix14j8b8.cpp:20: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = -1;\n    long d = 2;\n    while (n > 1)\
    \ {\n        while (n % d == 0) {\n            largest_prime_factor = d;\n   \
    \         n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) {\n   \
    \         if (n > 1) {\n                largest_prime_factor = n;\n          \
    \  }\n            break;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            largest_prime = i;\n            while (n\
    \ % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return\
    \ largest_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   if (n > largest_prime_factor) {\n        largest_prime_factor = n;\n    }\n\
    \    return largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) {\n   \
    \     if (n % i == 0) {\n            largest_prime = i;\n            while (n\
    \ % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return\
    \ largest_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            return largest_prime_factor(n / i);\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n\tlong largest_prime_factor = 1;\n\tlong i = 2;\n\twhile (i <= n) {\n\t\
    \tif (n % i == 0) {\n\t\t\tlargest_prime_factor = i;\n\t\t\tn /= i;\n\t\t} else\
    \ {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn largest_prime_factor;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058927
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        while\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n \
    \   }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \    }\n    return largest_prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n      \
    \      n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long largest = 1;\n    for (long i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058928
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return i;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058926
