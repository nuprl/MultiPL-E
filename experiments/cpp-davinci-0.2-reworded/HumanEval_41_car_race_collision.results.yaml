language: cpp
name: HumanEval_41_car_race_collision
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may also assume that the cars are moving at the same speed.\n    //\
    \ You may also assume that the cars are infinitely strong and sturdy.\n    //\
    \ You may also assume that the cars are moving in a straight line.\n    // You\
    \ may also assume that the cars are moving in the same direction.\n    // You\
    \ may also assume that the cars are moving in a straight line.\n    // You may\
    \ also assume that the cars are moving in the same direction.\n    // You may\
    \ also assume that the cars are moving in a straight line.\n    // You may also\
    \ assume that the cars are moving in the same direction.\n    // You may also\
    \ assume that the cars are moving in a straight line.\n    // You may also assume\
    \ that the cars are moving in the same direction.\n    // You may also assume\
    \ that the cars are moving in a straight line.\n    // You may also assume that\
    \ the cars are moving in the same direction.\n    // You may also assume that\
    \ the cars are moving in a straight line.\n    // You may also assume that the\
    \ cars are moving in the same direction.\n    // You may also assume that the\
    \ cars are moving in a straight line.\n    // You may also assume that the cars\
    \ are moving in the same direction.\n    // You may also assume that the cars\
    \ are moving in a straight line.\n    // You may also assume that the cars are\
    \ moving in the same direction.\n    // You may also assume that the cars are\
    \ moving in a straight line.\n    // You may also assume that the cars are moving\
    \ in the same direction.\n    // You may also assume that the cars are moving\
    \ in a straight line.\n    // You may also assume that the cars are moving in\
    \ the same direction.\n    // You may also assume that the cars are moving in\
    \ a straight line.\n    // You may also assume that the cars are moving in the\
    \ same direction.\n    // You may also assume that the cars are moving in a straight\
    \ line.\n    // You may also assume that the cars are moving in the same direction.\n\
    \    // You may also assume that the cars are moving in a straight line.\n   \
    \ // You may also assume that the cars are moving in the same direction.\n   \
    \ // You may also assume that the cars are moving in a\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpy_ajh6lg: /tmp/tmpy_ajh6lg.cpp:46: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    // You may use any data structure you like.\n\
    \    // You may use any algorithm you like.\n    // You may use any number of\
    \ lines of code you like.\n    // You may use any number of variables you like.\n\
    \    // You may use any number of functions you like.\n    // You may use any\
    \ number of if-statements you like.\n    // You may use any number of loops you\
    \ like.\n    // You may use any number of recursive calls you like.\n    // You\
    \ may use any number of return statements you like.\n    // You may use any number\
    \ of break statements you like.\n    // You may use any number of continue statements\
    \ you like.\n    // You may use any number of goto statements you like.\n    //\
    \ You may use any number of comments you like.\n    // You may use any number\
    \ of blank lines you like.\n    // You may use any number of spaces you like.\n\
    \    // You may use any number of tabs you like.\n    // You may use any number\
    \ of newlines you like.\n    // You may use any number of semicolons you like.\n\
    \    // You may use any number of parentheses you like.\n    // You may use any\
    \ number of curly braces you like.\n    // You may use any number of square brackets\
    \ you like.\n    // You may use any number of angle brackets you like.\n    //\
    \ You may use any number of apostrophes you like.\n    // You may use any number\
    \ of quotation marks you like.\n    // You may use any number of periods you like.\n\
    \    // You may use any number of commas you like.\n    // You may use any number\
    \ of exclamation points you like.\n    // You may use any number of question marks\
    \ you like.\n    // You may use any number of colons you like.\n    // You may\
    \ use any number of dashes you like.\n    // You may use any number of underscores\
    \ you like.\n    // You may use any number of plus signs you like.\n    // You\
    \ may use any number of equal signs you like.\n    // You may use any number of\
    \ ampersands you like.\n    // You may use any number of percent signs you like.\n\
    \    // You may use any number of dollar signs you like.\n    // You\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpjzte4g06: /tmp/tmpjzte4g06.cpp:53: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = 0; j < n; j++) {\n            if(i < j) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpe95xd98i: /tmp/tmpe95xd98i.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function\n    long count = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        for(long j = 1; j <= n; j++) {\n            if(i == j) {\n      \
    \          continue;\n            }\n            if(i < j) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp1wbq6mu_: /tmp/tmp1wbq6mu_.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function\n    long count = 0;\n    long i = 0;\n    long j =\
    \ n-1;\n    while(i < n && j >= 0) {\n        if(i == j) {\n            count++;\n\
    \            i++;\n            j--;\n        }\n        else if(i < j) {\n   \
    \         count += j-i;\n            i++;\n        }\n        else {\n       \
    \     count += i-j;\n            j--;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpguawyjw_: /tmp/tmpguawyjw_.cpp:35: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    long long int i,j,count=0;\n    for(i=0;i<n;i++)\n\
    \    {\n        for(j=0;j<n;j++)\n        {\n            if(i<j)\n           \
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpz35my68h: /tmp/tmpz35my68h.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmppodywjkl: /tmp/tmppodywjkl.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpea9jrmpc: /tmp/tmpea9jrmpc.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        collisions += i;\n     \
    \   i++;\n    }\n    return collisions;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmplcyvgasq: /tmp/tmplcyvgasq.cpp:22: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp307znouy: /tmp/tmp307znouy.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    long *left_to_right = new long[n];\n    long *right_to_left = new\
    \ long[n];\n    for (long i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (left_to_right[i]\
    \ == right_to_left[j]) {\n                collisions++;\n            }\n     \
    \   }\n    }\n    return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpp1j7q44r: /tmp/tmpp1j7q44r.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO: implement this function\n    return collisions;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpg0hcc59k: /tmp/tmpg0hcc59k.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    long *left = new long[n];\n    long *right = new long[n];\n    for\
    \ (long i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i -\
    \ 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j <\
    \ n; j++) {\n            if (left[i] == right[j]) {\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}\nint main() {\n  \
    \  auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp1ipynixh: /tmp/tmp1ipynixh.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i == j) {\n                continue;\n       \
    \     }\n            if(i < j) {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpsjlpzk2s: /tmp/tmpsjlpzk2s.cpp:29: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO:  Implement\
    \ this function.\n  // You can use the following code to test your implementation:\n\
    \  // assert(car_race_collision(0) == 0);\n  // assert(car_race_collision(1) ==\
    \ 0);\n  // assert(car_race_collision(2) == 1);\n  // assert(car_race_collision(3)\
    \ == 3);\n  // assert(car_race_collision(4) == 6);\n  // assert(car_race_collision(5)\
    \ == 10);\n  // assert(car_race_collision(6) == 15);\n  // assert(car_race_collision(7)\
    \ == 21);\n  // assert(car_race_collision(8) == 28);\n  // assert(car_race_collision(9)\
    \ == 36);\n  // assert(car_race_collision(10) == 45);\n  // assert(car_race_collision(11)\
    \ == 55);\n  // assert(car_race_collision(12) == 66);\n  // assert(car_race_collision(13)\
    \ == 78);\n  // assert(car_race_collision(14) == 91);\n  // assert(car_race_collision(15)\
    \ == 105);\n  // assert(car_race_collision(16) == 120);\n  // assert(car_race_collision(17)\
    \ == 136);\n  // assert(car_race_collision(18) == 153);\n  // assert(car_race_collision(19)\
    \ == 171);\n  // assert(car_race_collision(20) == 190);\n  // assert(car_race_collision(21)\
    \ == 210);\n  // assert(car_race_collision(22) == 231);\n  // assert(car_race_collision(23)\
    \ == 253);\n  // assert(car_race_collision(24) == 276);\n  // assert(car_race_collision(25)\
    \ == 300);\n  // assert(car_race_collision(26) == 325);\n  // assert(car_race_collision(27)\
    \ == 351);\n  // assert(car_race_collision\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpr6uvevvr: /tmp/tmpr6uvevvr.cpp:46: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i == j) {\n                continue;\n       \
    \     }\n            if(i < j) {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpsjlpzk2s: /tmp/tmpsjlpzk2s.cpp:29: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpjwlf1e8w: /tmp/tmpjwlf1e8w.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n;\
    \ j++) {\n            if (i == j) continue;\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpk8m0egce: /tmp/tmpk8m0egce.cpp:23: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: Implement\
    \ this function.\n  // Hint: You can use a priority queue to keep track of the\
    \ cars.\n  // You can use a priority queue to keep track of the cars.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap.\n  // The priority queue should be a max heap.\n  // The\
    \ priority queue should be a max heap.\n  // The priority queue should be a max\
    \ heap.\n  // The priority queue should be a max heap.\n  // The priority queue\
    \ should be a max heap\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpy__dwjvq: /tmp/tmpy__dwjvq.cpp:57: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    long collisions = 0;\n    for (long i = 1; i <=\
    \ n; i++) {\n        for (long j = 1; j <= n; j++) {\n            if (i + j ==\
    \ n + 1) {\n                collisions++;\n            }\n        }\n    }\n \
    \   return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpfu4hsfjr: /tmp/tmpfu4hsfjr.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=0;j<n;j++)\n\
    \        {\n            if(i==j)\n            {\n                continue;\n \
    \           }\n            else\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpdl9phkoo: /tmp/tmpdl9phkoo.cpp:33: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // Hint:  You can use a priority queue.\n    //\
    \ Hint:  You can use a set.\n    // Hint:  You can use a map.\n    // Hint:  You\
    \ can use a vector.\n    // Hint:  You can use a deque.\n    // Hint:  You can\
    \ use a list.\n    // Hint:  You can use a stack.\n    // Hint:  You can use a\
    \ queue.\n    // Hint:  You can use a priority_queue.\n    // Hint:  You can use\
    \ a hash table.\n    // Hint:  You can use a hash map.\n    // Hint:  You can\
    \ use a hash set.\n    // Hint:  You can use a linked list.\n    // Hint:  You\
    \ can use a binary tree.\n    // Hint:  You can use a binary search tree.\n  \
    \  // Hint:  You can use a heap.\n    // Hint:  You can use a min heap.\n    //\
    \ Hint:  You can use a max heap.\n    // Hint:  You can use a segment tree.\n\
    \    // Hint:  You can use a segment tree with lazy propagation.\n    // Hint:\
    \  You can use a segment tree with lazy propagation and range updates.\n    //\
    \ Hint:  You can use a segment tree with lazy propagation and range updates and\
    \ point queries.\n    // Hint:  You can use a segment tree with lazy propagation\
    \ and range updates and range queries.\n    // Hint:  You can use a segment tree\
    \ with lazy propagation and range updates and range queries and point updates.\n\
    \    // Hint:  You can use a segment tree with lazy propagation and range updates\
    \ and range queries and range updates.\n    // Hint:  You can use a segment tree\
    \ with lazy propagation and range updates and range queries and range updates\
    \ and point queries.\n    // Hint:  You can use a segment tree with lazy propagation\
    \ and range updates and range queries and range updates and point updates.\n \
    \   // Hint:  You can use a segment tree with lazy propagation and range updates\
    \ and range queries and range updates and point queries and point updates.\n \
    \   // Hint:  You can use a segment tree with lazy propagation\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpzk7_3uxs: /tmp/tmpzk7_3uxs.cpp:45: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmprqqax1hk: /tmp/tmprqqax1hk.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can use the following code to test your\
    \ implementation:\n    // assert(car_race_collision(0) == 0);\n    // assert(car_race_collision(1)\
    \ == 0);\n    // assert(car_race_collision(2) == 1);\n    // assert(car_race_collision(3)\
    \ == 3);\n    // assert(car_race_collision(4) == 6);\n    // assert(car_race_collision(5)\
    \ == 10);\n    // assert(car_race_collision(6) == 15);\n    // assert(car_race_collision(7)\
    \ == 21);\n    // assert(car_race_collision(8) == 28);\n    // assert(car_race_collision(9)\
    \ == 36);\n    // assert(car_race_collision(10) == 45);\n    // assert(car_race_collision(11)\
    \ == 55);\n    // assert(car_race_collision(12) == 66);\n    // assert(car_race_collision(13)\
    \ == 78);\n    // assert(car_race_collision(14) == 91);\n    // assert(car_race_collision(15)\
    \ == 105);\n    // assert(car_race_collision(16) == 120);\n    // assert(car_race_collision(17)\
    \ == 136);\n    // assert(car_race_collision(18) == 153);\n    // assert(car_race_collision(19)\
    \ == 171);\n    // assert(car_race_collision(20) == 190);\n    // assert(car_race_collision(21)\
    \ == 210);\n    // assert(car_race_collision(22) == 231);\n    // assert(car_race_collision(23)\
    \ == 253);\n    // assert(car_race_collision(24) == 276);\n    // assert(car_race_collision(25)\
    \ == 300);\n    // assert(car_race_collision(26) == 325);\n    // assert(car_race_collision(27)\
    \ == 351);\n    // assert(car_race_collision(\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp8tzfm1wm: /tmp/tmp8tzfm1wm.cpp:46: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may assume that n is a power of 2.\n    // You may assume that n is\
    \ less than or equal to 2^30.\n    // You may assume that n is less than or equal\
    \ to 2^30.\n    // You may assume that n is less than or equal to 2^30.\n    //\
    \ You may assume that n is less than or equal to 2^30.\n    // You may assume\
    \ that n is less than or equal to 2^30.\n    // You may assume that n is less\
    \ than or equal to 2^30.\n    // You may assume that n is less than or equal to\
    \ 2^30.\n    // You may assume that n is less than or equal to 2^30.\n    // You\
    \ may assume that n is less than or equal to 2^30.\n    // You may assume that\
    \ n is less than or equal to 2^30.\n    // You may assume that n is less than\
    \ or equal to 2^30.\n    // You may assume that n is less than or equal to 2^30.\n\
    \    // You may assume that n is less than or equal to 2^30.\n    // You may assume\
    \ that n is less than or equal to 2^30.\n    // You may assume that n is less\
    \ than or equal to 2^30.\n    // You may assume that n is less than or equal to\
    \ 2^30.\n    // You may assume that n is less than or equal to 2^30.\n    // You\
    \ may assume that n is less than or equal to 2^30.\n    // You may assume that\
    \ n is less than or equal to 2^30.\n    // You may assume that n is less than\
    \ or equal to 2^30.\n    // You may assume that n is less than or equal to 2^30.\n\
    \    // You may assume that n is less than or equal to 2^30.\n    // You may assume\
    \ that n is less than or equal to 2^30.\n    // You may assume that n is less\
    \ than or equal to 2^30.\n    // You may assume that n is less than or equal to\
    \ 2^30.\n    // You may assume that n is less than or equal to 2^30.\n    // You\
    \ may assume that\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpghmaw6fy: /tmp/tmpghmaw6fy.cpp:45: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\treturn n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpl0r1zys9: /tmp/tmpl0r1zys9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    // The following line is a placeholder for the\
    \ return value.\n    // You may change this line, but you must also change the\
    \ return type above.\n    return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpbl_9sayd: /tmp/tmpbl_9sayd.cpp:19: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    long *left_to_right = new long[n];\n    long *right_to_left = new\
    \ long[n];\n    for (long i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (left_to_right[i]\
    \ == right_to_left[j]) {\n                collisions++;\n            }\n     \
    \   }\n    }\n    return collisions;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpp1j7q44r: /tmp/tmpp1j7q44r.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n;\
    \ j++) {\n            if (i < j) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpbaoxifm8: /tmp/tmpbaoxifm8.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long long\
    \ int count = 0;\n    long long int i = 0;\n    long long int j = n - 1;\n   \
    \ while (i < n && j >= 0) {\n        if (i == j) {\n            count += 1;\n\
    \            i++;\n            j--;\n        } else if (i < j) {\n           \
    \ count += (j - i);\n            i++;\n        } else {\n            count +=\
    \ (i - j);\n            j--;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpokbze17e: /tmp/tmpokbze17e.cpp:32: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    // You may use any data structure you like.\n\
    \    // You may assume that n is non-negative.\n    // You may assume that n is\
    \ less than or equal to 1 billion.\n    // You may assume that the input is valid.\n\
    \    // You may not use any built-in functions that solve this problem.\n    //\
    \ You may not use any built-in functions that solve subproblems.\n    // You may\
    \ not use any built-in functions that solve similar problems.\n    // You may\
    \ not use any built-in functions that solve related problems.\n    // You may\
    \ not use any built-in functions that solve any problem.\n    // You may not use\
    \ any built-in functions.\n    // You may not use any built-in data structures.\n\
    \    // You may not use any built-in data structures that solve this problem.\n\
    \    // You may not use any built-in data structures that solve subproblems.\n\
    \    // You may not use any built-in data structures that solve similar problems.\n\
    \    // You may not use any built-in data structures that solve related problems.\n\
    \    // You may not use any built-in data structures that solve any problem.\n\
    \    // You may not use any built-in data structures.\n    // You may not use\
    \ any built-in data structures that solve this problem.\n    // You may not use\
    \ any built-in data structures that solve subproblems.\n    // You may not use\
    \ any built-in data structures that solve similar problems.\n    // You may not\
    \ use any built-in data structures that solve related problems.\n    // You may\
    \ not use any built-in data structures that solve any problem.\n    // You may\
    \ not use any built-in data structures.\n    // You may not use any built-in data\
    \ structures that solve this problem.\n    // You may not use any built-in data\
    \ structures that solve subproblems.\n    // You may not use any built-in data\
    \ structures that solve similar problems.\n    // You may not use any built-in\
    \ data structures that solve related problems.\n    // You may not use any built-in\
    \ data structures that solve any problem.\n    // You may not use any built-in\
    \ data structures.\n    // You may not use any built-in data structures that solve\
    \ this problem.\n\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmplp4r1j_2: /tmp/tmplp4r1j_2.cpp:47: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092781
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long long int count = 0;\n    long long int arr[n];\n    for(long long int\
    \ i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n    sort(arr, arr\
    \ + n);\n    for(long long int i = 0; i < n; i++)\n    {\n        count += arr[i]\
    \ * (n - i - 1);\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3mwqgxky.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmp3mwqgxky.cpp:18:9: error: \u2018cin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cin\u2019?\n   18 |         cin >> arr[i];\n\
    \      |         ^~~\n      |         std::cin\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp3mwqgxky.cpp:2:\n/usr/include/c++/9/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n/tmp/tmp3mwqgxky.cpp:20:5:\
    \ error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018\
    std::sort\u2019?\n   20 |     sort(arr, arr + n);\n      |     ^~~~\n      | \
    \    std::sort\nIn file included from /usr/include/c++/9/algorithm:71,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmp3mwqgxky.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:296:1:\
    \ note: \u2018std::sort\u2019 declared here\n  296 | sort(_ExecutionPolicy&& __exec,\
    \ _RandomAccessIterator __first, _RandomAccessIterator __last);\n      | ^~~~\n"
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    // You may use any data structure you want.\n \
    \   // You may not use any other libraries.\n    // You may not use any global\
    \ variables.\n    // You may not use any \"goto\" statements.\n    // You may\
    \ not use any \"continue\" statements.\n    // You may not use any \"break\" statements.\n\
    \    // You may not use any \"return\" statements.\n    // You may not use any\
    \ \"if\" statements.\n    // You may not use any \"else\" statements.\n    //\
    \ You may not use any \"switch\" statements.\n    // You may not use any \"while\"\
    \ statements.\n    // You may not use any \"for\" statements.\n    // You may\
    \ not use any \"do\" statements.\n    // You may not use any \"try\" statements.\n\
    \    // You may not use any \"catch\" statements.\n    // You may not use any\
    \ \"throw\" statements.\n    // You may not use any \"try-catch\" statements.\n\
    \    // You may not use any \"try-catch-throw\" statements.\n    // You may not\
    \ use any \"try-throw-catch\" statements.\n    // You may not use any \"catch-try-throw\"\
    \ statements.\n    // You may not use any \"catch-throw-try\" statements.\n  \
    \  // You may not use any \"throw-try-catch\" statements.\n    // You may not\
    \ use any \"throw-catch-try\" statements.\n    // You may not use any \"try-catch-throw-catch\"\
    \ statements.\n    // You may not use any \"try-catch-catch-throw\" statements.\n\
    \    // You may not use any \"catch-try-catch-throw\" statements.\n    // You\
    \ may not use any \"catch-try-throw-catch\" statements.\n    // You may not use\
    \ any \"catch-throw-try-catch\" statements.\n    // You may not use any \"catch-throw-catch-try\"\
    \ statements.\n    // You may not use any \"throw-try-catch-catch\" statements.\n\
    \    // You may not use any \"throw-try-catch-catch\" statements.\n    // You\
    \ may not use any \"throw-catch-try-catch\" statements.\n    // You may not use\
    \ any \"throw-\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp7an9xtd8: /tmp/tmp7an9xtd8.cpp:49: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp4qx98y1s: /tmp/tmp4qx98y1s.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        long j = 0;\n        while\
    \ (j < n) {\n            if (i < j) {\n                count++;\n            }\n\
    \            j++;\n        }\n        i++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpytxhdfrb: /tmp/tmpytxhdfrb.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    return n*(n-1)/2;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmphde8br2f: /tmp/tmphde8br2f.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n;\
    \ j++) {\n            if (i != j) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpzd5qd1hr: /tmp/tmpzd5qd1hr.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    long *left = new long[n];\n    long *right = new long[n];\n    for\
    \ (long i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i -\
    \ 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j <\
    \ n; j++) {\n            if (left[i] == right[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp_45vnzcd: /tmp/tmp_45vnzcd.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i == j) {\n                continue;\n            }\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp068ulumg: /tmp/tmp068ulumg.cpp:27: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmppodywjkl: /tmp/tmppodywjkl.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpvbj9ir1b: /tmp/tmpvbj9ir1b.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // The following line is a placeholder.\n    return\
    \ n*(n-1)/2;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp7npgjzdg: /tmp/tmp7npgjzdg.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can assume that n is a positive integer.\n\
    \    // You may use any data structures you like.\n    // You may use any time\
    \ complexity you like.\n    // You may use any space complexity you like.\n  \
    \  // You may use any auxiliary space complexity you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use any number of helper methods you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper classes you like.\n\
    \    // You may use\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpapubfdyc: /tmp/tmpapubfdyc.cpp:53: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may assume that n is a power of 2.\n    // You may assume that n is\
    \ less than 2^32.\n    // You may assume that n is less than 2^64.\n    // You\
    \ may assume that n is less than 2^128.\n    // You may assume that n is less\
    \ than 2^256.\n    // You may assume that n is less than 2^512.\n    // You may\
    \ assume that n is less than 2^1024.\n    // You may assume that n is less than\
    \ 2^2048.\n    // You may assume that n is less than 2^4096.\n    // You may assume\
    \ that n is less than 2^8192.\n    // You may assume that n is less than 2^16384.\n\
    \    // You may assume that n is less than 2^32768.\n    // You may assume that\
    \ n is less than 2^65536.\n    // You may assume that n is less than 2^131072.\n\
    \    // You may assume that n is less than 2^262144.\n    // You may assume that\
    \ n is less than 2^524288.\n    // You may assume that n is less than 2^1048576.\n\
    \    // You may assume that n is less than 2^2097152.\n    // You may assume that\
    \ n is less than 2^4194304.\n    // You may assume that n is less than 2^8388608.\n\
    \    // You may assume that n is less than 2^16777216.\n    // You may assume\
    \ that n is less than 2^33554432.\n    // You may assume that n is less than 2^67108864.\n\
    \    // You may assume that n is less than 2^134217728.\n    // You may assume\
    \ that n is less than 2^268435456.\n    // You may assume that n is less than\
    \ 2^536870912.\n    // You may assume that n is less than 2^1073741824.\n    //\
    \ You may assume that n is less than 2^2147483648.\n    // You may assume that\
    \ n is less than 2^4294967296.\n    // You may assume that n\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp3r00h9ss: /tmp/tmp3r00h9ss.cpp:47: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_0bw77rq: /tmp/tmp_0bw77rq.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmppodywjkl: /tmp/tmppodywjkl.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO: implement this function\n    // You can assume that n is\
    \ always a positive integer.\n    // You can assume that n is always less than\
    \ or equal to 1,000,000.\n    // You can assume that n is always less than or\
    \ equal to 1,000,000.\n    // You can assume that n is always less than or equal\
    \ to 1,000,000.\n    // You can assume that n is always less than or equal to\
    \ 1,000,000.\n    // You can assume that n is always less than or equal to 1,000,000.\n\
    \    // You can assume that n is always less than or equal to 1,000,000.\n   \
    \ // You can assume that n is always less than or equal to 1,000,000.\n    //\
    \ You can assume that n is always less than or equal to 1,000,000.\n    // You\
    \ can assume that n is always less than or equal to 1,000,000.\n    // You can\
    \ assume that n is always less than or equal to 1,000,000.\n    // You can assume\
    \ that n is always less than or equal to 1,000,000.\n    // You can assume that\
    \ n is always less than or equal to 1,000,000.\n    // You can assume that n is\
    \ always less than or equal to 1,000,000.\n    // You can assume that n is always\
    \ less than or equal to 1,000,000.\n    // You can assume that n is always less\
    \ than or equal to 1,000,000.\n    // You can assume that n is always less than\
    \ or equal to 1,000,000.\n    // You can assume that n is always less than or\
    \ equal to 1,000,000.\n    // You can assume that n is always less than or equal\
    \ to 1,000,000.\n    // You can assume that n is always less than or equal to\
    \ 1,000,000.\n    // You can assume that n is always less than or equal to 1,000,000.\n\
    \    // You can assume that n is always less than or equal to 1,000,000.\n   \
    \ // You can assume that n is always less than or equal to 1,000,000.\n    //\
    \ You can assume that n is always less than or equal to 1,000,000\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp8pgpwgpx: /tmp/tmp8pgpwgpx.cpp:41: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j)\n          \
    \      count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpoe32ze7b: /tmp/tmpoe32ze7b.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO:  Implement this function.\n    // You may use any data structure\
    \ you want.\n    // You may use any number of auxiliary functions.\n    // You\
    \ may use any number of auxiliary data structures.\n    // You may use any number\
    \ of auxiliary variables.\n    // You may use any number of auxiliary lines of\
    \ code.\n    // You may use any number of auxiliary comments.\n    // You may\
    \ use any number of auxiliary whitespaces.\n    // You may use any number of auxiliary\
    \ newlines.\n    // You may use any number of auxiliary tabs.\n    // You may\
    \ use any number of auxiliary spaces.\n    // You may use any number of auxiliary\
    \ characters.\n    // You may use any number of auxiliary symbols.\n    // You\
    \ may use any number of auxiliary punctuations.\n    // You may use any number\
    \ of auxiliary digits.\n    // You may use any number of auxiliary letters.\n\
    \    // You may use any number of auxiliary words.\n    // You may use any number\
    \ of auxiliary sentences.\n    // You may use any number of auxiliary paragraphs.\n\
    \    // You may use any number of auxiliary pages.\n    // You may use any number\
    \ of auxiliary books.\n    // You may use any number of auxiliary libraries.\n\
    \    // You may use any number of auxiliary buildings.\n    // You may use any\
    \ number of auxiliary rooms.\n    // You may use any number of auxiliary chairs.\n\
    \    // You may use any number of auxiliary tables.\n    // You may use any number\
    \ of auxiliary computers.\n    // You may use any number of auxiliary monitors.\n\
    \    // You may use any number of auxiliary keyboards.\n    // You may use any\
    \ number of auxiliary mouses.\n    // You may use any number of auxiliary pens.\n\
    \    // You may use any number of auxiliary pencils.\n    // You may use any number\
    \ of auxiliary erasers.\n    // You may use any number of auxiliary notebooks.\n\
    \    // You may use any number of auxiliary papers.\n    // You may use any number\
    \ of auxiliary folders.\n    // You may use any number of auxiliary files.\n \
    \   // You may use any number of auxiliary documents.\n    // You may use any\
    \ number of auxiliary projects.\n    // You may use any number of auxiliary folders.\n\
    \    // You may use any number of auxiliary directories.\n    // You may\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmprgt_146q: /tmp/tmprgt_146q.cpp:58: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_f6w_hk_: /tmp/tmp_f6w_hk_.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    long count = 0;\n    long *left = new long[n];\n    long\
    \ *right = new long[n];\n    for(long i = 0; i < n; i++) {\n        std::cin >>\
    \ left[i];\n    }\n    for(long i = 0; i < n; i++) {\n        std::cin >> right[i];\n\
    \    }\n    std::sort(left, left + n);\n    std::sort(right, right + n);\n   \
    \ for(long i = 0; i < n; i++) {\n        if(left[i] < right[i]) {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660092788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    // You can use the following code to test your\
    \ function.\n    // You may change this code to test your function.\n    // You\
    \ may change this code to test your function.\n    // You may change this code\
    \ to test your function.\n    // You may change this code to test your function.\n\
    \    // You may change this code to test your function.\n    // You may change\
    \ this code to test your function.\n    // You may change this code to test your\
    \ function.\n    // You may change this code to test your function.\n    // You\
    \ may change this code to test your function.\n    // You may change this code\
    \ to test your function.\n    // You may change this code to test your function.\n\
    \    // You may change this code to test your function.\n    // You may change\
    \ this code to test your function.\n    // You may change this code to test your\
    \ function.\n    // You may change this code to test your function.\n    // You\
    \ may change this code to test your function.\n    // You may change this code\
    \ to test your function.\n    // You may change this code to test your function.\n\
    \    // You may change this code to test your function.\n    // You may change\
    \ this code to test your function.\n    // You may change this code to test your\
    \ function.\n    // You may change this code to test your function.\n    // You\
    \ may change this code to test your function.\n    // You may change this code\
    \ to test your function.\n    // You may change this code to test your function.\n\
    \    // You may change this code to test your function.\n    // You may change\
    \ this code to test your function.\n    // You may change this code to test your\
    \ function.\n    // You may change this code to test your function.\n    // You\
    \ may change this code to test your function.\n    // You may change this code\
    \ to test your function.\n    // You may change this code to test your function.\n\
    \    // You may change this code to test your function.\n    // You may change\
    \ this code to test your function.\n    // You may change this code to test your\
    \ function.\n    // You may change this code to test your function.\n    // You\
    \ may change this code to test your function.\n    // You may change\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmphigh_80f: /tmp/tmphigh_80f.cpp:55: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  Implement this function.\n    // Hint:  You may find it helpful to use a priority\
    \ queue.\n    // Hint:  You may find it helpful to use a pair.\n    // Hint: \
    \ You may find it helpful to use a lambda function.\n    // Hint:  You may find\
    \ it helpful to use a std::set.\n    // Hint:  You may find it helpful to use\
    \ a std::map.\n    // Hint:  You may find it helpful to use a std::multiset.\n\
    \    // Hint:  You may find it helpful to use a std::multimap.\n    // Hint: \
    \ You may find it helpful to use a std::unordered_set.\n    // Hint:  You may\
    \ find it helpful to use a std::unordered_map.\n    // Hint:  You may find it\
    \ helpful to use a std::unordered_multiset.\n    // Hint:  You may find it helpful\
    \ to use a std::unordered_multimap.\n    // Hint:  You may find it helpful to\
    \ use a std::stack.\n    // Hint:  You may find it helpful to use a std::queue.\n\
    \    // Hint:  You may find it helpful to use a std::deque.\n    // Hint:  You\
    \ may find it helpful to use a std::list.\n    // Hint:  You may find it helpful\
    \ to use a std::forward_list.\n    // Hint:  You may find it helpful to use a\
    \ std::vector.\n    // Hint:  You may find it helpful to use a std::array.\n \
    \   // Hint:  You may find it helpful to use a std::initializer_list.\n    //\
    \ Hint:  You may find it helpful to use a std::tuple.\n    // Hint:  You may find\
    \ it helpful to use a std::pair.\n    // Hint:  You may find it helpful to use\
    \ a std::complex.\n    // Hint:  You may find it helpful to use a std::valarray.\n\
    \    // Hint:  You may find it helpful to use a std::string.\n    // Hint:  You\
    \ may find it helpful to use a std::wstring.\n\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp4nkdwli5: /tmp/tmp4nkdwli5.cpp:42: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_f6w_hk_: /tmp/tmp_f6w_hk_.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long num_collisions\
    \ = 0;\n    // TODO: implement this function\n    return num_collisions;\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp7qfr26v3: /tmp/tmp7qfr26v3.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can use any data structure you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any time complexity\
    \ you want.\n    // You can use any space complexity you want.\n    // You can\
    \ use any number of variables you want.\n    // You can use any number of functions\
    \ you want.\n    // You can use any number of loops you want.\n    // You can\
    \ use any number of if-else statements you want.\n    // You can use any number\
    \ of return statements you want.\n    // You can use any number of print statements\
    \ you want.\n    // You can use any number of assert statements you want.\n  \
    \  // You can use any number of comments you want.\n    // You can use any number\
    \ of lines you want.\n    // You can use any number of characters you want.\n\
    \    // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want.\n   \
    \ // You can use any number of spaces you want.\n    // You can use any number\
    \ of tabs you want.\n    // You can use any number of newlines you want\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpw_8wlpj8: /tmp/tmpw_8wlpj8.cpp:54: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    // You may add additional functions and variables\
    \ as needed.\n    // You may not use any other libraries.\n    // You may not\
    \ use any data structures such as arrays, vectors, or linked lists.\n    // You\
    \ may not use any loops.\n    // You may not use any recursion.\n    // You may\
    \ not use any global variables.\n    // You may not use any goto statements.\n\
    \    // You may not use any if statements.\n    // You may not use any switch\
    \ statements.\n    // You may not use any ternary operators.\n    // You may not\
    \ use any bitwise operators.\n    // You may not use any arithmetic operators.\n\
    \    // You may not use any comparison operators.\n    // You may not use any\
    \ logical operators.\n    // You may not use any assignment operators.\n    //\
    \ You may not use any increment or decrement operators.\n    // You may not use\
    \ any comma operators.\n    // You may not use any parentheses.\n    // You may\
    \ not use any braces.\n    // You may not use any brackets.\n    // You may not\
    \ use any semicolons.\n    // You may not use any colons.\n    // You may not\
    \ use any quotes.\n    // You may not use any backticks.\n    // You may not use\
    \ any dollar signs.\n    // You may not use any at signs.\n    // You may not\
    \ use any ampersands.\n    // You may not use any percent signs.\n    // You may\
    \ not use any carets.\n    // You may not use any tildes.\n    // You may not\
    \ use any backslashes.\n    // You may not use any pipes.\n    // You may not\
    \ use any underscores.\n    // You may not use any dots.\n    // You may not use\
    \ any question marks.\n    // You may not use any exclamation points.\n    //\
    \ You may not use any plus signs.\n    // You may not use any minus signs.\n \
    \   // You may not use any asterisks.\n    // You may not use any slashes.\n \
    \   // You may not use any equal signs.\n    // You may not use any hash signs.\n\
    \    // You may not use any spaces.\n    // You may not use any tabs.\n    //\
    \ You may\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpjnd9mbli: /tmp/tmpjnd9mbli.cpp:61: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO:  Implement\
    \ this function.\n  // The following line is a placeholder.\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmputga3_ng: /tmp/tmputga3_ng.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can assume that n is a positive integer.\n\
    \    // You can assume that n is a power of 2.\n    // You can assume that n is\
    \ less than 2^32.\n    // You can assume that n is not 0.\n    // You can assume\
    \ that n is not 1.\n    // You can assume that n is not 2.\n    // You can assume\
    \ that n is not 3.\n    // You can assume that n is not 4.\n    // You can assume\
    \ that n is not 5.\n    // You can assume that n is not 6.\n    // You can assume\
    \ that n is not 7.\n    // You can assume that n is not 8.\n    // You can assume\
    \ that n is not 9.\n    // You can assume that n is not 10.\n    // You can assume\
    \ that n is not 11.\n    // You can assume that n is not 12.\n    // You can assume\
    \ that n is not 13.\n    // You can assume that n is not 14.\n    // You can assume\
    \ that n is not 15.\n    // You can assume that n is not 16.\n    // You can assume\
    \ that n is not 17.\n    // You can assume that n is not 18.\n    // You can assume\
    \ that n is not 19.\n    // You can assume that n is not 20.\n    // You can assume\
    \ that n is not 21.\n    // You can assume that n is not 22.\n    // You can assume\
    \ that n is not 23.\n    // You can assume that n is not 24.\n    // You can assume\
    \ that n is not 25.\n    // You can assume that n is not 26.\n    // You can assume\
    \ that n is not 27.\n    // You can assume that n is not 28.\n    // You can assume\
    \ that n is not 29.\n    // You can assume that n is not 30.\n    // You can assume\
    \ that n is not 31.\n    // You can assume that n is not 32.\n    // You can assume\
    \ that n is not 33.\n    // You can assume that n is not 34.\n    // You can assume\
    \ that n is not 35.\n    // You can assume that n is not 36.\n    // You can assume\
    \ that n is not 37.\n    // You\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp6pbano9s: /tmp/tmp6pbano9s.cpp:58: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long num_collisions\
    \ = 0;\n    // TODO: Implement this function.\n    return num_collisions;\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpe4x1mmow: /tmp/tmpe4x1mmow.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long count\
    \ = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j < n; j++) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_0bw77rq: /tmp/tmp_0bw77rq.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can use the following code to generate\
    \ a random input.\n    // You can use the following code to generate a random\
    \ input.\n    // The code generates n random numbers between 0 and n-1.\n    //\
    \ These numbers represent the positions of the cars moving left to right.\n  \
    \  // The numbers are sorted in ascending order.\n    // The code then generates\
    \ another set of n random numbers between 0 and n-1.\n    // These numbers represent\
    \ the positions of the cars moving right to left.\n    // The numbers are sorted\
    \ in descending order.\n    // The code then prints the two sets of numbers.\n\
    \    // You can use this code to test your function.\n    // You can also use\
    \ this code to generate a random input for your own testing.\n    // You can use\
    \ the following code to generate a random input.\n    // The code generates n\
    \ random numbers between 0 and n-1.\n    // These numbers represent the positions\
    \ of the cars moving left to right.\n    // The numbers are sorted in ascending\
    \ order.\n    // The code then generates another set of n random numbers between\
    \ 0 and n-1.\n    // These numbers represent the positions of the cars moving\
    \ right to left.\n    // The numbers are sorted in descending order.\n    // The\
    \ code then prints the two sets of numbers.\n    // You can use this code to test\
    \ your function.\n    // You can also use this code to generate a random input\
    \ for your own testing.\n    // You can use the following code to generate a random\
    \ input.\n    // The code generates n random numbers between 0 and n-1.\n    //\
    \ These numbers represent the positions of the cars moving left to right.\n  \
    \  // The numbers are sorted in ascending order.\n    // The code then generates\
    \ another set of n random numbers between 0 and n-1.\n    // These numbers represent\
    \ the positions of the cars moving right to left.\n    // The numbers are sorted\
    \ in descending order.\n    // The code then prints the two sets of numbers.\n\
    \    // You can use this code to test your function.\n    // You can also use\
    \ this code to generate a random input for your own testing.\n    // You can use\
    \ the following code to generate a random input.\n    // The code generates n\
    \ random numbers between 0 and n-1.\n    // These numbers represent\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp4mtp0yek: /tmp/tmp4mtp0yek.cpp:50: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long num_collisions\
    \ = 0;\n    // TODO:  implement this function.\n    // Hint:  use a priority queue\
    \ to keep track of the cars.\n    //        You can use the STL priority queue,\
    \ or you can implement your own.\n    //        If you implement your own, you\
    \ can use the following struct:\n    //        struct Car {\n    //          \
    \  long position;\n    //            bool is_left_to_right;\n    //          \
    \  Car(long position, bool is_left_to_right) : position(position), is_left_to_right(is_left_to_right)\
    \ {}\n    //        };\n    //        You can use the following comparison function\
    \ to compare two cars:\n    //        bool compare_cars(const Car& a, const Car&\
    \ b) {\n    //            return a.position < b.position;\n    //        }\n \
    \   //        You can use this comparison function to create a priority queue:\n\
    \    //        priority_queue<Car, vector<Car>, decltype(&compare_cars)> pq(&compare_cars);\n\
    \    //        You can use the following code to push a car into the priority\
    \ queue:\n    //        pq.push(Car(position, is_left_to_right));\n    //    \
    \    You can use the following code to pop a car from the priority queue:\n  \
    \  //        pq.pop();\n    //        You can use the following code to get the\
    \ position of the car at the top of the priority queue:\n    //        pq.top().position;\n\
    \    //        You can use the following code to get the direction of the car\
    \ at the top of the priority queue:\n    //        pq.top().is_left_to_right;\n\
    \    //        You can use the following code to check if the priority queue is\
    \ empty:\n    //        pq.empty();\n    //        You can use the following code\
    \ to get the size of the priority queue:\n    //        pq.size();\n    //   \
    \     You can use the following code to clear the priority queue:\n    //    \
    \    pq = priority_queue<Car, vector<Car>, decltype(&compare_cars)>(&compare_cars);\n\
    \    //        You can use the following code to get the current\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp_gatet0r: /tmp/tmp_gatet0r.cpp:46: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    long count = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        for(long j = 1; j <= n; j++) {\n            if(i == j) {\n      \
    \          continue;\n            }\n            if(i < j) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpdv65pko2: /tmp/tmpdv65pko2.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // This is a sample solution that uses O(n^2)\
    \ time.\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = 0; j < n; j++) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092783
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO:  Implement\
    \ this function.\n  // You can use the following code to test your function.\n\
    \  // You can add more tests here.\n  assert(car_race_collision(0) == 0);\n  assert(car_race_collision(1)\
    \ == 0);\n  assert(car_race_collision(2) == 1);\n  assert(car_race_collision(3)\
    \ == 3);\n  assert(car_race_collision(4) == 6);\n  assert(car_race_collision(5)\
    \ == 10);\n  assert(car_race_collision(6) == 15);\n  assert(car_race_collision(7)\
    \ == 21);\n  assert(car_race_collision(8) == 28);\n  assert(car_race_collision(9)\
    \ == 36);\n  assert(car_race_collision(10) == 45);\n  assert(car_race_collision(11)\
    \ == 55);\n  assert(car_race_collision(12) == 66);\n  assert(car_race_collision(13)\
    \ == 78);\n  assert(car_race_collision(14) == 91);\n  assert(car_race_collision(15)\
    \ == 105);\n  assert(car_race_collision(16) == 120);\n  assert(car_race_collision(17)\
    \ == 136);\n  assert(car_race_collision(18) == 153);\n  assert(car_race_collision(19)\
    \ == 171);\n  assert(car_race_collision(20) == 190);\n  assert(car_race_collision(21)\
    \ == 210);\n  assert(car_race_collision(22) == 231);\n  assert(car_race_collision(23)\
    \ == 253);\n  assert(car_race_collision(24) == 276);\n  assert(car_race_collision(25)\
    \ == 300);\n  assert(car_race_collision(26) == 325);\n  assert(car_race_collision(27)\
    \ == 351);\n  assert(car_race_collision(28) == 378);\n  assert(car_race_collision(29)\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8jb7ci_.cpp:53: error: unterminated argument list invoking macro\
    \ \"assert\"\n   53 | }\n      | \n/tmp/tmpf8jb7ci_.cpp: In function \u2018long\
    \ int car_race_collision(long int)\u2019:\n/tmp/tmpf8jb7ci_.cpp:44:3: error: \u2018\
    assert\u2019 was not declared in this scope\n   44 |   assert(car_race_collision(29)\n\
    \      |   ^~~~~~\n/tmp/tmpf8jb7ci_.cpp:3:1: note: \u2018assert\u2019 is defined\
    \ in header \u2018<cassert>\u2019; did you forget to \u2018#include <cassert>\u2019\
    ?\n    2 | #include<bits/stdc++.h>\n  +++ |+#include <cassert>\n    3 | // Imagine\
    \ a road that's a perfectly straight infinitely long line.\n/tmp/tmpf8jb7ci_.cpp:44:3:\
    \ error: expected \u2018}\u2019 at end of input\n   44 |   assert(car_race_collision(29)\n\
    \      |   ^~~~~~\n/tmp/tmpf8jb7ci_.cpp:11:33: note: to match this \u2018{\u2019\
    \n   11 | long car_race_collision(long n) {\n      |                         \
    \        ^\n/tmp/tmpf8jb7ci_.cpp:44:3: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   44 |   assert(car_race_collision(29)\n      | \
    \  ^~~~~~\n"
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    return (n*(n-1))/2;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpczof5ai3: /tmp/tmpczof5ai3.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long num_collisions\
    \ = 0;\n    // TODO: implement your solution here\n    return num_collisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpre2ixyn2: /tmp/tmpre2ixyn2.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function\n  long count = 0;\n  for (long i = 0; i < n; i++) {\n    for\
    \ (long j = 0; j < n; j++) {\n      if (i == j) {\n        continue;\n      }\n\
    \      if (i < j) {\n        count++;\n      }\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpak53_vl7: /tmp/tmpak53_vl7.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may assume that the two sets of cars are disjoint.\n    // You may\
    \ assume that the cars are moving in the same speed.\n    // You may assume that\
    \ the cars are infinitely sturdy and strong.\n    // You may assume that the cars\
    \ are infinitely small.\n    // You may assume that the cars are point-like.\n\
    \    // You may assume that the cars are moving in a straight line.\n    // You\
    \ may assume that the cars are moving in a straight line.\n    // You may assume\
    \ that the cars are moving in a straight line.\n    // You may assume that the\
    \ cars are moving in a straight line.\n    // You may assume that the cars are\
    \ moving in a straight line.\n    // You may assume that the cars are moving in\
    \ a straight line.\n    // You may assume that the cars are moving in a straight\
    \ line.\n    // You may assume that the cars are moving in a straight line.\n\
    \    // You may assume that the cars are moving in a straight line.\n    // You\
    \ may assume that the cars are moving in a straight line.\n    // You may assume\
    \ that the cars are moving in a straight line.\n    // You may assume that the\
    \ cars are moving in a straight line.\n    // You may assume that the cars are\
    \ moving in a straight line.\n    // You may assume that the cars are moving in\
    \ a straight line.\n    // You may assume that the cars are moving in a straight\
    \ line.\n    // You may assume that the cars are moving in a straight line.\n\
    \    // You may assume that the cars are moving in a straight line.\n    // You\
    \ may assume that the cars are moving in a straight line.\n    // You may assume\
    \ that the cars are moving in a straight line.\n    // You may assume that the\
    \ cars are moving in a straight line.\n    // You may assume that the cars are\
    \ moving in a straight line.\n    // You may assume that the cars are moving in\
    \ a straight line.\n    // You may assume that the cars are moving in a straight\
    \ line.\n    // You may assume that the cars are moving in a straight line.\n\
    \    // You may assume that the cars are moving in a straight line.\n    // You\
    \ may assume that the cars are moving in a straight\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpiuhuvnus: /tmp/tmpiuhuvnus.cpp:48: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long answer\
    \ = 0;\n  // TODO:  Implement this function.\n  return answer;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpnfkmoq7y: /tmp/tmpnfkmoq7y.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp4qx98y1s: /tmp/tmp4qx98y1s.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO: implement this function\n    return collisions;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpg0hcc59k: /tmp/tmpg0hcc59k.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // Hint: You can use the fact that the cars are\
    \ infinitely strong and sturdy.\n    // Hint: You can use the fact that the cars\
    \ are moving in the same speed.\n    // Hint: You can use the fact that the cars\
    \ are moving in the same direction.\n    // Hint: You can use the fact that the\
    \ cars are moving in the opposite direction.\n    // Hint: You can use the fact\
    \ that the cars are moving in the same direction.\n    // Hint: You can use the\
    \ fact that the cars are moving in the opposite direction.\n    // Hint: You can\
    \ use the fact that the cars are moving in the same direction.\n    // Hint: You\
    \ can use the fact that the cars are moving in the opposite direction.\n    //\
    \ Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the same direction.\n\
    \    // Hint: You can use the fact that the cars are moving in the opposite direction\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo27tof_2: /tmp/tmpo27tof_2.cpp:40: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_0bw77rq: /tmp/tmp_0bw77rq.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmppodywjkl: /tmp/tmppodywjkl.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_0bw77rq: /tmp/tmp_0bw77rq.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long long int count = 0;\n    long long int i = 0;\n    while(i < n) {\n  \
    \      count += i;\n        i++;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpz9li2nda: /tmp/tmpz9li2nda.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    long left = n;\n    long right = n;\n    while (left > 0 || right\
    \ > 0) {\n        if (left > 0) {\n            left--;\n        }\n        if\
    \ (right > 0) {\n            right--;\n        }\n        if (left == 0 && right\
    \ == 0) {\n            break;\n        }\n        if (left > 0 && right > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpxtfbi8gm: /tmp/tmpxtfbi8gm.cpp:33: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a[n],b[n];\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%ld\",&a[i]);\n\
    \    }\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%ld\",&b[i]);\n    }\n  \
    \  for(i=0;i<n;i++)\n    {\n        for(j=0;j<n;j++)\n        {\n            if(a[i]==b[j])\n\
    \            {\n                printf(\"%ld\",a[i]);\n            }\n       \
    \ }\n    }\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh5opuar.cpp: In function \u2018long int car_race_collision(long\
    \ int)\u2019:\n/tmp/tmpeh5opuar.cpp:12:20: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   12 |     long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \      |                    ^\n/tmp/tmpeh5opuar.cpp:32:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   32 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    long long int count = 0;\n    for(long long int\
    \ i = 0; i < n; i++)\n    {\n        for(long long int j = 0; j < n; j++)\n  \
    \      {\n            if(i < j)\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmps2k764c7: /tmp/tmps2k764c7.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function.\n  return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp618q1tc6: /tmp/tmp618q1tc6.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You may use any data structure you want.\n\
    \    // You may use any algorithm you want.\n    // You may use any number of\
    \ helper functions you want.\n    // You may use any number of helper classes\
    \ you want.\n    // You may use any number of helper variables you want.\n   \
    \ // You may use any number of helper constants you want.\n    // You may use\
    \ any number of helper macros you want.\n    // You may use any number of helper\
    \ functions you want.\n    // You may use any number of helper classes you want.\n\
    \    // You may use any number of helper variables you want.\n    // You may use\
    \ any number of helper constants you want.\n    // You may use any number of helper\
    \ macros you want.\n    // You may use any number of helper functions you want.\n\
    \    // You may use any number of helper classes you want.\n    // You may use\
    \ any number of helper variables you want.\n    // You may use any number of helper\
    \ constants you want.\n    // You may use any number of helper macros you want.\n\
    \    // You may use any number of helper functions you want.\n    // You may use\
    \ any number of helper classes you want.\n    // You may use any number of helper\
    \ variables you want.\n    // You may use any number of helper constants you want.\n\
    \    // You may use any number of helper macros you want.\n    // You may use\
    \ any number of helper functions you want.\n    // You may use any number of helper\
    \ classes you want.\n    // You may use any number of helper variables you want.\n\
    \    // You may use any number of helper constants you want.\n    // You may use\
    \ any number of helper macros you want.\n    // You may use any number of helper\
    \ functions you want.\n    // You may use any number of helper classes you want.\n\
    \    // You may use any number of helper variables you want.\n    // You may use\
    \ any number of helper constants you want.\n    // You may use any number of helper\
    \ macros you want.\n    // You may use any number of helper functions you want.\n\
    \    // You may use any number of helper classes you want.\n    // You may use\
    \ any number of helper variables you want.\n    // You may use any number of helper\
    \ constants you want.\n    //\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmprxtgk4m1: /tmp/tmprxtgk4m1.cpp:53: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use the\
    \ printf function\n    // For example, printf(\"%s\", \"Hello world!\");\n   \
    \ // printf(\"%d\", 42[array]);\n    // Be careful with the types of the function\
    \ arguments and the returned value!\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpqp1ivzz4: /tmp/tmpqp1ivzz4.cpp:21: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpp2rdnn1c: /tmp/tmpp2rdnn1c.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_0bw77rq: /tmp/tmp_0bw77rq.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may assume that n is a power of 2.\n    // You may assume that n is\
    \ less than 2^32.\n    // You may assume that n is less than 2^30.\n    // You\
    \ may assume that n is less than 2^28.\n    // You may assume that n is less than\
    \ 2^26.\n    // You may assume that n is less than 2^24.\n    // You may assume\
    \ that n is less than 2^22.\n    // You may assume that n is less than 2^20.\n\
    \    // You may assume that n is less than 2^18.\n    // You may assume that n\
    \ is less than 2^16.\n    // You may assume that n is less than 2^14.\n    //\
    \ You may assume that n is less than 2^12.\n    // You may assume that n is less\
    \ than 2^10.\n    // You may assume that n is less than 2^8.\n    // You may assume\
    \ that n is less than 2^6.\n    // You may assume that n is less than 2^4.\n \
    \   // You may assume that n is less than 2^2.\n    // You may assume that n is\
    \ less than 2^0.\n    // You may assume that n is less than 2^-2.\n    // You\
    \ may assume that n is less than 2^-4.\n    // You may assume that n is less than\
    \ 2^-6.\n    // You may assume that n is less than 2^-8.\n    // You may assume\
    \ that n is less than 2^-10.\n    // You may assume that n is less than 2^-12.\n\
    \    // You may assume that n is less than 2^-14.\n    // You may assume that\
    \ n is less than 2^-16.\n    // You may assume that n is less than 2^-18.\n  \
    \  // You may assume that n is less than 2^-20.\n    // You may assume that n\
    \ is less than 2^-22.\n    // You may assume that n is less than 2^-24.\n    //\
    \ You may assume that n is less than 2^-26.\n    // You may assume that n is less\
    \ than 2\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpnxq67178: /tmp/tmpnxq67178.cpp:49: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO: implement this function\n    // Hint: use a priority queue\n\
    \    // Hint: use a priority queue\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> left_to_right;\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> right_to_left;\n    for (long i = 0; i < n; i++) {\n   \
    \     left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    while\
    \ (!left_to_right.empty() && !right_to_left.empty()) {\n        if (left_to_right.top()\
    \ < right_to_left.top()) {\n            left_to_right.pop();\n            right_to_left.pop();\n\
    \            collisions++;\n        } else {\n            left_to_right.pop();\n\
    \            right_to_left.pop();\n        }\n    }\n    return collisions;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpjq3samn5: /tmp/tmpjq3samn5.cpp:36: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO:  implement this function.\n    return collisions;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpnt_y14kb: /tmp/tmpnt_y14kb.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmppodywjkl: /tmp/tmppodywjkl.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    // You may use the following function to generate\
    \ random numbers.\n    // rand() % n will return a random number between 0 and\
    \ n-1.\n    // You may use any other function from the standard library.\n   \
    \ // You may not use any other library.\n    // You may not use any other data\
    \ structure.\n    // You may not use any other programming language.\n    // You\
    \ may not use any other computer.\n    // You may not use any other human being.\n\
    \    // You may not use any other resource.\n    // You may not use any other\
    \ thing.\n    // You may not use any other way.\n    // You may not use any other\
    \ method.\n    // You may not use any other algorithm.\n    // You may not use\
    \ any other technique.\n    // You may not use any other approach.\n    // You\
    \ may not use any other idea.\n    // You may not use any other concept.\n   \
    \ // You may not use any other principle.\n    // You may not use any other law.\n\
    \    // You may not use any other rule.\n    // You may not use any other regulation.\n\
    \    // You may not use any other doctrine.\n    // You may not use any other\
    \ canon.\n    // You may not use any other dogma.\n    // You may not use any\
    \ other belief.\n    // You may not use any other faith.\n    // You may not use\
    \ any other creed.\n    // You may not use any other tenet.\n    // You may not\
    \ use any other axiom.\n    // You may not use any other postulate.\n    // You\
    \ may not use any other assumption.\n    // You may not use any other supposition.\n\
    \    // You may not use any other presumption.\n    // You may not use any other\
    \ surmise.\n    // You may not use any other conjecture.\n    // You may not use\
    \ any other guess.\n    // You may not use any other speculation.\n    // You\
    \ may not use any other theory.\n    // You may not use any other hypothesis.\n\
    \    // You may not use any other supposition.\n    // You may not use any other\
    \ assumption.\n    // You may not use any other postulate.\n    // You may not\
    \ use any other axiom.\n    //\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpwo895y2g: /tmp/tmpwo895y2g.cpp:60: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO:  Implement this function.\n    // You are free to use any\
    \ data structures you like.\n    // You are free to use any number of helper functions.\n\
    \    // You are free to use any number of loops.\n    // You are free to use any\
    \ number of if statements.\n    // You are free to use any number of return statements.\n\
    \    // You are free to use any number of continue statements.\n    // You are\
    \ free to use any number of break statements.\n    // You are free to use any\
    \ number of goto statements.\n    // You are free to use any number of switch\
    \ statements.\n    // You are free to use any number of while statements.\n  \
    \  // You are free to use any number of do-while statements.\n    // You are free\
    \ to use any number of for statements.\n    // You are free to use any number\
    \ of nested loops.\n    // You are free to use any number of nested if statements.\n\
    \    // You are free to use any number of nested switch statements.\n    // You\
    \ are free to use any number of nested while statements.\n    // You are free\
    \ to use any number of nested do-while statements.\n    // You are free to use\
    \ any number of nested for statements.\n    // You are free to use any number\
    \ of nested goto statements.\n    // You are free to use any number of nested\
    \ continue statements.\n    // You are free to use any number of nested break\
    \ statements.\n    // You are free to use any number of nested return statements.\n\
    \    // You are free to use any number of nested helper functions.\n    // You\
    \ are free to use any number of nested data structures.\n    // You are free to\
    \ use any number of nested helper classes.\n    // You are free to use any number\
    \ of nested helper structs.\n    // You are free to use any number of nested helper\
    \ unions.\n    // You are free to use any number of nested helper enums.\n   \
    \ // You are free to use any number of nested helper typedefs.\n    // You are\
    \ free to use any number of nested helper namespaces.\n    // You are free to\
    \ use any number of nested helper templates.\n    // You are free to use any number\
    \ of nested helper macros.\n    // You are free to use any number of nested helper\
    \ preprocessor directives.\n   \n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp2_1pnre7: /tmp/tmp2_1pnre7.cpp:51: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use the\
    \ printf function\n    // For example, printf(\"%s\", \"Hello world!\");\n   \
    \ // printf(\"%ld\", n);\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpqm6xcr86: /tmp/tmpqm6xcr86.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // This function\
    \ is already implemented for you.\n    // You do not need to modify it.\n    return\
    \ n * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp3l33cph6: /tmp/tmp3l33cph6.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // The following line is a placeholder.\n    return\
    \ n;\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp8fi3uekh: /tmp/tmp8fi3uekh.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can use the following code to test your\
    \ implementation:\n    // assert(car_race_collision(0) == 0);\n    // assert(car_race_collision(1)\
    \ == 0);\n    // assert(car_race_collision(2) == 1);\n    // assert(car_race_collision(3)\
    \ == 3);\n    // assert(car_race_collision(4) == 6);\n    // assert(car_race_collision(5)\
    \ == 10);\n    // assert(car_race_collision(6) == 15);\n    // assert(car_race_collision(7)\
    \ == 21);\n    // assert(car_race_collision(8) == 28);\n    // assert(car_race_collision(9)\
    \ == 36);\n    // assert(car_race_collision(10) == 45);\n    // assert(car_race_collision(11)\
    \ == 55);\n    // assert(car_race_collision(12) == 66);\n    // assert(car_race_collision(13)\
    \ == 78);\n    // assert(car_race_collision(14) == 91);\n    // assert(car_race_collision(15)\
    \ == 105);\n    // assert(car_race_collision(16) == 120);\n    // assert(car_race_collision(17)\
    \ == 136);\n    // assert(car_race_collision(18) == 153);\n    // assert(car_race_collision(19)\
    \ == 171);\n    // assert(car_race_collision(20) == 190);\n    // assert(car_race_collision(21)\
    \ == 210);\n    // assert(car_race_collision(22) == 231);\n    // assert(car_race_collision(23)\
    \ == 253);\n    // assert(car_race_collision(24) == 276);\n    // assert(car_race_collision(25)\
    \ == 300);\n    // assert(car_race_collision(26) == 325);\n    // assert(car_race_collision(27)\
    \ == 351);\n    // assert(car_race_collision(\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp8tzfm1wm: /tmp/tmp8tzfm1wm.cpp:46: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO: implement\
    \ this function.\n  // You can assume that n is a positive integer.\n  // You\
    \ can assume that n is a power of 2.\n  // You can assume that n is less than\
    \ or equal to 2^30.\n  // You can assume that n is greater than or equal to 2.\n\
    \  // You can assume that n is an integer.\n  // You can assume that n is a non-negative\
    \ integer.\n  // You can assume that n is a non-zero integer.\n  // You can assume\
    \ that n is a non-zero positive integer.\n  // You can assume that n is a non-zero\
    \ positive integer that is less than or equal to 2^30.\n  // You can assume that\
    \ n is a non-zero positive integer that is less than or equal to 2^30 and is a\
    \ power of 2.\n  // You can assume that n is a non-zero positive integer that\
    \ is less than or equal to 2^30 and is a power of 2 and is greater than or equal\
    \ to 2.\n  // You can assume that n is a non-zero positive integer that is less\
    \ than or equal to 2^30 and is a power of 2 and is greater than or equal to 2\
    \ and is an integer.\n  // You can assume that n is a non-zero positive integer\
    \ that is less than or equal to 2^30 and is a power of 2 and is greater than or\
    \ equal to 2 and is an integer and is a non-negative integer.\n  // You can assume\
    \ that n is a non-zero positive integer that is less than or equal to 2^30 and\
    \ is a power of 2 and is greater than or equal to 2 and is an integer and is a\
    \ non-negative integer and is a non-zero integer.\n  // You can assume that n\
    \ is a non-zero positive integer that is less than or equal to 2^30 and is a power\
    \ of 2 and is greater than or equal to 2 and is an integer and is a non-negative\
    \ integer and is a non-zero integer and is a non-zero positive integer.\n  //\
    \ You can assume that n is a non-zero positive integer that is less than or equal\
    \ to 2^30 and is a power of 2 and is greater than or equal to 2 and is an integer\
    \ and is a non-negative integer and is a non-zero integer and is a non-zero positive\
    \ integer and\n}\nint main() {\n    auto candidate = car_race_collision;\n   \
    \ assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpwft99g5g: /tmp/tmpwft99g5g.cpp:32: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = 0; j < n; j++) {\n            if(i < j) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpe95xd98i: /tmp/tmpe95xd98i.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can use any data structure you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any language you\
    \ want.\n    // You can use any IDE you want.\n    // You can use any operating\
    \ system you want.\n    // You can use any computer you want.\n    // You can\
    \ use any internet connection you want.\n    // You can use any resource you want.\n\
    \    // You can use any help you want.\n    // You can use any other thing you\
    \ want.\n    // You can use any thing you want.\n    // You can use any you want.\n\
    \    // You can use any want.\n    // You can use any.\n    // You can use.\n\
    \    // You can.\n    // You.\n    // .\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpe3h4nscr: /tmp/tmpe3h4nscr.cpp:144: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpjwlf1e8w: /tmp/tmpjwlf1e8w.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    // You may assume that n is non-negative.\n  \
    \  // You may assume that n is not greater than 2^32-1.\n    // You may assume\
    \ that n is not greater than 2^31-1.\n    // You may assume that n is not greater\
    \ than 2^30-1.\n    // You may assume that n is not greater than 2^29-1.\n   \
    \ // You may assume that n is not greater than 2^28-1.\n    // You may assume\
    \ that n is not greater than 2^27-1.\n    // You may assume that n is not greater\
    \ than 2^26-1.\n    // You may assume that n is not greater than 2^25-1.\n   \
    \ // You may assume that n is not greater than 2^24-1.\n    // You may assume\
    \ that n is not greater than 2^23-1.\n    // You may assume that n is not greater\
    \ than 2^22-1.\n    // You may assume that n is not greater than 2^21-1.\n   \
    \ // You may assume that n is not greater than 2^20-1.\n    // You may assume\
    \ that n is not greater than 2^19-1.\n    // You may assume that n is not greater\
    \ than 2^18-1.\n    // You may assume that n is not greater than 2^17-1.\n   \
    \ // You may assume that n is not greater than 2^16-1.\n    // You may assume\
    \ that n is not greater than 2^15-1.\n    // You may assume that n is not greater\
    \ than 2^14-1.\n    // You may assume that n is not greater than 2^13-1.\n   \
    \ // You may assume that n is not greater than 2^12-1.\n    // You may assume\
    \ that n is not greater than 2^11-1.\n    // You may assume that n is not greater\
    \ than 2^10-1.\n    // You may assume that n is not greater than 2^9-1.\n    //\
    \ You may assume that n is not greater than 2^8-1.\n    // You may assume that\
    \ n is not greater than 2^7-1.\n    // You may assume that n is not greater than\
    \ 2^6-1.\n    //\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpd8mi05dg: /tmp/tmpd8mi05dg.cpp:45: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1);\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp5s4bei74: /tmp/tmp5s4bei74.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  // TODO:  Implement\
    \ this function.\n  // You may assume that n is non-negative.\n  // You may also\
    \ assume that n is less than or equal to 1,000,000,000.\n  // You may also assume\
    \ that n is an integer.\n  // You may also assume that n is a multiple of 2.\n\
    \  // You may also assume that n is a power of 2.\n  // You may also assume that\
    \ n is a power of 2.\n  // You may also assume that n is a power of 2.\n  // You\
    \ may also assume that n is a power of 2.\n  // You may also assume that n is\
    \ a power of 2.\n  // You may also assume that n is a power of 2.\n  // You may\
    \ also assume that n is a power of 2.\n  // You may also assume that n is a power\
    \ of 2.\n  // You may also assume that n is a power of 2.\n  // You may also assume\
    \ that n is a power of 2.\n  // You may also assume that n is a power of 2.\n\
    \  // You may also assume that n is a power of 2.\n  // You may also assume that\
    \ n is a power of 2.\n  // You may also assume that n is a power of 2.\n  // You\
    \ may also assume that n is a power of 2.\n  // You may also assume that n is\
    \ a power of 2.\n  // You may also assume that n is a power of 2.\n  // You may\
    \ also assume that n is a power of 2.\n  // You may also assume that n is a power\
    \ of 2.\n  // You may also assume that n is a power of 2.\n  // You may also assume\
    \ that n is a power of 2.\n  // You may also assume that n is a power of 2.\n\
    \  // You may also assume that n is a power of 2.\n  // You may also assume that\
    \ n is a power of 2.\n  // You may also assume that n is a power of 2.\n  // You\
    \ may also assume that n is a power of 2.\n  // You may also assume that n is\
    \ a power of 2.\n  // You may also assume that n is a power of 2.\n  // You may\
    \ also assume that n is a power of 2.\n \n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpxfra9pdr: /tmp/tmpxfra9pdr.cpp:50: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    long count = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        for(long j = 1; j <= n; j++) {\n            if(i == j) {\n      \
    \          continue;\n            }\n            if(i < j) {\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpdv65pko2: /tmp/tmpdv65pko2.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    long i = 0;\n    long j = n-1;\n    while(i<n && j>=0)\n\
    \    {\n        if(i==j)\n        {\n            count++;\n            i++;\n\
    \            j--;\n        }\n        else\n        {\n            count+=2;\n\
    \            i++;\n            j--;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpdy5wmgss: /tmp/tmpdy5wmgss.cpp:37: int main(): Assertion `candidate((3))
    == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function.\n    // You may use any data structure you want.\n\
    \    // You may use any number of functions you want.\n    // You may use any\
    \ number of files you want.\n    // You may use any number of lines you want.\n\
    \    // You may use any number of characters you want.\n    // You may use any\
    \ number of spaces you want.\n    // You may use any number of tabs you want.\n\
    \    // You may use any number of newlines you want.\n    // You may use any number\
    \ of comments you want.\n    // You may use any number of semicolons you want.\n\
    \    // You may use any number of curly braces you want.\n    // You may use any\
    \ number of parentheses you want.\n    // You may use any number of brackets you\
    \ want.\n    // You may use any number of apostrophes you want.\n    // You may\
    \ use any number of quotation marks you want.\n    // You may use any number of\
    \ backslashes you want.\n    // You may use any number of forward slashes you\
    \ want.\n    // You may use any number of underscores you want.\n    // You may\
    \ use any number of hyphens you want.\n    // You may use any number of equal\
    \ signs you want.\n    // You may use any number of plus signs you want.\n   \
    \ // You may use any number of minus signs you want.\n    // You may use any number\
    \ of asterisks you want.\n    // You may use any number of ampersands you want.\n\
    \    // You may use any number of carets you want.\n    // You may use any number\
    \ of tildes you want.\n    // You may use any number of exclamation points you\
    \ want.\n    // You may use any number of question marks you want.\n    // You\
    \ may use any number of colons you want.\n    // You may use any number of commas\
    \ you want.\n    // You may use any number of periods you want.\n    // You may\
    \ use any number of pipes you want.\n    // You may use any number of at signs\
    \ you want.\n    // You may use any number of pound signs you want.\n    // You\
    \ may use any number of dollar signs you want.\n    // You may use any number\
    \ of percent signs you want.\n    // You may\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmp6o1r9brc: /tmp/tmp6o1r9brc.cpp:53: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You can use the following function to get the\
    \ current time in milliseconds.\n    // long long get_current_time_in_ms()\n \
    \   // You can use the following function to get a random number in the range\
    \ [0, n).\n    // long long get_random_number(long long n)\n    // You can use\
    \ the following function to get a random number in the range [0, 1).\n    // double\
    \ get_random_double()\n    // You can use the following function to get a random\
    \ number in the range [0, n).\n    // long long get_random_number(long long n)\n\
    \    // You can use the following function to get a random number in the range\
    \ [0, 1).\n    // double get_random_double()\n    // You can use the following\
    \ function to get a random number in the range [0, n).\n    // long long get_random_number(long\
    \ long n)\n    // You can use the following function to get a random number in\
    \ the range [0, 1).\n    // double get_random_double()\n    // You can use the\
    \ following function to get a random number in the range [0, n).\n    // long\
    \ long get_random_number(long long n)\n    // You can use the following function\
    \ to get a random number in the range [0, 1).\n    // double get_random_double()\n\
    \    // You can use the following function to get a random number in the range\
    \ [0, n).\n    // long long get_random_number(long long n)\n    // You can use\
    \ the following function to get a random number in the range [0, 1).\n    // double\
    \ get_random_double()\n    // You can use the following function to get a random\
    \ number in the range [0, n).\n    // long long get_random_number(long long n)\n\
    \    // You can use the following function to get a random number in the range\
    \ [0, 1).\n    // double get_random_double()\n    // You can use the following\
    \ function to get a random number in the range [0, n).\n    // long long get_random_number(long\
    \ long n)\n    // You can use the following function to get a random number in\
    \ the range [0\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpqxdskb_y: /tmp/tmpqxdskb_y.cpp:45: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long count\
    \ = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j < n; j++) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    // TODO: Implement this function.\n    // Hint:  You may find it useful\
    \ to use a priority queue.\n    // Hint:  You may find it useful to use a long\
    \ long int.\n    // Hint:  You may find it useful to use a lambda function.\n\
    \    // Hint:  You may find it useful to use a std::pair.\n    // Hint:  You may\
    \ find it useful to use a std::make_pair.\n    // Hint:  You may find it useful\
    \ to use a std::greater.\n    // Hint:  You may find it useful to use a std::less.\n\
    \    // Hint:  You may find it useful to use a std::priority_queue.\n    // Hint:\
    \  You may find it useful to use a std::vector.\n    // Hint:  You may find it\
    \ useful to use a std::sort.\n    // Hint:  You may find it useful to use a std::unique.\n\
    \    // Hint:  You may find it useful to use a std::distance.\n    // Hint:  You\
    \ may find it useful to use a std::lower_bound.\n    // Hint:  You may find it\
    \ useful to use a std::upper_bound.\n    // Hint:  You may find it useful to use\
    \ a std::binary_search.\n    // Hint:  You may find it useful to use a std::set.\n\
    \    // Hint:  You may find it useful to use a std::multiset.\n    // Hint:  You\
    \ may find it useful to use a std::map.\n    // Hint:  You may find it useful\
    \ to use a std::multimap.\n    // Hint:  You may find it useful to use a std::unordered_set.\n\
    \    // Hint:  You may find it useful to use a std::unordered_multiset.\n    //\
    \ Hint:  You may find it useful to use a std::unordered_map.\n    // Hint:  You\
    \ may find it useful to use a std::unordered_multimap.\n    // Hint:  You may\
    \ find it useful to use a std::hash.\n    // Hint:  You may find\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpaqhf1ntu: /tmp/tmpaqhf1ntu.cpp:42: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    return n*(n-1)/2;\n}\nint main() {\n    auto candidate =\
    \ car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmphde8br2f: /tmp/tmphde8br2f.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n\
    \    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n   \
    \ assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n\tlong count\
    \ = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // The following line is just a placeholder.\n\
    \    return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n  \
    \  assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp0en3xr0y: /tmp/tmp0en3xr0y.cpp:18: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You may assume that the input is always valid.\n\
    \    // You may assume that the input is always valid.\n    // You may assume\
    \ that the input is always valid.\n    // You may assume that the input is always\
    \ valid.\n    // You may assume that the input is always valid.\n    // You may\
    \ assume that the input is always valid.\n    // You may assume that the input\
    \ is always valid.\n    // You may assume that the input is always valid.\n  \
    \  // You may assume that the input is always valid.\n    // You may assume that\
    \ the input is always valid.\n    // You may assume that the input is always valid.\n\
    \    // You may assume that the input is always valid.\n    // You may assume\
    \ that the input is always valid.\n    // You may assume that the input is always\
    \ valid.\n    // You may assume that the input is always valid.\n    // You may\
    \ assume that the input is always valid.\n    // You may assume that the input\
    \ is always valid.\n    // You may assume that the input is always valid.\n  \
    \  // You may assume that the input is always valid.\n    // You may assume that\
    \ the input is always valid.\n    // You may assume that the input is always valid.\n\
    \    // You may assume that the input is always valid.\n    // You may assume\
    \ that the input is always valid.\n    // You may assume that the input is always\
    \ valid.\n    // You may assume that the input is always valid.\n    // You may\
    \ assume that the input is always valid.\n    // You may assume that the input\
    \ is always valid.\n    // You may assume that the input is always valid.\n  \
    \  // You may assume that the input is always valid.\n    // You may assume that\
    \ the input is always valid.\n    // You may assume that the input is always valid.\n\
    \    // You may assume that the input is always valid.\n    // You may assume\
    \ that the input is always valid.\n    // You may assume that the input is always\
    \ valid.\n    // You may assume that the input is always valid.\n    // You may\
    \ assume that the input is always valid.\n    // You may assume that the input\
    \ is always valid.\n    // You may assume that the input is always valid.\n  \
    \  // You may assume that the\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxl41p1vn: /tmp/tmpxl41p1vn.cpp:55: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    // You may assume that n is a positive integer.\n\
    \    // You may also assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars are so far apart that they never collide\n    // with each other.\n\
    \    // You may assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars are so far apart that they never collide\n    // with each other.\n\
    \    // You may assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars are so far apart that they never collide\n    // with each other.\n\
    \    // You may assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars are so far apart that they never collide\n    // with each other.\n\
    \    // You may assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars are so far apart that they never collide\n    // with each other.\n\
    \    // You may assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars are so far apart that they never collide\n    // with each other.\n\
    \    // You may assume that the cars are so far apart that they never collide\n\
    \    // with each other.\n    // You may assume that the cars are so far apart\
    \ that they never collide\n    // with each other.\n    // You may assume that\
    \ the cars\n}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpqur1y7t2: /tmp/tmpqur1y7t2.cpp:58: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmp_0bw77rq: /tmp/tmp_0bw77rq.cpp:24: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpp2rdnn1c: /tmp/tmpp2rdnn1c.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n\
    \ * (n - 1) / 2;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpxnwtcgs9: /tmp/tmpxnwtcgs9.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = n - 1;\n    while (i < n && j >= 0) {\n\
    \        if (i == j) {\n            collisions++;\n            break;\n      \
    \  }\n        if (i < j) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return collisions;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpdu3b8cpw: /tmp/tmpdu3b8cpw.cpp:30: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  implement this function\n    long i,j,count=0;\n    for(i=0;i<n;i++)\n    {\n\
    \        for(j=0;j<n;j++)\n        {\n            if(i==j)\n            {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpdfhoyyc4: /tmp/tmpdfhoyyc4.cpp:28: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \  implement this function\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpya5kgkob: /tmp/tmpya5kgkob.cpp:25: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Implement\
    \ this placeholder.\n    return 0;\n}\nint main() {\n    auto candidate = car_race_collision;\n\
    \    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4))\
    \ == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) ==\
    \ (100));\n}\n"
  status: Exception
  stderr: 'tmpdpk3iyzk: /tmp/tmpdpk3iyzk.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i > j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpim7y_9bb: /tmp/tmpim7y_9bb.cpp:26: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ implement this function\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: Exception
  stderr: 'tmpeg_7470h: /tmp/tmpeg_7470h.cpp:17: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmp9702wp4e: /tmp/tmp9702wp4e.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may assume that n is a power of 2.\n    // You may assume that n is\
    \ less than or equal to 2^30.\n    // You may assume that n is greater than or\
    \ equal to 2.\n    // You may assume that n is an integer.\n    // You may assume\
    \ that n is a number.\n    // You may assume that n is a real number.\n    //\
    \ You may assume that n is a rational number.\n    // You may assume that n is\
    \ an algebraic number.\n    // You may assume that n is a complex number.\n  \
    \  // You may assume that n is an element of the set of complex numbers.\n   \
    \ // You may assume that n is an element of the set of real numbers.\n    // You\
    \ may assume that n is an element of the set of rational numbers.\n    // You\
    \ may assume that n is an element of the set of algebraic numbers.\n    // You\
    \ may assume that n is an element of the set of integers.\n    // You may assume\
    \ that n is an element of the set of natural numbers.\n    // You may assume that\
    \ n is an element of the set of positive integers.\n    // You may assume that\
    \ n is an element of the set of non-negative integers.\n    // You may assume\
    \ that n is an element of the set of non-positive integers.\n    // You may assume\
    \ that n is an element of the set of negative integers.\n    // You may assume\
    \ that n is an element of the set of non-zero integers.\n    // You may assume\
    \ that n is an element of the set of zero integers.\n    // You may assume that\
    \ n is an element of the set of non-zero real numbers.\n    // You may assume\
    \ that n is an element of the set of zero real numbers.\n    // You may assume\
    \ that n is an element of the set of non-zero rational numbers.\n    // You may\
    \ assume that n is an element of the set of zero rational numbers.\n    // You\
    \ may assume that n is an element of the set of non-zero algebraic numbers.\n\
    \    // You may assume that n is an element of the set of zero algebraic numbers.\n\
    \    // You may assume that n is an element of the set of non-zero complex numbers\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmprzgh21vd: /tmp/tmprzgh21vd.cpp:45: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092785
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n  long count\
    \ = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j < n; j++) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3))\
    \ == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) ==\
    \ (64));\n    assert(candidate((10)) == (100));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092783
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    // TODO:\
    \ Implement this function.\n    // The following line is a placeholder to prevent\
    \ compilation errors.\n    // You should erase it and replace it with your code.\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < n; j++) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's\
    \ a perfectly straight infinitely long line.\n// n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n// are driving right to left.  \
    \ The two sets of cars start out being very far from\n// each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n// when a car that's\
    \ moving left to right hits a car that's moving right to left.\n// However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n//\
    \ in their trajectory as if they did not collide.\n// This function outputs the\
    \ number of such collisions.\nlong car_race_collision(long n) {\n    return n*(n-1)/2;\n\
    }\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
    \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
    \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n\
    }\n"
  status: Exception
  stderr: 'tmpo5vgy7tz: /tmp/tmpo5vgy7tz.cpp:16: int main(): Assertion `candidate((2))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660092780
