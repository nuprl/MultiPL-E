name: HumanEval_141_file_name_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes\
  \ a string representing a file's name, and returns\n// 'Yes' if the the file's name\
  \ is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid\
  \ if and only if all the following conditions \n// are met:\n// - There should not\
  \ be more than three digits ('0'-'9') in the file's name.\n// - The file's name\
  \ contains exactly one dot '.'\n// - The substring before the dot should not be\
  \ empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  // Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"\
  1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
  example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
  No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
  K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
  ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
  _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
  \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
  this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
  )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n\
  \    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
  @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
  )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
  I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"\
  Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
  1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) ==\
  \ (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"\
  final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"\
  No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"\
  s.\")) == (\"No\"));\n}\n"
completions: ["    std::string ext[] = {\"txt\", \"exe\", \"dll\"};\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n        }\n    }\n    if(count > 3 || dot_count != 1) {\n\
    \        return \"No\";\n    }\n    std::string file_name_ext = file_name.substr(file_name.find(\"\
    .\") + 1);\n    if(file_name_ext == ext[0] || file_name_ext == ext[1] || file_name_ext\
    \ == ext[2]) {\n        return \"Yes\";\n    }\n    return \"No\";", "    int\
    \ count = 0;\n    int count1 = 0;\n    int count2 = 0;\n    int count3 = 0;\n\
    \    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7\
    \ = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int\
    \ count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 =\
    \ 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int\
    \ count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 =\
    \ 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int\
    \ count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 =\
    \ 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int\
    \ count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 =\
    \ 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int\
    \ count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 =\
    \ 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int\
    \ count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 =\
    \ 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int\
    \ count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 =\
    \ 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int\
    \ count60 = 0;\n    int count61 = 0;\n    int count62 = 0;\n    int count63 =\
    \ 0;\n", "  int count=0;\n  int dot_count=0;\n  int flag=0;\n  int flag1=0;\n\
    \  int flag2=0;\n  int flag3=0;\n  int flag4=0;\n  int flag5=0;\n  int flag6=0;\n\
    \  int flag7=0;\n  int flag8=0;\n  int flag9=0;\n  int flag10=0;\n  int flag11=0;\n\
    \  int flag12=0;\n  int flag13=0;\n  int flag14=0;\n  int flag15=0;\n  int flag16=0;\n\
    \  int flag17=0;\n  int flag18=0;\n  int flag19=0;\n  int flag20=0;\n  int flag21=0;\n\
    \  int flag22=0;\n  int flag23=0;\n  int flag24=0;\n  int flag25=0;\n  int flag26=0;\n\
    \  int flag27=0;\n  int flag28=0;\n  int flag29=0;\n  int flag30=0;\n  int flag31=0;\n\
    \  int flag32=0;\n  int flag33=0;\n  int flag34=0;\n  int flag35=0;\n  int flag36=0;\n\
    \  int flag37=0;\n  int flag38=0;\n  int flag39=0;\n  int flag40=0;\n  int flag41=0;\n\
    \  int flag42=0;\n  int flag43=0;\n  int flag44=0;\n  int flag45=0;\n  int flag46=0;\n\
    \  int flag47=0;\n  int flag48=0;\n  int flag49=0;\n  int flag50=0;\n  int flag51=0;\n\
    \  int flag52=0;\n  int flag53=0;\n  int flag54=0;\n  int flag55=0;\n  int flag56=0;\n\
    \  int flag57=0;\n  int flag58=0;\n  int flag59=0;\n  int flag60=0;\n  int flag61=0;\n",
  "    int count = 0;\n    int dot = 0;\n    int dot_pos = 0;\n    int count_after_dot\
    \ = 0;\n    int count_before_dot = 0;\n    int count_after_dot_1 = 0;\n    int\
    \ count_after_dot_2 = 0;\n    int count_after_dot_3 = 0;\n    int count_before_dot_1\
    \ = 0;\n    int count_before_dot_2 = 0;\n    int count_before_dot_3 = 0;\n   \
    \ int count_before_dot_4 = 0;\n    int count_before_dot_5 = 0;\n    int count_before_dot_6\
    \ = 0;\n    int count_before_dot_7 = 0;\n    int count_before_dot_8 = 0;\n   \
    \ int count_before_dot_9 = 0;\n    int count_before_dot_10 = 0;\n    int count_before_dot_11\
    \ = 0;\n    int count_before_dot_12 = 0;\n    int count_before_dot_13 = 0;\n \
    \   int count_before_dot_14 = 0;\n    int count_before_dot_15 = 0;\n    int count_before_dot_16\
    \ = 0;\n    int count_before_dot_17 = 0;\n    int count_before_dot_18 = 0;\n \
    \   int count_before_dot_19 = 0;\n    int count_before_dot_20 = 0;\n    int count_before_dot_21\
    \ = 0;\n    int count_before_dot_22 = 0;\n    int count_before_dot_23 = 0;\n \
    \   int count_before_dot_24 = 0;\n    int count_before_dot_25 = 0;\n    int count_before_dot_26\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot++;\n            dot_pos = i;\n        }\n       \
    \ if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n  \
    \      }\n    }\n    if (", "    int count = 0;\n    int dot = 0;\n    int len\
    \ = file_name.length();\n    for(int i = 0; i < len; i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot++;\n        }\n    }\n    if(count > 3 || dot !=\
    \ 1) {\n        return \"No\";\n    }\n    std::string str = file_name.substr(0,\
    \ file_name.find('.'));\n    if(str.length() == 0) {\n        return \"No\";\n\
    \    }\n    if(str[0] >= 'a' && str[0] <= 'z' || str[0] >= 'A' && str[0] <= 'Z')\
    \ {\n        std::string str1 = file_name.substr(file_name.find('.') + 1, len);\n\
    \        if(str1 == \"txt\" || str1 == \"exe\" || str1 == \"dll\") {\n       \
    \     return \"Yes\";\n        }\n    }\n    return \"No\";", "    int count =\
    \ 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            dot_count++;\n      \
    \      dot_index = i;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3) {\n   \
    \     return \"No\";\n    }\n    if(dot_count != 1) {\n        return \"No\";\n\
    \    }\n    if(file_name[0] < 'a' || file_name[0] > 'z') {\n        return \"\
    No\";\n    }\n    if(file_name.substr(dot_index + 1, file_name.length() - dot_index)\
    \ != \"txt\" && file_name.substr(dot_index + 1, file_name.length() - dot_index)\
    \ != \"exe\" && file_name.substr(dot_index + 1, file_name.length() - dot_index)\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    int\
    \ count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int count_after_dot\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n    }\n\
    \    for(int i = dot_index + 1; i < file_name.length(); i++) {\n        count_after_dot++;\n\
    \    }\n    if(count_after_dot != 3) {\n        return \"No\";\n    }\n    std::string\
    \ file_extension = file_name.substr(dot_index + 1, 3);\n    if(file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";", "    int count = 0;\n    int\
    \ dot = 0;\n    int flag = 0;\n    int flag2 = 0;\n    int flag3 = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            flag = 1;\n        }\n        if(file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            flag = 1;\n        }\n        if(file_name[i]\
    \ == '.') {\n            if(file_name[i+1] == 't' && file_name[i+2] == 'x' &&\
    \ file_name[i+3] == 't') {\n                flag2 = 1;\n            }\n      \
    \      if(file_name[i+1] == 'e' && file_name[i+2] == 'x' && file_name[i+3] ==\
    \ 'e') {\n                flag2 = 1;\n            }\n            if(file_name[i+1]\
    \ == 'd' && file_name[i+2] == 'l' && file_name[i+3] == 'l') {\n              \
    \  flag2 = 1;\n            }\n        }\n    }\n    if(count <= 3 && dot == 1\
    \ && flag == 1 && flag2 == 1) {\n        return \"Yes\";\n    }\n    else {\n\
    \        return \"No\";\n    }", "    int count = 0;\n    int dot_count = 0;\n\
    \    int i = 0;\n    int len = file_name.length();\n    for(i = 0; i < len; i++)\
    \ {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n        if(file_name[i] == '.') {\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1) {\n        return \"No\";\n\
    \    }\n    std::string str1 = file_name.substr(0, file_name.find(\".\"));\n \
    \   std::string str2 = file_name.substr(file_name.find(\".\") + 1);\n    if(str1.length()\
    \ == 0 || (str1[0] < 'a' || str1[0] > 'z') && (str1[0] < 'A' || str1[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if(str2 != \"txt\" && str2 != \"exe\"\
    \ && str2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";",
  "    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int digit_count\
    \ = 0;\n    int digit_index = 0;\n    int alpha_count = 0;\n    int alpha_index\
    \ = 0;\n    int alpha_index_end = 0;\n    int alpha_index_start = 0;\n    int\
    \ alpha_index_end_start = 0;\n    int alpha_index_end_end = 0;\n    int alpha_index_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end = 0;\n    int alpha_index_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end_end = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_start\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_end = 0;\n    int\
    \ alpha_index_end_end_end_end_end_end_end_end_end_start = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int alpha_index_end_end_end_end_end_end_end_end_end_end_start = 0;\n\
    \    int alpha_index_end_end_end_end_end_end_end", "    int count = 0;\n    int\
    \ dot = 0;\n    int dot_pos = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot++;\n            dot_pos = i;\n        }\n    }\n    if(count > 3\
    \ || dot != 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_pos);\n    std::string sub2 = file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";", "    int count = 0;\n    int dot = 0;\n    int dot_pos\
    \ = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len; i++) {\n\
    \        if(file_name[i] == '.') {\n            dot++;\n            dot_pos =\
    \ i;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n  \
    \          count++;\n        }\n    }\n    if(count > 3) {\n        return \"\
    No\";\n    }\n    if(dot != 1) {\n        return \"No\";\n    }\n    if(dot_pos\
    \ == 0) {\n        return \"No\";\n    }\n    if(file_name[dot_pos + 1] == 't'\
    \ && file_name[dot_pos + 2] == 'x' && file_name[dot_pos + 3] == 't') {\n     \
    \   return \"Yes\";\n    }\n    if(file_name[dot_pos + 1] == 'e' && file_name[dot_pos\
    \ + 2] == 'x' && file_name[dot_pos + 3] == 'e') {\n        return \"Yes\";\n \
    \   }\n    if(file_name[dot_pos + 1] == 'd' && file_name[dot_pos + 2] == 'l' &&\
    \ file_name[dot_pos + 3] == 'l') {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";", "\tint count = 0;\n\tint dot_count = 0;\n\tint dot_pos = 0;\n\tint\
    \ ext_pos = 0;\n\tstd::string ext;\n\tstd::string ext_list[3] = {\"txt\", \"exe\"\
    , \"dll\"};\n\tfor (int i = 0; i < file_name.length(); i++) {\n\t\tif (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n\t\t\tcount++;\n\t\t}\n\t\tif (file_name[i]\
    \ == '.') {\n\t\t\tdot_count++;\n\t\t\tdot_pos = i;\n\t\t}\n\t}\n\tif (count >\
    \ 3 || dot_count != 1) {\n\t\treturn \"No\";\n\t}\n\text_pos = dot_pos + 1;\n\t\
    ext = file_name.substr(ext_pos, file_name.length() - ext_pos);\n\tfor (int i =\
    \ 0; i < 3; i++) {\n\t\tif (ext == ext_list[i]) {\n\t\t\treturn \"Yes\";\n\t\t\
    }\n\t}\n\treturn \"No\";", "    int count = 0;\n    int dot_count = 0;\n    int\
    \ dot_index = 0;\n    int len = file_name.length();\n    for(int i = 0; i < len;\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    std::string before_dot = file_name.substr(0,\
    \ dot_index);\n    std::string after_dot = file_name.substr(dot_index + 1, len\
    \ - dot_index);\n    if(before_dot.length() == 0 || (before_dot[0] < 'a' || before_dot[0]\
    \ > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z')) {\n        return \"\
    No\";\n    }\n    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    int\
    \ count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int digit_count\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(isdigit(file_name[i])) {\n            digit_count++;\n        }\n\
    \    }\n    if(dot_count != 1) {\n        return \"No\";\n    }\n    if(digit_count\
    \ > 3) {\n        return \"No\";\n    }\n    std::string sub_string_1 = file_name.substr(0,\
    \ dot_index);\n    std::string sub_string_2 = file_name.substr(dot_index + 1,\
    \ file_name.length() - dot_index - 1);\n    if(sub_string_1.length() == 0) {\n\
    \        return \"No\";\n    }\n    if(!isalpha(sub_string_1[0])) {\n        return\
    \ \"No\";\n    }\n    if(sub_string_2 != \"txt\" && sub_string_2 != \"exe\" &&\
    \ sub_string_2 != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;", "    int count = 0;\n    int dot = 0;\n    int len = file_name.length();\n\
    \    for(int i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if(file_name[i] == '.')\
    \ {\n            dot++;\n        }\n    }\n    if(count > 3 || dot != 1) {\n \
    \       return \"No\";\n    }\n    std::string s1 = file_name.substr(0, file_name.find('.'));\n\
    \    std::string s2 = file_name.substr(file_name.find('.') + 1);\n    if(s1.length()\
    \ == 0 || (s1[0] < 'a' || s1[0] > 'z') && (s1[0] < 'A' || s1[0] > 'Z')) {\n  \
    \      return \"No\";\n    }\n    if(s2 != \"txt\" && s2 != \"exe\" && s2 != \"\
    dll\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    int count\
    \ = 0;\n    int dot_count = 0;\n    int len = file_name.length();\n    for(int\
    \ i = 0; i < len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            count++;\n        }\n        if(file_name[i] == '.') {\n    \
    \        dot_count++;\n        }\n    }\n    if(count > 3 || dot_count != 1) {\n\
    \        return \"No\";\n    }\n    std::string sub = file_name.substr(0, file_name.find('.'));\n\
    \    if(sub.length() == 0) {\n        return \"No\";\n    }\n    if(!(sub[0] >=\
    \ 'a' && sub[0] <= 'z') && !(sub[0] >= 'A' && sub[0] <= 'Z')) {\n        return\
    \ \"No\";\n    }\n    sub = file_name.substr(file_name.find('.') + 1);\n    if(sub\
    \ != \"txt\" && sub != \"exe\" && sub != \"dll\") {\n        return \"No\";\n\
    \    }\n    return \"Yes\";", "    int count = 0;\n    int dot_count = 0;\n  \
    \  int dot_pos = 0;\n    int len = file_name.length();\n    for(int i = 0; i <\
    \ len; i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n    \
    \        count++;\n        }\n        if(file_name[i] == '.') {\n            dot_count++;\n\
    \            dot_pos = i;\n        }\n    }\n    if(count > 3 || dot_count !=\
    \ 1) {\n        return \"No\";\n    }\n    std::string sub1 = file_name.substr(0,\
    \ dot_pos);\n    std::string sub2 = file_name.substr(dot_pos + 1, len - dot_pos\
    \ - 1);\n    if(sub1.length() == 0 || (sub1[0] < 'a' || sub1[0] > 'z') && (sub1[0]\
    \ < 'A' || sub1[0] > 'Z')) {\n        return \"No\";\n    }\n    if(sub2 != \"\
    txt\" && sub2 != \"exe\" && sub2 != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";", "    // Write your code here\n    // To print results to\
    \ the standard output you can use std::cout\n    // Example: std::cout << \"Hello\
    \ world!\";\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = -1;\n\
    \    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] ==\
    \ '.'){\n            dot_count++;\n            dot_index = i;\n        }\n   \
    \     if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1 || dot_index == 0){\n  \
    \      return \"No\";\n    }\n    std::string str = file_name.substr(dot_index+1);\n\
    \    if(str == \"txt\" || str == \"exe\" || str == \"dll\"){\n        return \"\
    Yes\";\n    }\n    return \"No\";", "    int count = 0;\n    int dot = 0;\n  \
    \  int dot_index = 0;\n    int count_after_dot = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= '0' && file_name[i] <= '9') {\n         \
    \   count++;\n        }\n        if(file_name[i] == '.') {\n            dot++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot != 1) {\n\
    \        return \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\
    \ {\n        return \"No\";\n    }\n    for(int i = dot_index + 1; i < file_name.length();\
    \ i++) {\n        count_after_dot++;\n    }\n    if(count_after_dot != 3) {\n\
    \        return \"No\";\n    }\n    if(file_name[dot_index + 1] != 't' || file_name[dot_index\
    \ + 2] != 'x' || file_name[dot_index + 3] != 't') {\n        return \"No\";\n\
    \    }\n    return \"Yes\";"]
stop_tokens:
- "\n}"
