name: HumanEval_146_specialFilter
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a vector of numbers as input and returns \n// the number of elements in the vector\
  \ that are greater than 10 and both \n// first and last digits of a number are odd\
  \ (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
  \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
  \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
  \ nums) {\n"
tests: "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
  \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
  \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
  \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
  \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
completions: ["    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       if(nums[i] > 10) {\n            long first = nums[i] % 10;\n         \
    \   long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i]\
    \ > 10) {\n            long temp = nums[i];\n            int first = temp % 10;\n\
    \            while(temp > 0) {\n                temp /= 10;\n            }\n \
    \           int last = temp % 10;\n            if(first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / pow(10, floor(log10(nums[i])));\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    for(long i = 0; i\
    \ < nums.size(); i++) {\n        if(nums[i] > 10) {\n            long first =\
    \ nums[i] % 10;\n            long last = nums[i] / 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for(int i = 0; i <\
    \ nums.size(); i++) {\n        if(nums[i] > 10) {\n            long first = nums[i]\
    \ % 10;\n            long last = nums[i] / 10;\n            if(first % 2 != 0\
    \ && last % 2 != 0) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    for(int i = 0; i < nums.size();\
    \ i++) {\n        if(nums[i] > 10 && nums[i] % 2 != 0 && nums[i] % 10 % 2 != 0)\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n\
    \            if(nums[i] % 2 != 0) {\n                long temp = nums[i];\n  \
    \              int first = temp % 10;\n                while(temp >= 10) {\n \
    \                   temp /= 10;\n                }\n                if(temp %\
    \ 2 != 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for(long i =\
    \ 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            long num\
    \ = nums[i];\n            long first = num % 10;\n            long last = num\
    \ / pow(10, floor(log10(num)));\n            if(first % 2 != 0 && last % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for(long i = 0; i < nums.size(); i++) {\n\
    \        if(nums[i] > 10) {\n            long first = nums[i] % 10;\n        \
    \    long last = nums[i] / 10;\n            if(first % 2 != 0 && last % 2 != 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i]\
    \ > 10) {\n            int first = nums[i] % 10;\n            int last = nums[i]\
    \ / 10;\n            if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n    \
    \        long first = nums[i] % 10;\n            long last = nums[i] / 10;\n \
    \           if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n    \
    \        long first = nums[i] % 10;\n            long last = nums[i] / 10;\n \
    \           if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for(long i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n    \
    \        long first = nums[i] % 10;\n            long last = nums[i] / 10;\n \
    \           if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long count = 0;\n \
    \   for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n     \
    \       int first = nums[i] % 10;\n            int last = nums[i] / 10;\n    \
    \        if(first % 2 != 0 && last % 2 != 0) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;", "    long count = 0;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            long\
    \ first = nums[i] / 10;\n            long last = nums[i] % 10;\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;", "    // Write your code here\n    int count\
    \ = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10){\n\
    \            int last_digit = nums[i] % 10;\n            int first_digit = nums[i];\n\
    \            while(first_digit >= 10){\n                first_digit = first_digit\
    \ / 10;\n            }\n            if(last_digit % 2 != 0 && first_digit % 2\
    \ != 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for(auto i: nums){\n        if(i>10){\n \
    \           long first = i%10;\n            long last = i/10;\n            if(first%2!=0\
    \ && last%2!=0){\n                count++;\n            }\n        }\n    }\n\
    \    return count;", "\tlong count = 0;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] > 10) {\n\t\t\tlong first = nums[i] / 10;\n\t\t\tlong last\
    \ = nums[i] % 10;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;", "    long count = 0;\n    for(int i = 0;\
    \ i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            long first\
    \ = nums[i] % 10;\n            long last = nums[i] / 10;\n            if(first\
    \ % 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;", "    long count = 0;\n    for(int i = 0; i\
    \ < nums.size(); i++) {\n        if(nums[i] > 10) {\n            long first =\
    \ nums[i] / 10;\n            long last = nums[i] % 10;\n            if(first %\
    \ 2 != 0 && last % 2 != 0) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;"]
stop_tokens:
- "\n}"
