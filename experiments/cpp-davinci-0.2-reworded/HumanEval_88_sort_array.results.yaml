language: cpp
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if (array.size() ==\
    \ 2) {\n        if ((array[0] + array[1]) % 2 == 0) {\n            std::swap(array[0],\
    \ array[1]);\n        }\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a2r7rdn.cpp: In function 'int main()':\n/tmp/tmp_a2r7rdn.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_a2r7rdn.cpp:2:\n/tmp/tmp_a2r7rdn.cpp:39:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp_a2r7rdn.cpp:40:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp_a2r7rdn.cpp:40:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp_a2r7rdn.cpp:40:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_a2r7rdn.cpp:40:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp_a2r7rdn.cpp:40:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp_a2r7rdn.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_a2r7rdn.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglze38oe.cpp: In function 'int main()':\n/tmp/tmpglze38oe.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpglze38oe.cpp:2:\n/tmp/tmpglze38oe.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpglze38oe.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpglze38oe.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpglze38oe.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglze38oe.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpglze38oe.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpglze38oe.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglze38oe.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n\
    \        std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n \
    \   else\n    {\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsbnoqv5.cpp: In function 'int main()':\n/tmp/tmpqsbnoqv5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsbnoqv5.cpp:2:\n/tmp/tmpqsbnoqv5.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpqsbnoqv5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> res;\n    if (array.size() == 0) return res;\n\
    \    if (array.size() == 1) return array;\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7vni8re1.cpp: In function 'int main()':\n/tmp/tmp7vni8re1.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7vni8re1.cpp:2:\n/tmp/tmp7vni8re1.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp7vni8re1.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp7vni8re1.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp7vni8re1.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7vni8re1.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp7vni8re1.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp7vni8re1.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7vni8re1.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if (array.size() ==\
    \ 2) {\n        if (array[0] > array[1]) {\n            std::swap(array[0], array[1]);\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mpbcpo_.cpp: In function 'int main()':\n/tmp/tmp9mpbcpo_.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9mpbcpo_.cpp:2:\n/tmp/tmp9mpbcpo_.cpp:39:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp9mpbcpo_.cpp:40:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp9mpbcpo_.cpp:40:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp9mpbcpo_.cpp:40:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9mpbcpo_.cpp:40:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp9mpbcpo_.cpp:40:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp9mpbcpo_.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9mpbcpo_.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglze38oe.cpp: In function 'int main()':\n/tmp/tmpglze38oe.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpglze38oe.cpp:2:\n/tmp/tmpglze38oe.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpglze38oe.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpglze38oe.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpglze38oe.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglze38oe.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpglze38oe.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpglze38oe.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglze38oe.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) {\n    return array;\n  }\n  if (array.size()\
    \ == 1) {\n    return array;\n  }\n  if (array.size() == 2) {\n    if (array[0]\
    \ > array[1]) {\n      std::swap(array[0], array[1]);\n    }\n    return array;\n\
    \  }\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2229rubo.cpp: In function 'int main()':\n/tmp/tmp2229rubo.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2229rubo.cpp:2:\n/tmp/tmp2229rubo.cpp:39:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp2229rubo.cpp:40:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp2229rubo.cpp:40:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp2229rubo.cpp:40:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2229rubo.cpp:40:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp2229rubo.cpp:40:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp2229rubo.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2229rubo.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0 || array.size() == 1) {\n        return\
    \ array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n  \
    \      std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoxckuba8.cpp: In function 'int main()':\n/tmp/tmpoxckuba8.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoxckuba8.cpp:2:\n/tmp/tmpoxckuba8.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpoxckuba8.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpoxckuba8.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpoxckuba8.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpoxckuba8.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpoxckuba8.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpoxckuba8.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpoxckuba8.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    int sum = array[0] + array[array.size() - 1];\n    if(sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawk5zutx.cpp: In function 'int main()':\n/tmp/tmpawk5zutx.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawk5zutx.cpp:2:\n/tmp/tmpawk5zutx.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpawk5zutx.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpawk5zutx.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpawk5zutx.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpawk5zutx.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpawk5zutx.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpawk5zutx.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpawk5zutx.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubf8dd4e.cpp: In function 'int main()':\n/tmp/tmpubf8dd4e.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpubf8dd4e.cpp:2:\n/tmp/tmpubf8dd4e.cpp:35:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpubf8dd4e.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:36:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if (array.size() ==\
    \ 2) {\n        if ((array[0] + array[1]) % 2 == 0) {\n            std::swap(array[0],\
    \ array[1]);\n        }\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a2r7rdn.cpp: In function 'int main()':\n/tmp/tmp_a2r7rdn.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_a2r7rdn.cpp:2:\n/tmp/tmp_a2r7rdn.cpp:39:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp_a2r7rdn.cpp:40:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp_a2r7rdn.cpp:40:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp_a2r7rdn.cpp:40:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_a2r7rdn.cpp:40:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp_a2r7rdn.cpp:40:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp_a2r7rdn.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_a2r7rdn.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95i4_n0.cpp: In function 'int main()':\n/tmp/tmpt95i4_n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt95i4_n0.cpp:2:\n/tmp/tmpt95i4_n0.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpt95i4_n0.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3m58h84.cpp: In function 'int main()':\n/tmp/tmpj3m58h84.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj3m58h84.cpp:2:\n/tmp/tmpj3m58h84.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpj3m58h84.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpj3m58h84.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpj3m58h84.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj3m58h84.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpj3m58h84.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpj3m58h84.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj3m58h84.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppi333vjj.cpp: In function 'int main()':\n/tmp/tmppi333vjj.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppi333vjj.cpp:2:\n/tmp/tmppi333vjj.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmppi333vjj.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmppi333vjj.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmppi333vjj.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppi333vjj.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmppi333vjj.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmppi333vjj.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppi333vjj.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n\
    \        std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n \
    \   else\n    {\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsbnoqv5.cpp: In function 'int main()':\n/tmp/tmpqsbnoqv5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsbnoqv5.cpp:2:\n/tmp/tmpqsbnoqv5.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpqsbnoqv5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0)\n    return array;\n  if(array.size() == 1)\n\
    \    return array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpglze38oe.cpp: In function 'int main()':\n/tmp/tmpglze38oe.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpglze38oe.cpp:2:\n/tmp/tmpglze38oe.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpglze38oe.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpglze38oe.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpglze38oe.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglze38oe.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpglze38oe.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpglze38oe.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpglze38oe.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2\
    \ == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrrpq66x.cpp: In function 'int main()':\n/tmp/tmpyrrpq66x.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyrrpq66x.cpp:2:\n/tmp/tmpyrrpq66x.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpyrrpq66x.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpyrrpq66x.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpyrrpq66x.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyrrpq66x.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpyrrpq66x.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpyrrpq66x.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyrrpq66x.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95i4_n0.cpp: In function 'int main()':\n/tmp/tmpt95i4_n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt95i4_n0.cpp:2:\n/tmp/tmpt95i4_n0.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpt95i4_n0.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95i4_n0.cpp: In function 'int main()':\n/tmp/tmpt95i4_n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt95i4_n0.cpp:2:\n/tmp/tmpt95i4_n0.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpt95i4_n0.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n\
    \        std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n \
    \   else\n    {\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsbnoqv5.cpp: In function 'int main()':\n/tmp/tmpqsbnoqv5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsbnoqv5.cpp:2:\n/tmp/tmpqsbnoqv5.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpqsbnoqv5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() <= 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7pt9fqu.cpp: In function 'int main()':\n/tmp/tmp_7pt9fqu.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_7pt9fqu.cpp:2:\n/tmp/tmp_7pt9fqu.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp_7pt9fqu.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp_7pt9fqu.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp_7pt9fqu.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_7pt9fqu.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp_7pt9fqu.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp_7pt9fqu.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_7pt9fqu.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    int sum = array[0] + array[array.size() - 1];\n    if (sum % 2\
    \ == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrrpq66x.cpp: In function 'int main()':\n/tmp/tmpyrrpq66x.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyrrpq66x.cpp:2:\n/tmp/tmpyrrpq66x.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpyrrpq66x.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpyrrpq66x.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpyrrpq66x.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyrrpq66x.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpyrrpq66x.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpyrrpq66x.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyrrpq66x.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if (array.size() ==\
    \ 2) {\n        if (array[0] > array[1]) {\n            std::swap(array[0], array[1]);\n\
    \        }\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mpbcpo_.cpp: In function 'int main()':\n/tmp/tmp9mpbcpo_.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9mpbcpo_.cpp:2:\n/tmp/tmp9mpbcpo_.cpp:39:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp9mpbcpo_.cpp:40:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp9mpbcpo_.cpp:40:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp9mpbcpo_.cpp:40:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9mpbcpo_.cpp:40:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp9mpbcpo_.cpp:40:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp9mpbcpo_.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9mpbcpo_.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubf8dd4e.cpp: In function 'int main()':\n/tmp/tmpubf8dd4e.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpubf8dd4e.cpp:2:\n/tmp/tmpubf8dd4e.cpp:35:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpubf8dd4e.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:36:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohplatew.cpp: In function 'int main()':\n/tmp/tmpohplatew.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohplatew.cpp:2:\n/tmp/tmpohplatew.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpohplatew.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpohplatew.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpohplatew.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpohplatew.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpohplatew.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpohplatew.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpohplatew.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if (array.size() == 0) return array;\n  if (array.size() == 1) return\
    \ array;\n  if (array.size() == 2) {\n    if ((array[0] + array[1]) % 2 == 0)\
    \ {\n      std::swap(array[0], array[1]);\n    }\n    return array;\n  }\n  std::sort(array.begin(),\
    \ array.end());\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::reverse(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpceczvhk4.cpp: In function 'int main()':\n/tmp/tmpceczvhk4.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpceczvhk4.cpp:2:\n/tmp/tmpceczvhk4.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpceczvhk4.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpceczvhk4.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpceczvhk4.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpceczvhk4.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpceczvhk4.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpceczvhk4.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpceczvhk4.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95i4_n0.cpp: In function 'int main()':\n/tmp/tmpt95i4_n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt95i4_n0.cpp:2:\n/tmp/tmpt95i4_n0.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpt95i4_n0.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubf8dd4e.cpp: In function 'int main()':\n/tmp/tmpubf8dd4e.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpubf8dd4e.cpp:2:\n/tmp/tmpubf8dd4e.cpp:35:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpubf8dd4e.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:36:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1) return array;\n   \
    \ if((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohplatew.cpp: In function 'int main()':\n/tmp/tmpohplatew.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpohplatew.cpp:2:\n/tmp/tmpohplatew.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpohplatew.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpohplatew.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpohplatew.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpohplatew.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpohplatew.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpohplatew.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpohplatew.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if(array.size() == 0)\n       \
    \ return result;\n    if(array.size() == 1)\n        return array;\n    if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0)\n        sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpge4sdz9l.cpp: In function 'int main()':\n/tmp/tmpge4sdz9l.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpge4sdz9l.cpp:2:\n/tmp/tmpge4sdz9l.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpge4sdz9l.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpge4sdz9l.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpge4sdz9l.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpge4sdz9l.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpge4sdz9l.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpge4sdz9l.cpp:32:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpge4sdz9l.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95i4_n0.cpp: In function 'int main()':\n/tmp/tmpt95i4_n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt95i4_n0.cpp:2:\n/tmp/tmpt95i4_n0.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpt95i4_n0.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) {\n        return array;\n    }\n    if\
    \ (array.size() == 1) {\n        return array;\n    }\n    if (array.size() ==\
    \ 2) {\n        if ((array[0] + array[1]) % 2 == 0) {\n            std::swap(array[0],\
    \ array[1]);\n        }\n        return array;\n    }\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_a2r7rdn.cpp: In function 'int main()':\n/tmp/tmp_a2r7rdn.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_a2r7rdn.cpp:2:\n/tmp/tmp_a2r7rdn.cpp:39:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp_a2r7rdn.cpp:40:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp_a2r7rdn.cpp:40:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp_a2r7rdn.cpp:40:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_a2r7rdn.cpp:40:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp_a2r7rdn.cpp:40:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp_a2r7rdn.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_a2r7rdn.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    std::vector<long> result;\n    if (array.size() == 0) {\n    \
    \    return result;\n    }\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppi333vjj.cpp: In function 'int main()':\n/tmp/tmppi333vjj.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppi333vjj.cpp:2:\n/tmp/tmppi333vjj.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmppi333vjj.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmppi333vjj.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmppi333vjj.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppi333vjj.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmppi333vjj.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmppi333vjj.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppi333vjj.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0) return array;\n    if (array.size() ==\
    \ 1) return array;\n    if (array.size() == 2) {\n        if ((array[0] + array[1])\
    \ % 2 == 0) {\n            std::swap(array[0], array[1]);\n        }\n       \
    \ return array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubf8dd4e.cpp: In function 'int main()':\n/tmp/tmpubf8dd4e.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpubf8dd4e.cpp:2:\n/tmp/tmpubf8dd4e.cpp:35:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpubf8dd4e.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpubf8dd4e.cpp:36:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:36:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpubf8dd4e.cpp:36:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpubf8dd4e.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n\
    \        std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n \
    \   else\n    {\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsbnoqv5.cpp: In function 'int main()':\n/tmp/tmpqsbnoqv5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsbnoqv5.cpp:2:\n/tmp/tmpqsbnoqv5.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpqsbnoqv5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n\
    \        std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n \
    \   else\n    {\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsbnoqv5.cpp: In function 'int main()':\n/tmp/tmpqsbnoqv5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsbnoqv5.cpp:2:\n/tmp/tmpqsbnoqv5.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpqsbnoqv5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if (array.size() == 0 || array.size() == 1) {\n        return\
    \ array;\n    }\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n  \
    \      std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoxckuba8.cpp: In function 'int main()':\n/tmp/tmpoxckuba8.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoxckuba8.cpp:2:\n/tmp/tmpoxckuba8.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpoxckuba8.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpoxckuba8.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpoxckuba8.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpoxckuba8.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpoxckuba8.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpoxckuba8.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpoxckuba8.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size() == 0) return array;\n  if(array.size() == 1) return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3m58h84.cpp: In function 'int main()':\n/tmp/tmpj3m58h84.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj3m58h84.cpp:2:\n/tmp/tmpj3m58h84.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpj3m58h84.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpj3m58h84.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpj3m58h84.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj3m58h84.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpj3m58h84.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpj3m58h84.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpj3m58h84.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size()==0)\n        return array;\n    if(array.size()==1)\n\
    \        return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n\
    \        std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n \
    \   else\n    {\n        std::sort(array.begin(),array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsbnoqv5.cpp: In function 'int main()':\n/tmp/tmpqsbnoqv5.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsbnoqv5.cpp:2:\n/tmp/tmpqsbnoqv5.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpqsbnoqv5.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpqsbnoqv5.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpqsbnoqv5.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpqsbnoqv5.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  std::vector<long> result = array;\n  if (array.size() == 0) {\n\
    \    return result;\n  }\n  if (array.size() == 1) {\n    return result;\n  }\n\
    \  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(result.begin(),\
    \ result.end(), std::greater<long>());\n  } else {\n    std::sort(result.begin(),\
    \ result.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_d30haa.cpp: In function 'int main()':\n/tmp/tmpg_d30haa.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg_d30haa.cpp:2:\n/tmp/tmpg_d30haa.cpp:34:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpg_d30haa.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpg_d30haa.cpp:35:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpg_d30haa.cpp:35:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg_d30haa.cpp:35:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpg_d30haa.cpp:35:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpg_d30haa.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg_d30haa.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0 || array.size() == 1)\n        return array;\n\
    \    if((array[0] + array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95i4_n0.cpp: In function 'int main()':\n/tmp/tmpt95i4_n0.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt95i4_n0.cpp:2:\n/tmp/tmpt95i4_n0.cpp:28:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpt95i4_n0.cpp:29:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpt95i4_n0.cpp:29:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:29:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpt95i4_n0.cpp:29:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt95i4_n0.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  if(array.size()==0)\n    return array;\n  if(array.size()==1)\n\
    \    return array;\n  if((array[0]+array[array.size()-1])%2==0)\n    std::sort(array.begin(),array.end(),std::greater<long>());\n\
    \  else\n    std::sort(array.begin(),array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7qtgotz2.cpp: In function 'int main()':\n/tmp/tmp7qtgotz2.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7qtgotz2.cpp:2:\n/tmp/tmp7qtgotz2.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp7qtgotz2.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp7qtgotz2.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp7qtgotz2.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7qtgotz2.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp7qtgotz2.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp7qtgotz2.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7qtgotz2.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ == 1)\n        return array;\n    if((array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui9liok4.cpp: In function 'int main()':\n/tmp/tmpui9liok4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpui9liok4.cpp:2:\n/tmp/tmpui9liok4.cpp:30:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpui9liok4.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpui9liok4.cpp:31:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:31:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpui9liok4.cpp:31:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpui9liok4.cpp:31:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpui9liok4.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    if(array.size() == 0) return array;\n    if(array.size() == 1)\
    \ return array;\n    if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \     std::sort(array.begin(), array.end(), std::greater<long>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt0a7155.cpp: In function 'int main()':\n/tmp/tmpmt0a7155.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmt0a7155.cpp:2:\n/tmp/tmpmt0a7155.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmt0a7155.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmt0a7155.cpp:30:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:30:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmt0a7155.cpp:30:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpmt0a7155.cpp:30:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmt0a7155.cpp:31:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n  // your code here\n  int n = array.size();\n  if(n == 0)\n    return\
    \ array;\n  if(n == 1)\n    return array;\n  if(array[0] + array[n-1] % 2 == 0)\n\
    \    sort(array.begin(), array.end(), greater<int>());\n  else\n    sort(array.begin(),\
    \ array.end());\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxksl41go.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpxksl41go.cpp:25:38: error: 'greater' was not declared in this\
    \ scope\n     sort(array.begin(), array.end(), greater<int>());\n            \
    \                          ^\n/tmp/tmpxksl41go.cpp:25:38: note: suggested alternative:\n\
    In file included from /usr/include/c++/4.8.2/string:48:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxksl41go.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_function.h:222:12:\
    \ note:   'std::greater'\n     struct greater : public binary_function<_Tp, _Tp,\
    \ bool>\n            ^\n/tmp/tmpxksl41go.cpp:25:46: error: expected primary-expression\
    \ before 'int'\n     sort(array.begin(), array.end(), greater<int>());\n     \
    \                                         ^\n/tmp/tmpxksl41go.cpp: In function\
    \ 'int main()':\n/tmp/tmpxksl41go.cpp:31:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sort_array;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxksl41go.cpp:2:\n/tmp/tmpxksl41go.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpxksl41go.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpxksl41go.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpxksl41go.cpp:33:50: warning: extended initializer lists\
    \ only avai"
  stdout: ''
