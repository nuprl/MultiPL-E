name: HumanEval_7_filter_by_substring
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of\
  \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
  \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
  abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"\
  a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\"\
  , (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
  \ strings, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
  xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
  , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
  trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"\
  grunt\", (std::string)\"prune\"})));\n}\n"
completions: ["\tstd::vector<std::string> result;\n\tfor (auto string : strings) {\n\
    \t\tif (string.find(substring) != std::string::npos) {\n\t\t\tresult.push_back(string);\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (auto string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string str : strings) {\n \
    \       if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    for (auto string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(string);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (int i =\
    \ 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto i : strings) {\n        if (i.find(substring) != std::string::npos)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(string);\n        }\n    }\n    return\
    \ filtered_strings;", "    std::vector<std::string> result;\n    for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n        if (it->find(substring)\
    \ != std::string::npos) {\n            result.push_back(*it);\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (auto s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto i = strings.begin(); i != strings.end();\
    \ i++) {\n        if (i->find(substring) != std::string::npos) {\n           \
    \ result.push_back(*i);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) !=\
    \ std::string::npos) {\n            result.push_back(strings[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(substring)\
    \ != std::string::npos) {\n            result.push_back(*i);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (auto string : strings) {\n   \
    \     if (string.find(substring) != std::string::npos) {\n            filtered.push_back(string);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto it = strings.begin(); it != strings.end(); ++it) {\n        if\
    \ (it->find(substring) != std::string::npos) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto it = strings.begin(); it != strings.end(); ++it) {\n        if\
    \ (it->find(substring) != std::string::npos) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto it = strings.begin(); it !=\
    \ strings.end(); ++it) {\n        if (it->find(substring) != std::string::npos)\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            filtered_strings.push_back(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto const& s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto i = strings.begin(); i != strings.end();\
    \ i++) {\n        if (i->find(substring) != std::string::npos) {\n           \
    \ result.push_back(*i);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (int i =\
    \ 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> result;\n\t\
    for (auto s : strings) {\n\t\tif (s.find(substring) != std::string::npos) {\n\t\
    \t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto str : strings) {\n        if\
    \ (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string str : strings) {\n \
    \       if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;", "    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto it = strings.begin(); it !=\
    \ strings.end(); ++it) {\n        if (it->find(substring) != std::string::npos)\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        if (strings[i].find(substring) != std::string::npos) {\n        \
    \    result.push_back(strings[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto it = strings.begin(); it !=\
    \ strings.end(); ++it) {\n        if (it->find(substring) != std::string::npos)\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
