name: HumanEval_160_do_algebra
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
  \ and operand. The first vector has basic algebra operations, and \n// the second\
  \ vector is a vector of integers. Use the two given vectors to build the algebric\
  \ \n// expression and return the evaluation of this expression.\n// The basic algebra\
  \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( *\
  \ ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+',\
  \ '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result =\
  \ 9\n// Note:\n// The length of operator vector is equal to the length of operand\
  \ vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator\
  \ vector has at least one operator, and operand vector has at least two operands.\n\
  long do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n"
tests: "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3,\
  \ (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
  \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) ==\
  \ (8));\n}\n"
completions: ["    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++) {\n\
    \        if(op[i] == \"+\") {\n            long a = stk.top();\n            stk.pop();\n\
    \            long b = stk.top();\n            stk.pop();\n            stk.push(a\
    \ + b);\n        } else if(op[i] == \"-\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b - a);\n        } else if(op[i] == \"*\") {\n         \
    \   long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(a * b);\n        } else if(op[i]\
    \ == \"//\") {\n            long a = stk.top();\n            stk.pop();\n    \
    \        long b = stk.top();\n            stk.pop();\n            stk.push(b /\
    \ a);\n        } else if(op[i] == \"**\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(pow(b, a));\n        } else {\n            stk.push(operand[i]);\n\
    \        }\n    }\n    return stk.top();", "  // Write your code here\n  std::stack<long>\
    \ s;\n  for(int i=0;i<op.size();i++){\n    if(op[i]==\"+\"){\n      long a=s.top();\n\
    \      s.pop();\n      long b=s.top();\n      s.pop();\n      s.push(a+b);\n \
    \   }\n    else if(op[i]==\"-\"){\n      long a=s.top();\n      s.pop();\n   \
    \   long b=s.top();\n      s.pop();\n      s.push(b-a);\n    }\n    else if(op[i]==\"\
    *\"){\n      long a=s.top();\n      s.pop();\n      long b=s.top();\n      s.pop();\n\
    \      s.push(a*b);\n    }\n    else if(op[i]==\"//\"){\n      long a=s.top();\n\
    \      s.pop();\n      long b=s.top();\n      s.pop();\n      s.push(b/a);\n \
    \   }\n    else if(op[i]==\"**\"){\n      long a=s.top();\n      s.pop();\n  \
    \    long b=s.top();\n      s.pop();\n      s.push(pow(b,a));\n    }\n    else{\n\
    \      s.push(operand[i]);\n    }\n  }\n  return s.top();", "    long result =\
    \ operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"\
    +\") {\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\") {\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "  // Write your code here\n  long result = operand[0];\n\
    \  for(int i = 0; i < op.size(); i++){\n    if(op[i] == \"+\"){\n      result\
    \ += operand[i+1];\n    }\n    else if(op[i] == \"-\"){\n      result -= operand[i+1];\n\
    \    }\n    else if(op[i] == \"*\"){\n      result *= operand[i+1];\n    }\n \
    \   else if(op[i] == \"//\"){\n      result /= operand[i+1];\n    }\n    else\
    \ if(op[i] == \"**\"){\n      result = pow(result, operand[i+1]);\n    }\n  }\n\
    \  return result;", "    std::stack<long> stk;\n    stk.push(operand[0]);\n  \
    \  for(int i = 0; i < op.size(); i++) {\n        long op1 = stk.top();\n     \
    \   stk.pop();\n        long op2 = operand[i+1];\n        if(op[i] == \"+\") {\n\
    \            stk.push(op1 + op2);\n        } else if(op[i] == \"-\") {\n     \
    \       stk.push(op1 - op2);\n        } else if(op[i] == \"*\") {\n          \
    \  stk.push(op1 * op2);\n        } else if(op[i] == \"//\") {\n            stk.push(op1\
    \ / op2);\n        } else if(op[i] == \"**\") {\n            stk.push(pow(op1,\
    \ op2));\n        }\n    }\n    return stk.top();", "    // Write your code here\n\
    \    long result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n    \
    \    if(op[i] == \"+\"){\n            result += operand[i+1];\n        }\n   \
    \     else if(op[i] == \"-\"){\n            result -= operand[i+1];\n        }\n\
    \        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n     \
    \   }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n\
    \        if(op[i] == \"+\"){\n            result += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n     \
    \   }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    // To print results to the standard output you can use std::cout\n\
    \    // Example: std::cout << \"Hello world!\";\n    stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"\
    +\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"\
    *\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a * b);\n        }\
    \ else if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();", " \
    \   std::stack<long> st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a + b);\n\
    \        } else if(op[i] == \"-\") {\n            long a = st.top();\n       \
    \     st.pop();\n            long b = st.top();\n            st.pop();\n     \
    \       st.push(b - a);\n        } else if(op[i] == \"*\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(a * b);\n        } else if(op[i] == \"\
    //\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b / a);\n        }\
    \ else if(op[i] == \"**\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(pow(b,\
    \ a));\n        }\n    }\n    return st.top();", "    std::stack<long> st;\n \
    \   st.push(operand[0]);\n    for(int i = 0; i < op.size(); i++) {\n        long\
    \ a = st.top();\n        st.pop();\n        long b = operand[i+1];\n        if(op[i]\
    \ == \"+\") {\n            st.push(a+b);\n        } else if(op[i] == \"-\") {\n\
    \            st.push(a-b);\n        } else if(op[i] == \"*\") {\n            st.push(a*b);\n\
    \        } else if(op[i] == \"//\") {\n            st.push(a/b);\n        } else\
    \ if(op[i] == \"**\") {\n            st.push(pow(a, b));\n        }\n    }\n \
    \   return st.top();", "    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    // To print results to the standard output you can use std::cout\n\
    \    // Example: std::cout << \"Hello world!\";\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }else if(op[i] == \"-\"){\n          \
    \  result -= operand[i+1];\n        }else if(op[i] == \"*\"){\n            result\
    \ *= operand[i+1];\n        }else if(op[i] == \"//\"){\n            result /=\
    \ operand[i+1];\n        }else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "  // Write your code\
    \ here\n  long result = operand[0];\n  for(int i = 0; i < op.size(); i++){\n \
    \   if(op[i] == \"+\"){\n      result += operand[i+1];\n    }\n    else if(op[i]\
    \ == \"-\"){\n      result -= operand[i+1];\n    }\n    else if(op[i] == \"*\"\
    ){\n      result *= operand[i+1];\n    }\n    else if(op[i] == \"//\"){\n    \
    \  result /= operand[i+1];\n    }\n    else if(op[i] == \"**\"){\n      result\
    \ = pow(result, operand[i+1]);\n    }\n  }\n  return result;", "    // Write your\
    \ code here\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n  \
    \      }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    std::stack<long> stk;\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(a + b);\n        } else if(op[i] == \"-\") {\n         \
    \   long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(b - a);\n        } else if(op[i]\
    \ == \"*\") {\n            long a = stk.top();\n            stk.pop();\n     \
    \       long b = stk.top();\n            stk.pop();\n            stk.push(a *\
    \ b);\n        } else if(op[i] == \"//\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b / a);\n        } else if(op[i] == \"**\") {\n        \
    \    long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(pow(b, a));\n        }\n    }\n\
    \    return stk.top();", "    // Write your code here\n    std::stack<long> st;\n\
    \    for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long\
    \ a=st.top();\n            st.pop();\n            long b=st.top();\n         \
    \   st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n\
    \        if(op[i] == \"+\"){\n            result += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n     \
    \   }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    std::stack<long>\
    \ s;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            long a = s.top();\n            s.pop();\n            long b = s.top();\n\
    \            s.pop();\n            s.push(a + b);\n        } else if(op[i] ==\
    \ \"-\") {\n            long a = s.top();\n            s.pop();\n            long\
    \ b = s.top();\n            s.pop();\n            s.push(b - a);\n        } else\
    \ if(op[i] == \"*\") {\n            long a = s.top();\n            s.pop();\n\
    \            long b = s.top();\n            s.pop();\n            s.push(a * b);\n\
    \        } else if(op[i] == \"//\") {\n            long a = s.top();\n       \
    \     s.pop();\n            long b = s.top();\n            s.pop();\n        \
    \    s.push(b / a);\n        } else if(op[i] == \"**\") {\n            long a\
    \ = s.top();\n            s.pop();\n            long b = s.top();\n          \
    \  s.pop();\n            s.push(pow(b, a));\n        } else {\n            s.push(operand[i]);\n\
    \        }\n    }\n    return s.top();", "  // your code here\n  std::stack<long>\
    \ stk;\n  for(int i = 0; i < op.size(); i++){\n    if(op[i] == \"+\"){\n     \
    \ long a = stk.top();\n      stk.pop();\n      long b = stk.top();\n      stk.pop();\n\
    \      stk.push(a + b);\n    }\n    else if(op[i] == \"-\"){\n      long a = stk.top();\n\
    \      stk.pop();\n      long b = stk.top();\n      stk.pop();\n      stk.push(b\
    \ - a);\n    }\n    else if(op[i] == \"*\"){\n      long a = stk.top();\n    \
    \  stk.pop();\n      long b = stk.top();\n      stk.pop();\n      stk.push(a *\
    \ b);\n    }\n    else if(op[i] == \"//\"){\n      long a = stk.top();\n     \
    \ stk.pop();\n      long b = stk.top();\n      stk.pop();\n      stk.push(b /\
    \ a);\n    }\n    else if(op[i] == \"**\"){\n      long a = stk.top();\n     \
    \ stk.pop();\n      long b = stk.top();\n      stk.pop();\n      stk.push(pow(b,\
    \ a));\n    }\n    else{\n      stk.push(operand[i]);\n    }\n  }\n  return stk.top();",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "  long result = operand[0];\n  for (int i = 0; i <\
    \ op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n\
    \    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else\
    \ if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i]\
    \ == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i] == \"**\"\
    ) {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return result;",
  "    // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n\
    \        if(op[i] == \"+\"){\n            result += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n     \
    \   }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"\
    +\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a+b);\n        }\n\
    \        else if(op[i]==\"-\"){\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b-a);\n\
    \        }\n        else if(op[i]==\"*\"){\n            long a = st.top();\n \
    \           st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a*b);\n        }\n        else if(op[i]==\"//\"){\n     \
    \       long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b/a);\n        }\n        else if(op[i]==\"\
    **\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(pow(b,a));\n     \
    \   }\n        else{\n            st.push(operand[i]);\n        }\n    }\n   \
    \ return st.top();", "    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n           \
    \ result -= operand[i+1];\n        }\n        else if(op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        }\n        else if(op[i] == \"//\")\
    \ {\n            result /= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;", "  long result = operand[0];\n  for (int i = 0; i < op.size();\
    \ i++) {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else\
    \ if (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i]\
    \ == \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\"\
    ) {\n      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n    \
    \  result = pow(result, operand[i + 1]);\n    }\n  }\n  return result;", "   \
    \ long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n      \
    \  if(op[i] == \"+\") {\n            result += operand[i+1];\n        }\n    \
    \    else if(op[i] == \"-\") {\n            result -= operand[i+1];\n        }\n\
    \        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    // Write your code here\n    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n\
    \        if(op[i]==\"+\"){\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(a+b);\n\
    \        }\n        else if(op[i]==\"-\"){\n            long a = st.top();\n \
    \           st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b-a);\n        }\n        else if(op[i]==\"*\"){\n      \
    \      long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b/a);\n        }\n\
    \        else if(op[i]==\"**\"){\n            long a = st.top();\n           \
    \ st.pop();\n            long b = st.top();\n            st.pop();\n         \
    \   st.push(pow(b,a));\n        }\n        else{\n            st.push(operand[i]);\n\
    \        }\n    }\n    return st.top();", "    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n       \
    \     result += operand[i+1];\n        } else if(op[i] == \"-\") {\n         \
    \   result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n           \
    \ result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n            result\
    \ /= operand[i+1];\n        } else if(op[i] == \"**\") {\n            result =\
    \ pow(result, operand[i+1]);\n        }\n    }\n    return result;", "    // Write\
    \ your code here\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n  \
    \      }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    std::stack<long>\
    \ st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a + b);\n        } else if(op[i] ==\
    \ \"-\") {\n            long a = st.top();\n            st.pop();\n          \
    \  long b = st.top();\n            st.pop();\n            st.push(b - a);\n  \
    \      } else if(op[i] == \"*\") {\n            long a = st.top();\n         \
    \   st.pop();\n            long b = st.top();\n            st.pop();\n       \
    \     st.push(a * b);\n        } else if(op[i] == \"//\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b / a);\n        } else if(op[i] == \"\
    **\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n    \
    \    }\n    }\n    return st.top();", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n           \
    \ result -= operand[i+1];\n        }\n        else if(op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        }\n        else if(op[i] == \"//\")\
    \ {\n            result /= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n    \
    \        long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "    // Write your code here\n    std::stack<long> s;\n \
    \   for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long\
    \ a=s.top();\n            s.pop();\n            long b=s.top();\n            s.pop();\n\
    \            s.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n       \
    \     long a=s.top();\n            s.pop();\n            long b=s.top();\n   \
    \         s.pop();\n            s.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(b/a);\n        }\n        else if(op[i]==\"\
    **\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(pow(b,a));\n        }\n        else{\n\
    \            s.push(operand[i]);\n        }\n    }\n    return s.top();", "  \
    \  // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "\tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i]\
    \ == \"+\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\
    \t\t\tst.pop();\n\t\t\tst.push(a + b);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\
    \t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(b - a);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a *\
    \ b);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong a = st.top();\n\t\t\t\
    st.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b / a);\n\t\
    \t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\
    \t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b, a));\n\t\t}\n\t\
    \telse {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();", "    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\") {\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    std::stack<long> st;\n    st.push(operand[0]);\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        st.push(operand[i+1]);\n        } else if(op[i] == \"-\") {\n       \
    \     st.push(-operand[i+1]);\n        } else if(op[i] == \"*\") {\n         \
    \   long temp = st.top();\n            st.pop();\n            st.push(temp * operand[i+1]);\n\
    \        } else if(op[i] == \"//\") {\n            long temp = st.top();\n   \
    \         st.pop();\n            st.push(temp / operand[i+1]);\n        } else\
    \ if(op[i] == \"**\") {\n            long temp = st.top();\n            st.pop();\n\
    \            st.push(pow(temp, operand[i+1]));\n        }\n    }\n    long sum\
    \ = 0;\n    while(!st.empty()) {\n        sum += st.top();\n        st.pop();\n\
    \    }\n    return sum;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"\
    *\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a * b);\n        }\
    \ else if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();", " \
    \   long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n    \
    \    if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "  // Write your code here\n  // To print results to the\
    \ standard output you can use std::cout\n  // Example: std::cout << \"Hello world!\"\
    ;\n  std::stack<long> st;\n  for(int i=0;i<op.size();i++){\n      if(op[i]==\"\
    +\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(a+b);\n      }\n      else if(op[i]==\"\
    -\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(b-a);\n      }\n      else if(op[i]==\"\
    *\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(a*b);\n      }\n      else if(op[i]==\"\
    //\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(b/a);\n      }\n      else if(op[i]==\"\
    **\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(pow(b,a));\n      }\n      else{\n   \
    \       st.push(operand[i]);\n      }\n  }\n  return st.top();", "    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] ==\
    \ \"+\") {\n            result += operand[i+1];\n        } else if(op[i] == \"\
    -\") {\n            result -= operand[i+1];\n        } else if(op[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n\
    \            result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n \
    \           result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;", "    // Write your code here\n    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            result\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            result\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ result /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n    \
    \        result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long res = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            res\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            res -= operand[i+1];\n\
    \        } else if(op[i] == \"*\") {\n            res *= operand[i+1];\n     \
    \   } else if(op[i] == \"//\") {\n            res /= operand[i+1];\n        }\
    \ else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n    \
    \    }\n    }\n    return res;", "    // Write your code here\n    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] ==\
    \ \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "\tlong result = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn result;", "    long result = operand[0];\n    for(int i =\
    \ 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result +=\
    \ operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n  \
    \      } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n   \
    \     } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::stack<long>\
    \ s;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n         \
    \   long a = s.top();\n            s.pop();\n            long b = s.top();\n \
    \           s.pop();\n            s.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a = s.top();\n            s.pop();\n            long b\
    \ = s.top();\n            s.pop();\n            s.push(b-a);\n        }\n    \
    \    else if(op[i]==\"*\"){\n            long a = s.top();\n            s.pop();\n\
    \            long b = s.top();\n            s.pop();\n            s.push(a*b);\n\
    \        }\n        else if(op[i]==\"//\"){\n            long a = s.top();\n \
    \           s.pop();\n            long b = s.top();\n            s.pop();\n  \
    \          s.push(b/a);\n        }\n        else if(op[i]==\"**\"){\n        \
    \    long a = s.top();\n            s.pop();\n            long b = s.top();\n\
    \            s.pop();\n            s.push(pow(b,a));\n        }\n        else{\n\
    \            s.push(operand[i]);\n        }\n    }\n    return s.top();", "  \
    \  // Write your code here\n    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n\
    \        if(op[i]==\"+\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(a+b);\n\
    \        }\n        else if(op[i]==\"-\"){\n            long a=st.top();\n   \
    \         st.pop();\n            long b=st.top();\n            st.pop();\n   \
    \         st.push(b-a);\n        }\n        else if(op[i]==\"*\"){\n         \
    \   long a=st.top();\n            st.pop();\n            long b=st.top();\n  \
    \          st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"\
    *\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a * b);\n        }\
    \ else if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();", " \
    \   // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "\tlong result = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn result;", "  long result = operand[0];\n  for (int i = 0;\
    \ i < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i\
    \ + 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n \
    \   } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else\
    \ if (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i]\
    \ == \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return\
    \ result;", "    // Write your code here\n    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            result\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            result\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ result /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n    \
    \        result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    std::stack<long> s;\n    s.push(operand[0]);\n    for(int i = 0; i < op.size();\
    \ i++) {\n        long a = s.top();\n        s.pop();\n        long b = operand[i+1];\n\
    \        if(op[i] == \"+\") {\n            s.push(a+b);\n        } else if(op[i]\
    \ == \"-\") {\n            s.push(a-b);\n        } else if(op[i] == \"*\") {\n\
    \            s.push(a*b);\n        } else if(op[i] == \"//\") {\n            s.push(a/b);\n\
    \        } else if(op[i] == \"**\") {\n            s.push(pow(a,b));\n       \
    \ }\n    }\n    return s.top();", "    // Write your code here\n    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] ==\
    \ \"+\"){\n            result += operand[i+1];\n        }else if(op[i] == \"-\"\
    ){\n            result -= operand[i+1];\n        }else if(op[i] == \"*\"){\n \
    \           result *= operand[i+1];\n        }else if(op[i] == \"//\"){\n    \
    \        result /= operand[i+1];\n        }else if(op[i] == \"**\"){\n       \
    \     result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        }\n   \
    \     else if(op[i] == \"-\") {\n            result -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    // Write your code\
    \ here\n    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"\
    +\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n    \
    \        long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();",
  "    // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "\tlong result = operand[0];\n\
    \tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult\
    \ += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tresult -= operand[i\
    \ + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\
    \t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t\
    }\n\t\telse if (op[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\
    \t\t}\n\t}\n\treturn result;", "  // Write your code here\n  // To print results\
    \ to the standard output you can use std::cout\n  // Example: std::cout << \"\
    Hello world!\";\n  long result = operand[0];\n  for(int i = 0; i < op.size();\
    \ i++){\n      if(op[i] == \"+\"){\n          result += operand[i+1];\n      }\n\
    \      else if(op[i] == \"-\"){\n          result -= operand[i+1];\n      }\n\
    \      else if(op[i] == \"*\"){\n          result *= operand[i+1];\n      }\n\
    \      else if(op[i] == \"//\"){\n          result /= operand[i+1];\n      }\n\
    \      else if(op[i] == \"**\"){\n          result = pow(result, operand[i+1]);\n\
    \      }\n  }\n  return result;", "    std::stack<long> st;\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n \
    \           long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();",
  "    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            long a = stk.top();\n            stk.pop();\n     \
    \       long b = stk.top();\n            stk.pop();\n            stk.push(a +\
    \ b);\n        } else if(op[i] == \"-\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b - a);\n        } else if(op[i] == \"*\") {\n         \
    \   long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(a * b);\n        } else if(op[i]\
    \ == \"//\") {\n            long a = stk.top();\n            stk.pop();\n    \
    \        long b = stk.top();\n            stk.pop();\n            stk.push(b /\
    \ a);\n        } else if(op[i] == \"**\") {\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(pow(b, a));\n        } else {\n            stk.push(operand[i]);\n\
    \        }\n    }\n    return stk.top();", "    long result = operand[0];\n  \
    \  for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n      \
    \      result += operand[i+1];\n        } else if(op[i] == \"-\") {\n        \
    \    result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n          \
    \  result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n           \
    \ result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;", "    std::stack<long>\
    \ st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a + b);\n        }\n        else if(op[i]\
    \ == \"-\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(b - a);\n\
    \        }\n        else if(op[i] == \"*\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a * b);\n        }\n        else if(op[i] == \"//\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b / a);\n        }\n        else if(op[i]\
    \ == \"**\") {\n            long a = st.top();\n            st.pop();\n      \
    \      long b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n\
    \        }\n        else {\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n    \
    \        long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();",
  "    long res = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            res += operand[i+1];\n        } else if(op[i] == \"\
    -\") {\n            res -= operand[i+1];\n        } else if(op[i] == \"*\") {\n\
    \            res *= operand[i+1];\n        } else if(op[i] == \"//\") {\n    \
    \        res /= operand[i+1];\n        } else if(op[i] == \"**\") {\n        \
    \    res = pow(res, operand[i+1]);\n        }\n    }\n    return res;", "    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\") {\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "  long result = operand[0];\n  for (int i = 0; i\
    \ < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i +\
    \ 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n   \
    \ } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else if\
    \ (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i] ==\
    \ \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return\
    \ result;", "  // Write your code here\n  long result = operand[0];\n  for(int\
    \ i = 0; i < op.size(); i++){\n    if(op[i] == \"+\"){\n      result += operand[i+1];\n\
    \    }\n    else if(op[i] == \"-\"){\n      result -= operand[i+1];\n    }\n \
    \   else if(op[i] == \"*\"){\n      result *= operand[i+1];\n    }\n    else if(op[i]\
    \ == \"//\"){\n      result /= operand[i+1];\n    }\n    else if(op[i] == \"**\"\
    ){\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "  long result = operand[0];\n  for (int i = 0; i < op.size();\
    \ i++) {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else\
    \ if (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i]\
    \ == \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\"\
    ) {\n      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n    \
    \  result = pow(result, operand[i + 1]);\n    }\n  }\n  return result;", "\tlong\
    \ result = operand[0];\n\tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i]\
    \ == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    -\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\
    \t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\t\
    result /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tresult\
    \ = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;", "    long res\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] ==\
    \ \"+\") {\n            res += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\") {\n            res -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\") {\n            res *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n\
    \    return res;", "    long res = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n   \
    \     } else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        }\
    \ else if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else\
    \ if(op[i] == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i]\
    \ == \"**\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n\
    \    return res;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n    \
    \        long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();",
  "\tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i]\
    \ == \"+\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\
    \t\t\tst.pop();\n\t\t\tst.push(a + b);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\
    \t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(b - a);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a *\
    \ b);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong a = st.top();\n\t\t\t\
    st.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b / a);\n\t\
    \t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\
    \t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b, a));\n\t\t}\n\t\
    \telse {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();", "    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            result += operand[i+1];\n        } else if(op[i] ==\
    \ \"-\") {\n            result -= operand[i+1];\n        } else if(op[i] == \"\
    *\") {\n            result *= operand[i+1];\n        } else if(op[i] == \"//\"\
    ) {\n            result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n\
    \            result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;", "    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n           \
    \ result -= operand[i+1];\n        }\n        else if(op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        }\n        else if(op[i] == \"//\")\
    \ {\n            result /= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;", "    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n           \
    \ result -= operand[i+1];\n        }\n        else if(op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        }\n        else if(op[i] == \"//\")\
    \ {\n            result /= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;", "    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    long\
    \ result = operand[0];\n    for(int i = 1; i < operand.size(); i++){\n       \
    \ if(op[i-1] == \"+\"){\n            result += operand[i];\n        }\n      \
    \  else if(op[i-1] == \"-\"){\n            result -= operand[i];\n        }\n\
    \        else if(op[i-1] == \"*\"){\n            result *= operand[i];\n     \
    \   }\n        else if(op[i-1] == \"//\"){\n            result /= operand[i];\n\
    \        }\n        else if(op[i-1] == \"**\"){\n            result = pow(result,\
    \ operand[i]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "    // Write your code here\n    long res = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      res += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         res -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            res *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            res /= operand[i+1];\n        }\n        else if(op[i] == \"**\"\
    ){\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return res;",
  "    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a + b);\n\
    \        } else if(op[i] == \"-\") {\n            long a = st.top();\n       \
    \     st.pop();\n            long b = st.top();\n            st.pop();\n     \
    \       st.push(b - a);\n        } else if(op[i] == \"*\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(a * b);\n        } else if(op[i] == \"\
    //\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b / a);\n        }\
    \ else if(op[i] == \"**\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(pow(b,\
    \ a));\n        }\n    }\n    return st.top();", "    // Write your code here\n\
    \    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++){\n        if(op[i]\
    \ == \"+\"){\n            long a = stk.top();\n            stk.pop();\n      \
    \      long b = stk.top();\n            stk.pop();\n            stk.push(a + b);\n\
    \        }\n        else if(op[i] == \"-\"){\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b - a);\n        }\n        else if(op[i] == \"*\"){\n \
    \           long a = stk.top();\n            stk.pop();\n            long b =\
    \ stk.top();\n            stk.pop();\n            stk.push(a * b);\n        }\n\
    \        else if(op[i] == \"//\"){\n            long a = stk.top();\n        \
    \    stk.pop();\n            long b = stk.top();\n            stk.pop();\n   \
    \         stk.push(b / a);\n        }\n        else if(op[i] == \"**\"){\n   \
    \         long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(pow(b, a));\n        }\n       \
    \ else{\n            stk.push(operand[i]);\n        }\n    }\n    return stk.top();",
  "    // Write your code here\n    std::stack<long> st;\n    for(int i=0;i<op.size();i++){\n\
    \        if(op[i]==\"+\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(a+b);\n\
    \        }\n        else if(op[i]==\"-\"){\n            long a=st.top();\n   \
    \         st.pop();\n            long b=st.top();\n            st.pop();\n   \
    \         st.push(b-a);\n        }\n        else if(op[i]==\"*\"){\n         \
    \   long a=st.top();\n            st.pop();\n            long b=st.top();\n  \
    \          st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "  std::stack<long> st;\n\
    \  for(int i = 0; i < op.size(); i++) {\n    if(op[i] == \"+\") {\n      long\
    \ a = st.top();\n      st.pop();\n      long b = st.top();\n      st.pop();\n\
    \      st.push(a + b);\n    } else if(op[i] == \"-\") {\n      long a = st.top();\n\
    \      st.pop();\n      long b = st.top();\n      st.pop();\n      st.push(b -\
    \ a);\n    } else if(op[i] == \"*\") {\n      long a = st.top();\n      st.pop();\n\
    \      long b = st.top();\n      st.pop();\n      st.push(a * b);\n    } else\
    \ if(op[i] == \"//\") {\n      long a = st.top();\n      st.pop();\n      long\
    \ b = st.top();\n      st.pop();\n      st.push(b / a);\n    } else if(op[i] ==\
    \ \"**\") {\n      long a = st.top();\n      st.pop();\n      long b = st.top();\n\
    \      st.pop();\n      st.push(pow(b, a));\n    }\n  }\n  return st.top();",
  "    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a + b);\n\
    \        } else if(op[i] == \"-\") {\n            long a = st.top();\n       \
    \     st.pop();\n            long b = st.top();\n            st.pop();\n     \
    \       st.push(b - a);\n        } else if(op[i] == \"*\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(a * b);\n        } else if(op[i] == \"\
    //\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b / a);\n        }\
    \ else if(op[i] == \"**\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(pow(b,\
    \ a));\n        }\n    }\n    return st.top();", "    std::stack<long> st;\n \
    \   for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n     \
    \       long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a + b);\n        }\n        else if(op[i]\
    \ == \"-\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(b - a);\n\
    \        }\n        else if(op[i] == \"*\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a * b);\n        }\n        else if(op[i] == \"//\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b / a);\n        }\n        else if(op[i]\
    \ == \"**\") {\n            long a = st.top();\n            st.pop();\n      \
    \      long b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n\
    \        }\n        else {\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    std::stack<long> st;\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            long a = st.top();\n     \
    \       st.pop();\n            long b = st.top();\n            st.pop();\n   \
    \         st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"\
    *\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a * b);\n        }\
    \ else if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();", " \
    \   std::stack<long> st;\n    st.push(operand[0]);\n    for(int i = 0; i < op.size();\
    \ i++) {\n        long op2 = operand[i+1];\n        if(op[i] == \"+\") {\n   \
    \         st.push(op2);\n        } else if(op[i] == \"-\") {\n            st.push(-op2);\n\
    \        } else if(op[i] == \"*\") {\n            long op1 = st.top();\n     \
    \       st.pop();\n            st.push(op1 * op2);\n        } else if(op[i] ==\
    \ \"//\") {\n            long op1 = st.top();\n            st.pop();\n       \
    \     st.push(op1 / op2);\n        } else if(op[i] == \"**\") {\n            long\
    \ op1 = st.top();\n            st.pop();\n            st.push(pow(op1, op2));\n\
    \        }\n    }\n    long res = 0;\n    while(!st.empty()) {\n        res +=\
    \ st.top();\n        st.pop();\n    }\n    return res;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    long result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n     \
    \   if(op[i] == \"+\") {\n            result += operand[i+1];\n        } else\
    \ if(op[i] == \"-\") {\n            result -= operand[i+1];\n        } else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        } else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n \
    \   return result;", "    std::stack<long> st;\n    st.push(operand[0]);\n   \
    \ for(int i = 0; i < op.size(); i++) {\n        long op2 = operand[i+1];\n   \
    \     long op1 = st.top();\n        st.pop();\n        if(op[i] == \"+\") {\n\
    \            st.push(op1 + op2);\n        } else if(op[i] == \"-\") {\n      \
    \      st.push(op1 - op2);\n        } else if(op[i] == \"*\") {\n            st.push(op1\
    \ * op2);\n        } else if(op[i] == \"//\") {\n            st.push(op1 / op2);\n\
    \        } else if(op[i] == \"**\") {\n            st.push(pow(op1, op2));\n \
    \       }\n    }\n    return st.top();", "    long res = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            res\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            res -= operand[i+1];\n\
    \        } else if(op[i] == \"*\") {\n            res *= operand[i+1];\n     \
    \   } else if(op[i] == \"//\") {\n            res /= operand[i+1];\n        }\
    \ else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n    \
    \    }\n    }\n    return res;", "    long result = operand[0];\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n           \
    \ result -= operand[i+1];\n        }\n        else if(op[i] == \"*\") {\n    \
    \        result *= operand[i+1];\n        }\n        else if(op[i] == \"//\")\
    \ {\n            result /= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;", "    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "  long result = operand[0];\n  for (int\
    \ i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i\
    \ + 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n \
    \   } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else\
    \ if (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i]\
    \ == \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return\
    \ result;", "    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();", " \
    \   // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    std::stack<long>\
    \ st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a + b);\n        }\n        else if(op[i]\
    \ == \"-\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(b - a);\n\
    \        }\n        else if(op[i] == \"*\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a * b);\n        }\n        else if(op[i] == \"//\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b / a);\n        }\n        else if(op[i]\
    \ == \"**\") {\n            long a = st.top();\n            st.pop();\n      \
    \      long b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n\
    \        }\n        else {\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i]\
    \ == \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // your code here\n    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] ==\
    \ \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i]\
    \ == \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i]\
    \ == \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    std::stack<long> st;\n    st.push(operand[0]);\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        st.push(operand[i+1]);\n        } else if(op[i] == \"-\") {\n       \
    \     st.push(-operand[i+1]);\n        } else if(op[i] == \"*\") {\n         \
    \   long temp = st.top();\n            st.pop();\n            st.push(temp * operand[i+1]);\n\
    \        } else if(op[i] == \"//\") {\n            long temp = st.top();\n   \
    \         st.pop();\n            st.push(temp / operand[i+1]);\n        } else\
    \ if(op[i] == \"**\") {\n            long temp = st.top();\n            st.pop();\n\
    \            st.push(pow(temp, operand[i+1]));\n        }\n    }\n    long result\
    \ = 0;\n    while(!st.empty()) {\n        result += st.top();\n        st.pop();\n\
    \    }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    std::stack<long> st;\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(a + b);\n        }\n        else if(op[i]\
    \ == \"-\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(b - a);\n\
    \        }\n        else if(op[i] == \"*\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a * b);\n        }\n        else if(op[i] == \"//\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b / a);\n        }\n        else if(op[i]\
    \ == \"**\") {\n            long a = st.top();\n            st.pop();\n      \
    \      long b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n\
    \        }\n        else {\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    std::stack<long>\
    \ s;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n         \
    \   s.push(operand[i]+operand[i+1]);\n        }\n        else if(op[i]==\"-\"\
    ){\n            s.push(operand[i]-operand[i+1]);\n        }\n        else if(op[i]==\"\
    *\"){\n            s.push(operand[i]*operand[i+1]);\n        }\n        else if(op[i]==\"\
    //\"){\n            s.push(operand[i]/operand[i+1]);\n        }\n        else\
    \ if(op[i]==\"**\"){\n            s.push(pow(operand[i],operand[i+1]));\n    \
    \    }\n    }\n    return s.top();", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "  long result = operand[0];\n  for (int\
    \ i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i\
    \ + 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n \
    \   } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else\
    \ if (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i]\
    \ == \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return\
    \ result;", "    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            res -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            res *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;", "  long result = operand[0];\n  for (int\
    \ i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i\
    \ + 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n \
    \   } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else\
    \ if (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i]\
    \ == \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return\
    \ result;", "    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();", " \
    \   std::stack<long> st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a + b);\n\
    \        } else if(op[i] == \"-\") {\n            long a = st.top();\n       \
    \     st.pop();\n            long b = st.top();\n            st.pop();\n     \
    \       st.push(b - a);\n        } else if(op[i] == \"*\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(a * b);\n        } else if(op[i] == \"\
    //\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b / a);\n        }\
    \ else if(op[i] == \"**\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(pow(b,\
    \ a));\n        }\n    }\n    return st.top();", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    // To\
    \ print results to the standard output you can use std::cout\n    // Example:\
    \ std::cout << \"Hello world!\";\n    std::stack<long> s;\n    for(int i=0;i<op.size();i++){\n\
    \        if(op[i]==\"+\"){\n            long a=s.top();\n            s.pop();\n\
    \            long b=s.top();\n            s.pop();\n            s.push(a+b);\n\
    \        }\n        else if(op[i]==\"-\"){\n            long a=s.top();\n    \
    \        s.pop();\n            long b=s.top();\n            s.pop();\n       \
    \     s.push(b-a);\n        }\n        else if(op[i]==\"*\"){\n            long\
    \ a=s.top();\n            s.pop();\n            long b=s.top();\n            s.pop();\n\
    \            s.push(a*b);\n        }\n        else if(op[i]==\"//\"){\n      \
    \      long a=s.top();\n            s.pop();\n            long b=s.top();\n  \
    \          s.pop();\n            s.push(b/a);\n        }\n        else if(op[i]==\"\
    **\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(pow(b,a));\n        }\n        else{\n\
    \            s.push(operand[i]);\n        }\n    }\n    return s.top();", "  \
    \  // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    if(op.size() ==\
    \ 0)\n        return operand[0];\n    long res = operand[0];\n    for(int i =\
    \ 0; i < op.size(); i++){\n        if(op[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if(op[i] == \"-\")\n            res -= operand[i+1];\n        else\
    \ if(op[i] == \"*\")\n            res *= operand[i+1];\n        else if(op[i]\
    \ == \"//\")\n            res /= operand[i+1];\n        else if(op[i] == \"**\"\
    )\n            res = pow(res, operand[i+1]);\n    }\n    return res;", "    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i]\
    \ == \"+\") {\n            result += operand[i+1];\n        } else if(op[i] ==\
    \ \"-\") {\n            result -= operand[i+1];\n        } else if(op[i] == \"\
    *\") {\n            result *= operand[i+1];\n        } else if(op[i] == \"//\"\
    ) {\n            result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n\
    \            result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;", "    // Write your code here\n    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            result\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            result\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ result /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n    \
    \        result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    std::stack<long> st;\n    st.push(operand[0]);\n    for(int i = 0; i < op.size();\
    \ i++) {\n        long a = st.top();\n        st.pop();\n        long b = operand[i+1];\n\
    \        if(op[i] == \"+\") {\n            st.push(a+b);\n        } else if(op[i]\
    \ == \"-\") {\n            st.push(a-b);\n        } else if(op[i] == \"*\") {\n\
    \            st.push(a*b);\n        } else if(op[i] == \"//\") {\n           \
    \ st.push(a/b);\n        } else if(op[i] == \"**\") {\n            st.push(pow(a,\
    \ b));\n        }\n    }\n    return st.top();", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        }\n        else if(op[i] == \"-\") {\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ) {\n            result *= operand[i+1];\n        }\n        else if(op[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        result += operand[i+1];\n        } else if(op[i] == \"-\") {\n      \
    \      result -= operand[i+1];\n        } else if(op[i] == \"*\") {\n        \
    \    result *= operand[i+1];\n        } else if(op[i] == \"//\") {\n         \
    \   result /= operand[i+1];\n        } else if(op[i] == \"**\") {\n          \
    \  result = pow(result, operand[i+1]);\n        }\n    }\n    return result;",
  "    std::stack<long> s;\n    s.push(operand[0]);\n    for(int i = 0; i < op.size();\
    \ i++) {\n        long a = s.top();\n        s.pop();\n        long b = operand[i+1];\n\
    \        if(op[i] == \"+\") {\n            s.push(a+b);\n        } else if(op[i]\
    \ == \"-\") {\n            s.push(a-b);\n        } else if(op[i] == \"*\") {\n\
    \            s.push(a*b);\n        } else if(op[i] == \"//\") {\n            s.push(a/b);\n\
    \        } else if(op[i] == \"**\") {\n            s.push(pow(a,b));\n       \
    \ }\n    }\n    return s.top();", "    // Write your code here\n    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] ==\
    \ \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    std::stack<long>\
    \ st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n        \
    \    long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(b-a);\n        }\n\
    \        else if(op[i]==\"*\"){\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(a*b);\n\
    \        }\n        else if(op[i]==\"//\"){\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b/a);\n        }\n        else if(op[i]==\"**\"){\n     \
    \       long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b,a));\n        }\n        else{\n\
    \            st.push(operand[i]);\n        }\n    }\n    return st.top();", " \
    \   // Write your code here\n    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\"){\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "\t// Write your code\
    \ here\n\t// To print results to the standard output you can use std::cout\n\t\
    // Example: std::cout << \"Hello world!\";\n\tstd::stack<long> st;\n\tfor (int\
    \ i = 0; i < op.size(); i++) {\n\t\tif (op[i] == \"+\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a +\
    \ b);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\t\t\tlong a = st.top();\n\t\t\t\
    st.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b - a);\n\t\
    \t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\
    \t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a * b);\n\t\t}\n\t\t\
    else if (op[i] == \"//\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\t\
    long b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b / a);\n\t\t}\n\t\telse if\
    \ (op[i] == \"**\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b\
    \ = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b, a));\n\t\t}\n\t\telse {\n\
    \t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();", "    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] ==\
    \ \"+\") {\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\") {\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\") {\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\") {\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long res = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        res += operand[i+1];\n        } else if(op[i] == \"-\") {\n         \
    \   res -= operand[i+1];\n        } else if(op[i] == \"*\") {\n            res\
    \ *= operand[i+1];\n        } else if(op[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        } else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;", "    // Write your code here\n    long result\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] ==\
    \ \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;", "    long res = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n    \
    \        res += operand[i+1];\n        } else if(op[i] == \"-\") {\n         \
    \   res -= operand[i+1];\n        } else if(op[i] == \"*\") {\n            res\
    \ *= operand[i+1];\n        } else if(op[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        } else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "  long result = operand[0];\n  for (int\
    \ i = 0; i < op.size(); i++) {\n    if (op[i] == \"+\") {\n      result += operand[i\
    \ + 1];\n    } else if (op[i] == \"-\") {\n      result -= operand[i + 1];\n \
    \   } else if (op[i] == \"*\") {\n      result *= operand[i + 1];\n    } else\
    \ if (op[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (op[i]\
    \ == \"**\") {\n      result = pow(result, operand[i + 1]);\n    }\n  }\n  return\
    \ result;", "  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;", "    std::stack<long>\
    \ st;\n    for(int i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(a + b);\n        } else if(op[i] ==\
    \ \"-\") {\n            long a = st.top();\n            st.pop();\n          \
    \  long b = st.top();\n            st.pop();\n            st.push(b - a);\n  \
    \      } else if(op[i] == \"*\") {\n            long a = st.top();\n         \
    \   st.pop();\n            long b = st.top();\n            st.pop();\n       \
    \     st.push(a * b);\n        } else if(op[i] == \"//\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(b / a);\n        } else if(op[i] == \"\
    **\") {\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n    \
    \    }\n    }\n    return st.top();", "    std::stack<long> stk;\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            long\
    \ a = stk.top();\n            stk.pop();\n            long b = stk.top();\n  \
    \          stk.pop();\n            stk.push(a + b);\n        } else if(op[i] ==\
    \ \"-\") {\n            long a = stk.top();\n            stk.pop();\n        \
    \    long b = stk.top();\n            stk.pop();\n            stk.push(b - a);\n\
    \        } else if(op[i] == \"*\") {\n            long a = stk.top();\n      \
    \      stk.pop();\n            long b = stk.top();\n            stk.pop();\n \
    \           stk.push(a * b);\n        } else if(op[i] == \"//\") {\n         \
    \   long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(b / a);\n        } else if(op[i]\
    \ == \"**\") {\n            long a = stk.top();\n            stk.pop();\n    \
    \        long b = stk.top();\n            stk.pop();\n            stk.push(pow(b,\
    \ a));\n        } else {\n            stk.push(operand[i]);\n        }\n    }\n\
    \    return stk.top();", "    long result = operand[0];\n    for(int i = 0; i\
    \ < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    long\
    \ result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i]\
    \ == \"+\"){\n            result += operand[i+1];\n        }\n        else if(op[i]\
    \ == \"-\"){\n            result -= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"//\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    // Write your code here\n    std::stack<long>\
    \ st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n        \
    \    long a=st.top();\n            st.pop();\n            long b=st.top();\n \
    \           st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    long result = operand[0];\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result\
    \ += operand[i+1];\n        } else if(op[i] == \"-\") {\n            result -=\
    \ operand[i+1];\n        } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n \
    \       } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;", "    std::stack<long> st;\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(a + b);\n        }\n        else if(op[i]\
    \ == \"-\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(b - a);\n\
    \        }\n        else if(op[i] == \"*\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a * b);\n        }\n        else if(op[i] == \"//\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b / a);\n        }\n        else if(op[i]\
    \ == \"**\") {\n            long a = st.top();\n            st.pop();\n      \
    \      long b = st.top();\n            st.pop();\n            st.push(pow(b, a));\n\
    \        }\n        else {\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();", "    // Write your code here\n    long result = operand[0];\n\
    \    for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n      \
    \      result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n\
    \            result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"\
    ){\n            result *= operand[i+1];\n        }\n        else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }\n        else if(op[i]\
    \ == \"**\"){\n            result = pow(result, operand[i+1]);\n        }\n  \
    \  }\n    return result;", "    long result = operand[0];\n    for(int i = 0;\
    \ i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
