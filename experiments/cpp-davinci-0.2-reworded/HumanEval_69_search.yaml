name: HumanEval_69_search
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
  \ vector of positive integers. Return the greatest integer that is greater than\
  \ \n// zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n// The frequency of an integer is the number of times it appears in\
  \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
  \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n//\
  \ (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n\
  // (-1)\nlong search(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
  \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
  \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
  \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
  \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
  \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
  \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
  \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
  \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
  \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
  \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
  \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1,\
  \ (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1,\
  \ (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3,\
  \ (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9,\
  \ (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
  \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
  \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
  \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
  \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
  \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9,\
  \ (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10,\
  \ (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) ==\
  \ (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7,\
  \ (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1,\
  \ (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9,\
  \ (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2,\
  \ (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7,\
  \ (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
completions: ["    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n      \
    \      return i.first;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second && i.first > max) {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++) {\n        if(it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            if (it->first >\
    \ max) {\n                max = it->first;\n            }\n        }\n    }\n\
    \    return max;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    long max = -1;\n    for (auto i : freq) {\n  \
    \      if (i.first <= i.second && i.first > max) {\n            max = i.first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst) {\n        m[i]++;\n    }\n    long max = -1;\n    for(auto\
    \ i: m) {\n        if(i.first <= i.second && i.first > max) {\n            max\
    \ = i.first;\n        }\n    }\n    return max;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first<=i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second) {\n            if (i.first > max) {\n                max = i.first;\n\
    \            }\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "\tstd::map<long,\
    \ long> map;\n\tfor (auto i : lst) {\n\t\tmap[i]++;\n\t}\n\tfor (auto i : map)\
    \ {\n\t\tif (i.first <= i.second) {\n\t\t\treturn i.first;\n\t\t}\n\t}\n\treturn\
    \ -1;", "    // your code here\n    std::map<long, long> m;\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        m[lst[i]]++;\n    }\n    long max = -1;\n   \
    \ for(auto it = m.begin(); it != m.end(); it++){\n        if(it->first <= it->second\
    \ && it->first > max){\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n      \
    \      return i.first;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second && i.first > max) {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "    std::map<long, long> m;\n    for(auto i: lst)\n      \
    \  m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <=\
    \ it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "  std::unordered_map<long, long> freq;\n  for (auto\
    \ x : lst) {\n    freq[x]++;\n  }\n  long max = -1;\n  for (auto x : freq) {\n\
    \    if (x.first <= x.second && x.first > max) {\n      max = x.first;\n    }\n\
    \  }\n  return max;", "    std::map<long, long> m;\n    for(auto i : lst) {\n\
    \        m[i]++;\n    }\n    long ans = -1;\n    for(auto i : m) {\n        if(i.first\
    \ <= i.second) {\n            ans = std::max(ans, i.first);\n        }\n    }\n\
    \    return ans;", "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second)\
    \ {\n            if (it->first > max) {\n                max = it->first;\n  \
    \          }\n        }\n    }\n    return max;", "    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : lst) {\n        if (freq[i] >= i) {\n            return i;\n        }\n\
    \    }\n    return -1;", "    std::unordered_map<long, long> freq;\n    for (auto\
    \ i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n    for (auto i :\
    \ freq) {\n        if (i.first <= i.second && i.first > max) {\n            max\
    \ = i.first;\n        }\n    }\n    return max;", "    std::map<long, long> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq)\
    \ {\n        if (i.first <= i.second) {\n            return i.first;\n       \
    \ }\n    }\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> freq;\n  \
    \  for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n\
    \        if (i.first <= i.second) {\n            return i.first;\n        }\n\
    \    }\n    return -1;", "    std::map<long, long> m;\n    for(auto i: lst) {\n\
    \        m[i]++;\n    }\n    long max = -1;\n    for(auto i: m) {\n        if(i.first\
    \ <= i.second) {\n            if(i.first > max) {\n                max = i.first;\n\
    \            }\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            if (it->first >\
    \ max) {\n                max = it->first;\n            }\n        }\n    }\n\
    \    return max;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    long ans = -1;\n    for (auto i : freq) {\n  \
    \      if (i.first <= i.second) {\n            ans = std::max(ans, i.first);\n\
    \        }\n    }\n    return ans;", "    std::map<long, long> m;\n    for(int\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long ans = -1;\n\
    \    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <=\
    \ it->second) {\n            ans = std::max(ans, it->first);\n        }\n    }\n\
    \    return ans;", "    std::map<long, long> m;\n    for(auto i: lst)\n      \
    \  m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, long> freq;\n    for (auto i\
    \ : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n       \
    \ m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\
    \ m[i]++;\n    for(auto i : m) {\n        if(i.first <= i.second) return i.first;\n\
    \    }\n    return -1;", "    std::map<long, long> freq;\n    for (auto i : lst)\
    \ {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n      \
    \      return i.first;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::map<long, long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n \
    \   for(auto i: m) {\n        if(i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n\
    \    for(auto i: m) {\n        if(i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    long max = -1;\n    for(auto i :\
    \ m)\n        if(i.first <= i.second && i.first > max)\n            max = i.first;\n\
    \    return max;", "    std::map<long, long> frequency;\n    for (auto i: lst)\
    \ {\n        frequency[i]++;\n    }\n    long max = -1;\n    for (auto i: frequency)\
    \ {\n        if (i.first <= i.second) {\n            if (i.first > max) {\n  \
    \              max = i.first;\n            }\n        }\n    }\n    return max;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second && i.first > max) {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "\tstd::map<long, long> m;\n\tfor (auto i : lst) {\n\t\tm[i]++;\n\
    \t}\n\tfor (auto i : m) {\n\t\tif (i.first <= i.second) {\n\t\t\treturn i.first;\n\
    \t\t}\n\t}\n\treturn -1;", "\tstd::map<long, long> freq;\n\tfor (auto i : lst)\
    \ {\n\t\tfreq[i]++;\n\t}\n\tlong max = -1;\n\tfor (auto i : freq) {\n\t\tif (i.first\
    \ <= i.second && i.first > max) {\n\t\t\tmax = i.first;\n\t\t}\n\t}\n\treturn\
    \ max;", "    std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n\
    \    }\n    long max = -1;\n    for(auto i : m) {\n        if(i.first <= i.second\
    \ && i.first > max) {\n            max = i.first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> freq;\n    for (long i : lst) {\n        freq[i]++;\n\
    \    }\n    long ans = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            ans = std::max(ans,\
    \ it->first);\n        }\n    }\n    return ans;", "    // your code here\n  \
    \  std::map<long, long> m;\n    for(auto i: lst)\n    {\n        m[i]++;\n   \
    \ }\n    long max = -1;\n    for(auto i: m)\n    {\n        if(i.first <= i.second\
    \ && i.first > max)\n        {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\n     \
    \   m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n          \
    \  return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq)\
    \ {\n        if (i.first <= i.second) {\n            return i.first;\n       \
    \ }\n    }\n    return -1;", "    std::map<long, long> freq;\n    for (auto i\
    \ : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "\tstd::map<long, long> m;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tm[lst[i]]++;\n\
    \t}\n\tlong max = -1;\n\tfor (std::map<long, long>::iterator it = m.begin(); it\
    \ != m.end(); it++) {\n\t\tif (it->first <= it->second && it->first > max) {\n\
    \t\t\tmax = it->first;\n\t\t}\n\t}\n\treturn max;", "    std::map<long, long>\
    \ freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::unordered_map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long res = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second) {\n            res = std::max(res, i.first);\n        }\n    }\n \
    \   return res;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size();\
    \ i++)\n        m[lst[i]]++;\n    long ans = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++)\n        if(it->first <= it->second)\n            ans =\
    \ std::max(ans, it->first);\n    return ans;", "    // your code here\n    std::map<long,long>\
    \ m;\n    for(auto i:lst)\n    {\n        m[i]++;\n    }\n    long max=-1;\n \
    \   for(auto i:m)\n    {\n        if(i.first<=i.second && i.first>max)\n     \
    \   {\n            max=i.first;\n        }\n    }\n    return max;", "    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : lst) {\n        if (freq[i] >= i) {\n            return i;\n        }\n\
    \    }\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> freq;\n  \
    \  for (auto i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n    for\
    \ (auto i : freq) {\n        if (i.first <= i.second && i.first > max) {\n   \
    \         max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::unordered_map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::unordered_map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    long max_freq = -1;\n    for (auto i : freq) {\n\
    \        if (i.first <= i.second) {\n            max_freq = std::max(max_freq,\
    \ i.first);\n        }\n    }\n    return max_freq;", "    std::map<long, long>\
    \ freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i\
    \ : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> freq;\n    for (auto x : lst) {\n        freq[x]++;\n\
    \    }\n    long ans = -1;\n    for (auto x : freq) {\n        if (x.first <=\
    \ x.second) {\n            ans = std::max(ans, x.first);\n        }\n    }\n \
    \   return ans;", "    std::map<long, long> m;\n    for(auto i: lst)\n       \
    \ m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n            return\
    \ i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long i = 0;\
    \ i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n  \
    \  for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n      \
    \      return i.first;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::unordered_map<long, long> m;\n    for(auto x: lst)\n        m[x]++;\n\
    \    for(auto x: lst)\n        if(m[x] >= x)\n            return x;\n    return\
    \ -1;", "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second)\
    \ {\n            if (it->first > max) {\n                max = it->first;\n  \
    \          }\n        }\n    }\n    return max;", "    std::map<long,long> m;\n\
    \    for(auto i:lst)\n        m[i]++;\n    for(auto i:m)\n        if(i.first<=i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : lst) {\n        if (freq[i] >= i) {\n            return i;\n        }\n\
    \    }\n    return -1;", "    std::map<long, long> m;\n    for(int i = 0; i <\
    \ lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    for(int i = lst.size()\
    \ - 1; i >= 0; i--) {\n        if(m[lst[i]] >= lst[i]) {\n            return lst[i];\n\
    \        }\n    }\n    return -1;", "    std::unordered_map<long, long> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n   \
    \ for (auto i : freq) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", "\t\
    std::map<long, long> freq;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfreq[lst[i]]++;\n\
    \t}\n\tlong max = -1;\n\tfor (auto it = freq.begin(); it != freq.end(); it++)\
    \ {\n\t\tif (it->first <= it->second && it->first > max) {\n\t\t\tmax = it->first;\n\
    \t\t}\n\t}\n\treturn max;", "  std::map<long, long> freq;\n  for (auto i : lst)\
    \ {\n    freq[i]++;\n  }\n  long max = -1;\n  for (auto i : freq) {\n    if (i.first\
    \ <= i.second && i.first > max) {\n      max = i.first;\n    }\n  }\n  return\
    \ max;", "    std::unordered_map<long, long> m;\n    for(auto i: lst)\n      \
    \  m[i]++;\n    long ans = -1;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            ans = std::max(ans, i.first);\n    return ans;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it = freq.begin();\
    \ it != freq.end(); it++) {\n        if (it->first <= it->second && it->first\
    \ > max) {\n            max = it->first;\n        }\n    }\n    return max;",
  "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n\
    \    }\n    long max = -1;\n    for(auto i : m) {\n        if(i.first <= i.second\
    \ && i.first > max) {\n            max = i.first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (std::map<long,\
    \ long>::iterator it = freq.begin(); it != freq.end(); it++) {\n        if (it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\
    \ {\n        m[i]++;\n    }\n    long max = -1;\n    for(auto i : m) {\n     \
    \   if(i.first <= i.second && i.first > max) {\n            max = i.first;\n \
    \       }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n   \
    \ long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n      \
    \  if(it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n    for(auto i : m)\
    \ {\n        if(i.first <= i.second && i.first > max) {\n            max = i.first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max = -1;\n   \
    \ for (auto i : freq) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto\
    \ i: m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it = freq.begin();\
    \ it != freq.end(); it++) {\n        if (it->first <= it->second && it->first\
    \ > max) {\n            max = it->first;\n        }\n    }\n    return max;",
  "    std::unordered_map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::unordered_map<long, long> freq;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> freq;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> freq;\n    for (auto i : lst)\
    \ {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::unordered_map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n\
    \    }\n    long ans = -1;\n    for(auto i : m) {\n        if(i.first <= i.second)\
    \ {\n            ans = std::max(ans, i.first);\n        }\n    }\n    return ans;",
  "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto\
    \ i: m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n\
    \    for(auto i : m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        m[lst[i]]++;\n    }\n    std::map<long, long>::iterator it;\n\
    \    long max = -1;\n    for(it = m.begin(); it != m.end(); it++) {\n        if(it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> freq;\n  \
    \  for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n\
    \        if (i.first <= i.second) {\n            return i.first;\n        }\n\
    \    }\n    return -1;", "    std::map<long, long> m;\n    for(auto i : lst) {\n\
    \        m[i]++;\n    }\n    long ans = -1;\n    for(auto i : m) {\n        if(i.first\
    \ <= i.second) {\n            ans = std::max(ans, i.first);\n        }\n    }\n\
    \    return ans;", "    long max = -1;\n    std::map<long, long> m;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (m[lst[i]] >= lst[i] && lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    return max;", "  std::map<long,\
    \ long> m;\n  for (auto i : lst) {\n    m[i]++;\n  }\n  long ans = -1;\n  for\
    \ (auto i : m) {\n    if (i.first <= i.second) {\n      ans = std::max(ans, i.first);\n\
    \    }\n  }\n  return ans;", "    std::unordered_map<long, long> freq;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    long\
    \ max = -1;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n    \
    \    if (it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> freq;\n    for\
    \ (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n   \
    \     if (i.first <= i.second) {\n            return i.first;\n        }\n   \
    \ }\n    return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n   \
    \     m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n         \
    \   return i.first;\n    return -1;", "    long max = -1;\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq.find(lst[i])\
    \ == freq.end()) {\n            freq[lst[i]] = 1;\n        } else {\n        \
    \    freq[lst[i]] += 1;\n        }\n    }\n    for (auto it = freq.begin(); it\
    \ != freq.end(); it++) {\n        if (it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    std::map<long, long>::iterator it = freq.begin();\n    long max =\
    \ -1;\n    while (it != freq.end()) {\n        if (it->first <= it->second &&\
    \ it->first > max) {\n            max = it->first;\n        }\n        it++;\n\
    \    }\n    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> freq;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n \
    \   long max = -1;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n\
    \        if (it->first <= it->second) {\n            if (it->first > max) {\n\
    \                max = it->first;\n            }\n        }\n    }\n    return\
    \ max;", "    // your code here\n    std::unordered_map<long,long> freq;\n   \
    \ for(auto i:lst)\n        freq[i]++;\n    for(auto i:lst)\n        if(i<=freq[i])\n\
    \            return i;\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq)\
    \ {\n        if (i.first <= i.second) {\n            return i.first;\n       \
    \ }\n    }\n    return -1;", "    std::map<long, long> freq;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    long max =\
    \ -1;\n    for (std::map<long, long>::iterator it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::map<long, long> m;\n\
    \    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(long i = 0; i < lst.size(); i++) {\n    \
    \    m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin(); it\
    \ != m.end(); it++) {\n        if(it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;", " \
    \   std::map<long, long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n\
    \    for(auto i : m) {\n        if(i.first <= i.second) {\n            return\
    \ i.first;\n        }\n    }\n    return -1;", "    std::map<long,long> m;\n \
    \   for(long i=0;i<lst.size();i++){\n        m[lst[i]]++;\n    }\n    long max=-1;\n\
    \    for(auto it=m.begin();it!=m.end();it++){\n        if(it->first<=it->second){\n\
    \            max=std::max(max,it->first);\n        }\n    }\n    return max;",
  "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto\
    \ i: m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    // your code here\n    std::map<long, long> map;\n    for(int i =\
    \ 0; i < lst.size(); i++){\n        map[lst[i]]++;\n    }\n    long max = 0;\n\
    \    for(auto it = map.begin(); it != map.end(); it++){\n        if(it->first\
    \ <= it->second && it->first > max){\n            max = it->first;\n        }\n\
    \    }\n    if(max == 0){\n        return -1;\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n    long ans = -1;\n\
    \    for(auto i: m) {\n        if(i.first <= i.second) {\n            ans = std::max(ans,\
    \ i.first);\n        }\n    }\n    return ans;", "    std::map<long, long> m;\n\
    \    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n        if(i.first\
    \ <= i.second)\n            return i.first;\n    return -1;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for(auto i: m) {\n        if(i.first <= i.second && i.first > max) {\n  \
    \          max = i.first;\n        }\n    }\n    return max;", "    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;", " \
    \   std::map<long, long> m;\n    for(long i=0; i<lst.size(); i++){\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++){\n\
    \        if(it->first <= it->second && it->first > max){\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> freq;\n    for\
    \ (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n   \
    \     if (i.first <= i.second) {\n            return i.first;\n        }\n   \
    \ }\n    return -1;", "    std::map<long, long> freq;\n    for (auto i : lst)\
    \ {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n      \
    \      return i.first;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;", "    std::map<long, long> count;\n    for\
    \ (auto i : lst) {\n        count[i]++;\n    }\n    long max = -1;\n    for (auto\
    \ i : count) {\n        if (i.first <= i.second) {\n            max = std::max(max,\
    \ i.first);\n        }\n    }\n    return max;", "    std::map<long, long> m;\n\
    \    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n   \
    \ long max = -1;\n    for(std::map<long, long>::iterator it = m.begin(); it !=\
    \ m.end(); it++) {\n        if(it->first <= it->second && it->first > max) {\n\
    \            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n    for(auto i :\
    \ m) {\n        if(i.first <= i.second) {\n            return i.first;\n     \
    \   }\n    }\n    return -1;", "    std::map<long, long> freq;\n    for (auto\
    \ i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if\
    \ (i.first <= i.second) {\n            return i.first;\n        }\n    }\n   \
    \ return -1;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n   \
    \     freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first <= i.second)\
    \ {\n            return i.first;\n        }\n    }\n    return -1;", "    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for (long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if (it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "  std::map<long, long> m;\n\
    \  for (auto i : lst) {\n    m[i]++;\n  }\n  long max = -1;\n  for (auto i : m)\
    \ {\n    if (i.first <= i.second && i.first > max) {\n      max = i.first;\n \
    \   }\n  }\n  return max;", "    std::map<long, long> m;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    std::map<long, long>::iterator\
    \ it;\n    for (it = m.begin(); it != m.end(); it++) {\n        if (it->first\
    \ <= it->second) {\n            return it->first;\n        }\n    }\n    return\
    \ -1;", "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : m) {\n        if (i.first <= i.second)\
    \ {\n            if (i.first > max) {\n                max = i.first;\n      \
    \      }\n        }\n    }\n    return max;", "  std::map<long, long> m;\n  for\
    \ (auto i : lst) {\n    m[i]++;\n  }\n  long max = -1;\n  for (auto i : m) {\n\
    \    if (i.first <= i.second && i.first > max) {\n      max = i.first;\n    }\n\
    \  }\n  return max;", "    std::map<long, long> m;\n    for(auto i : lst) {\n\
    \        m[i]++;\n    }\n    long max = -1;\n    for(auto i : m) {\n        if(i.first\
    \ <= i.second) {\n            if(i.first > max) {\n                max = i.first;\n\
    \            }\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n \
    \   for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max_freq = -1;\n    long max_num = -1;\n    for (std::map<long,\
    \ long>::iterator it = freq.begin(); it != freq.end(); it++) {\n        if (it->first\
    \ <= it->second && it->second > max_freq) {\n            max_freq = it->second;\n\
    \            max_num = it->first;\n        }\n    }\n    return max_num;", " \
    \   std::unordered_map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second && i.first > max) {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "    std::map<long,long> m;\n    for(auto i:lst)\n        m[i]++;\n\
    \    for(auto i:m)\n        if(i.first<=i.second)\n            return i.first;\n\
    \    return -1;", "    std::unordered_map<long, long> freq;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->first\
    \ <= it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> freq;\n    for (auto i : lst)\
    \ {\n        freq[i]++;\n    }\n    long ans = -1;\n    for (auto i : freq) {\n\
    \        if (i.first <= i.second) {\n            ans = i.first;\n        }\n \
    \   }\n    return ans;", "    std::map<long, long> m;\n    for(auto i: lst)\n\
    \        m[i]++;\n    for(auto i: m)\n        if(i.first <= i.second)\n      \
    \      return i.first;\n    return -1;", "    std::map<long, long> m;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = -1;\n\
    \    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->first <=\
    \ it->second && it->first > max) {\n            max = it->first;\n        }\n\
    \    }\n    return max;", "    std::map<long, long> m;\n    for(auto i : lst)\n\
    \        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n     \
    \       return i.first;\n    return -1;", "    std::map<long, long> m;\n    for\
    \ (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if\
    \ (i.first <= i.second) {\n            return i.first;\n        }\n    }\n   \
    \ return -1;", "    std::map<long, long> m;\n    for(auto i: lst)\n        m[i]++;\n\
    \    for(auto i: m)\n        if(i.first <= i.second)\n            return i.first;\n\
    \    return -1;", "    std::map<long, long> m;\n    for(long i = 0; i < lst.size();\
    \ i++)\n        m[lst[i]]++;\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++)\n        if(it->first <= it->second && it->first > max)\n\
    \            max = it->first;\n    return max;", "    std::map<long, long> m;\n\
    \    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n    for\
    \ (auto i : m) {\n        if (i.first <= i.second) {\n            if (i.first\
    \ > max) {\n                max = i.first;\n            }\n        }\n    }\n\
    \    return max;", "\tstd::map<long, long> freq;\n\tfor (auto i : lst) {\n\t\t\
    freq[i]++;\n\t}\n\tfor (auto i : freq) {\n\t\tif (i.first <= i.second) {\n\t\t\
    \treturn i.first;\n\t\t}\n\t}\n\treturn -1;", "    std::map<long, long> m;\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n   \
    \ long max = -1;\n    for (auto it = m.begin(); it != m.end(); it++) {\n     \
    \   if (it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for (auto\
    \ i: lst) {\n        m[i]++;\n    }\n    for (auto i: m) {\n        if (i.first\
    \ <= i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it = freq.begin();\
    \ it != freq.end(); it++) {\n        if (it->first <= it->second && it->first\
    \ > max) {\n            max = it->first;\n        }\n    }\n    return max;",
  "    std::unordered_map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second && i.first > max) {\n            max = i.first;\n        }\n    }\n\
    \    return max;", "    std::map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.first <=\
    \ i.second) {\n            return i.first;\n        }\n    }\n    return -1;",
  "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n\
    \    for (auto i : m) {\n        if (i.first <= i.second) {\n            return\
    \ i.first;\n        }\n    }\n    return -1;", "    std::map<long, int> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    long res = -1;\n   \
    \ for (auto i : freq) {\n        if (i.first <= i.second) {\n            res =\
    \ std::max(res, i.first);\n        }\n    }\n    return res;", "    std::map<long,\
    \ long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for (auto i : m) {\n        if (i.first <= i.second && i.first > max) {\n\
    \            max = i.first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> frequency;\n    for (long i = 0; i < lst.size(); i++) {\n        frequency[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = frequency.begin(); it != frequency.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;", "    std::map<long, long>\
    \ m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n\
    \    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++) {\n   \
    \     if(it->first <= it->second && it->first > max) {\n            max = it->first;\n\
    \        }\n    }\n    return max;", "    std::map<long, long> m;\n    for(auto\
    \ i : lst)\n        m[i]++;\n    for(auto i : m)\n        if(i.first <= i.second)\n\
    \            return i.first;\n    return -1;", "    std::unordered_map<long, long>\
    \ m;\n    for(auto i: lst)\n        m[i]++;\n    long max = -1;\n    for(auto\
    \ i: m)\n        if(i.first <= i.second && i.first > max)\n            max = i.first;\n\
    \    return max;", "    std::map<long, long> freq;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    long max = -1;\n    for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n        if (it->first <= it->second\
    \ && it->first > max) {\n            max = it->first;\n        }\n    }\n    return\
    \ max;", "    std::unordered_map<long, long> freq;\n    for (auto i : lst) {\n\
    \        freq[i]++;\n    }\n    long max = -1;\n    for (auto i : freq) {\n  \
    \      if (i.first <= i.second && i.first > max) {\n            max = i.first;\n\
    \        }\n    }\n    return max;", "    std::unordered_map<long, long> freq;\n\
    \    for (auto i : lst) {\n        freq[i]++;\n    }\n    long ans = -1;\n   \
    \ for (auto i : freq) {\n        if (i.first <= i.second) {\n            ans =\
    \ std::max(ans, i.first);\n        }\n    }\n    return ans;", "    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;", "  \
    \  std::map<long, long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second)\n            return i.first;\n    return\
    \ -1;", "    std::map<long, int> m;\n    for(int i = 0; i < lst.size(); i++) {\n\
    \        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++) {\n        if(it->first <= it->second && it->first > max)\
    \ {\n            max = it->first;\n        }\n    }\n    return max;", "    std::map<long,\
    \ long> freq;\n    for (auto& i : lst) {\n        freq[i]++;\n    }\n    for (auto&\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;"]
stop_tokens:
- "\n}"
